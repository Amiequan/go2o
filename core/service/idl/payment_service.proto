syntax = "proto3";

import "global.proto";

option go_package = "./;proto";
option java_package = "com.github.go2o.rpc";


message AdjustOrderRequest {
    string payment_no = 1;
    double amount = 2;
}

message DiscountBalanceRequest {
    sint32 order_id = 1;
    string remark = 2;
}

message DiscountIntegralRequest {
    sint32 order_id = 1;
    sint64 integral = 2;
    bool ignore_out = 3;
}

message WalletPaymentRequest {
    string trade_no = 1;
    bool merge_pay = 2;
    string remark = 3;
}

message HyperPaymentRequest {
    sint32 order_id = 1;
    string remark = 2;
}

message FinishPaymentRequest {
    string trade_no = 1;
    string sp_name = 2;
    string outer_no = 3;
}

// 支付服务
service PaymentService {
    // 创建支付单并提交
    rpc SubmitPaymentOrder (SPaymentOrder) returns (Result) {
    }
    // 根据支付单号获取支付单,orderNo
    rpc GetPaymentOrder (String) returns (SPaymentOrder) {
    }
    // 根据交易号获取支付单编号,tradeNo
    rpc GetPaymentOrderId (String) returns (Int32) {
    }
    // 根据编号获取支付单
    rpc GetPaymentOrderById (Int32) returns (SPaymentOrder) {
    }
    // 调整支付单金额
    rpc AdjustOrder (AdjustOrderRequest) returns (Result) {
    }
    // 余额抵扣
    rpc DiscountByBalance (DiscountBalanceRequest) returns (Result) {
    }
    // 积分抵扣支付单
    rpc DiscountByIntegral (DiscountIntegralRequest) returns (Result) {
    }
    // 钱包账户支付
    rpc PaymentByWallet (WalletPaymentRequest) returns (Result) {
    }
    // 余额钱包混合支付，优先扣除余额。
    rpc HybridPayment (HyperPaymentRequest) returns (Result) {
    }
    // 完成支付单支付，并传入支付方式及外部订单号
    rpc FinishPayment (FinishPaymentRequest) returns (Result) {
    }

    // 支付网关
    rpc GatewayV1 (PayGatewayRequest) returns (Result) {
    }
    // 获取支付预交易数据
    rpc GetPaymentOrderInfo (OrderInfoRequest) returns (SPrepareTradeData) {
    }

    /**
     * 支付单混合支付
     *
     * @param storeCode 店铺编号
     * @param tradeNo   交易号
     * @param data  支付数据
     * @return 支付结果,返回:order_state
     */
    rpc MixedPayment (MixedPaymentRequest) returns (Result) {
    }
}

message OrderInfoRequest {
    string trade_no = 1;
    bool merge_pay = 2;
}

message MixedPaymentRequest {
    string trade_no = 1;
    repeated SRequestPayData data = 2;
}

message PayGatewayRequest {
    string action = 1;
    sint64 user_id = 2;
    map<string, string> data = 3;
}

/** 支付方式的位值 */
enum EPayMethod {
    _4 = 0;
    /** 余额抵扣 */
    balance = 1;
    /** 钱包支付 */
    Wallet = 2;
    /** 积分兑换 */
    Integral = 4;
    /** 用户卡 */
    UserCard = 8;
    /** 用户券 */
    UserCoupon = 16;
    /** 现金支付 */
    Cash = 32;
    /** 银行卡支付 */
    BankCard = 64;
    /** 第三方支付,如支付宝等 */
    PaySP = 128;
    /** 卖家支付通道 */
    SellerPay = 256;
    /** 系统支付通道 */
    SystemPay = 512;
}
/** 支付单 */
message SPaymentOrder {
    /** 交易号 */
    string trade_no = 1;
    /** 卖家编号 */
    sint32 seller_id = 2;
    /** 交易类型 */
    string trade_type= 3;
    /** 合并支付交单单号 */
    string merge_trade_no = 4;
    /** 支付单详情 */
    string subject = 5;
    /** 是否为子订单 */
    bool sub_order = 6;
    /** 支付单的类型，如购物或其他 */
    sint32 order_type = 7;
    /** 外部订单号 */
    string out_order_no = 8;
    /** 买家编号 */
    sint32 buyer_id = 9;
    /** 支付用户编号 */
    sint32 pay_uid = 10;
    /** 商品金额 */
    sint32 item_amount = 11;
    /** 优惠金额  */
    sint32 discount_amount = 12;
    /** 调整金额 */
    sint32 adjust_amount = 13;
    /** 抵扣金额  */
    sint32 deduct_amount = 14;
    /** 共计金额 */
    sint32 total_amount = 15;
    /** 手续费 */
    sint32 procedure_fee = 16;
    /** 实付金额 */
    sint32 paid_fee = 17;
    /** 最终应付金额 */
    sint32 final_fee = 18;
    /** 可⽤支付方式  */
    sint32 pay_flag = 19;
    /** 实际使用支付方式 */
    sint32 final_flag = 20;
    /** 其他支付信息 */
    string extra_data = 21;
    /** 订单状态 */
    sint32 state = 22;
    /** 提交时间 */
    sint64 submit_time = 23;
    /** 过期时间 */
    sint64 expires_time = 24;
    /** 支付时间 */
    sint64 paid_time = 25;
    /** 交易数据 */
    repeated STradeMethodData trade_data = 26;
    /** 编号 */
    sint32 id = 27;
}

/** 请求支付数据 */
message SRequestPayData {
    /** 支付方式 */
    sint32 method = 1;
    /** 支付方式代码 */
    string code = 2;
    /** 支付金额 */
    sint32 amount = 3;
}

/** 交易方式数据 */
message STradeMethodData {
    /** 支付途径 */
    sint32 method = 1;
    /** 交易代码 */
    string code = 2;
    /** 支付金额 */
    sint32 amount = 3;
    /** 是否为内置支付途径 */
    sint32 internal = 4;
    /** 外部交易单号 */
    string out_trade_no = 5;
    /** 支付时间 */
    sint64 pay_time = 6;
}

/** 支付单预交易数据 */
message SPrepareTradeData {
    /** 错误码 */
    sint32 err_code = 1;
    /** 错误消息 */
    string err_msg = 2;
    /** 交易号 */
    string trade_no = 3;
    /** 支付标志 */
    sint32 pay_flag = 4;
    /** 交易状态 */
    sint32 trade_state = 5;
    /** 交易订单 */
    repeated SPaymentOrderData trade_orders = 6;
    /** 累计金额 */
    sint32 total_amount = 7;
    /** 手续费 */
    sint32 procedure_fee = 8;
    /** 最终支付金额 */
    sint32 final_fee = 9;
}

/** 支付单数据 */
message SPaymentOrderData {
    /** 交易订单号 */
    string order_no =  1;
    /** 标题 */
    string subject = 2;
    /** 交易类型 */
    string trade_type= 3;
    /** 状态 */
    sint32 state = 4;
    /** 手续费 */
    sint32 procedure_fee = 5;
    /** 最终支付金额 */
    sint32 final_fee = 6;
}
