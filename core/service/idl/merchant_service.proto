syntax = "proto3";
option go_package = ".;proto";

import "global.proto";

// 商家
message SMerchant {
    /** 编号 */
    sint32 Id = 1;
    /** 会员编号 */
    sint64 MemberId = 2;
    /** 登录用户 */
    string LoginUser = 3;
    /** 登录密码 */
    string LoginPwd = 4;
    /** 名称 */
    string Name = 5;
    /** 公司名称 */
    string CompanyName = 6;
    /** 是否字营 */
    sint32 SelfSales = 7;
    /** 商户等级 */
    sint32 Level = 8;
    /** 标志 */
    string Logo = 9;
    /** 省 */
    sint32 Province = 10;
    /** 市 */
    sint32 City = 11;
    /** 区 */
    sint32 District = 12;
    /** 标志 */
    sint32 Flag = 13;
    /** 是否启用 */
    sint32 Enabled = 14;
    /** 最后登录时间 */
    sint32 LastLoginTime = 15;
}

// 商家
message SMerchantPack {
    /** 登录用户 */
    string LoginUser = 1;
    /** 登录密码 */
    string LoginPwd = 2;
    /** 名称 */
    string Name = 3;
    /** 是否字营 */
    sint32 SelfSales = 4;
    /** 店铺名称 */
    string ShopName = 5;
    /** 标志 */
    string ShopLogo = 6;
    /** 电话 */
    string Tel = 7;
    /** 地址 */
    string Addr = 8;
}

message MerchantCreateRequest {
    SMerchantPack mch = 1;
    sint64 relMemberId = 2;
}

message MchUserPwd {
    string user = 1;
    string pwd = 2;
}

message SyncWSItemsResponse {
    map<string, sint32> Value = 1;
}

message STradeConfListResponse {
    repeated STradeConf Value = 1;
}

message TradeConfRequest {
    sint32 mchId = 1;
    sint32 tradeType = 2;
}
message TradeConfSaveRequest {
    sint32 mchId = 1;
    repeated STradeConf arr = 2;
}

//商家服务
service MerchantService {
    // 获取商家的信息,mchId
    rpc GetMerchant (Int64) returns (SMerchant) {
    }
    // 注册商户并开店
    rpc CreateMerchant (MerchantCreateRequest) returns (Result) {
    }

    // 验证用户密码,并返回编号。可传入商户或会员的账号密码
    rpc CheckLogin (MchUserPwd) returns (Result) {
    }
    // 验证商户状态,mchId
    rpc Stat (Int64) returns (Result) {
    }
    // 同步批发商品,mchId
    rpc SyncWholesaleItem (Int64) returns (SyncWSItemsResponse) {
    }
    // 获取所有的交易设置,mchId
    rpc GetAllTradeConf (Int64) returns (STradeConfListResponse) {
    }
    // 根据交易类型获取交易设置
    rpc GetTradeConf (TradeConfRequest) returns (STradeConf) {
    }
    // 保存交易设置
    rpc SaveTradeConf (TradeConfSaveRequest) returns (Result) {
    }
    // 创建会员申请商户密钥
    rpc CreateSignUpToken(memberId int64) string
    // 根据商户申请密钥获取会员编号
    rpc GetMemberFromSignUpToken(token string) int64
    // 获取会员商户申请信息
    rpc GetMchSignUpInfoByMemberId(memberId int64) *merchant.MchSignUp
    // 获取商户申请信息
    rpc GetSignUp(id int32) *merchant.MchSignUp
    // 审核商户申请信息
    rpc ReviewSignUp(id int32, pass bool, remark string) error
    // 提交注册信息
    rpc SignUpPost(e *merchant.MchSignUp) (int32, error)
    rpc GetMerchantByMemberId(memberId int64) *merchant.Merchant
    // 删除会员的商户申请资料
    rpc RemoveMerchantSignUp(memberId int64) error
    // 获取企业信息,并返回是否为提交的信息
    rpc GetEnterpriseInfo(mchId int64)
    // 保存企业信息
    rpc SaveEnterpriseInfo(mchId int64,
    e *merchant.EnterpriseInfo) (int32, error)
    // 审核企业信息
    rpc ReviewEnterpriseInfo(mchId int64, pass bool,
    remark string) error

    rpc GetAccount(mchId int) *merchant.Account

    rpc SaveMerchant(mchId int64, v *merchant.Merchant) (int64, error)
    // 设置商户启用或停用
    rpc SetEnabled(mchId int64, enabled bool) error
    // 根据主机查询商户编号
    rpc GetMerchantIdByHost(host string) int64
    // 获取商户的域名
    rpc GetMerchantMajorHost(mchId int) string
    rpc SaveSaleConf(mchId int64, v *merchant.SaleConf) error

    rpc GetSaleConf(mchId int64) *merchant.SaleConf
    rpc GetShopsOfMerchant(mchId int64) []*shop.Shop
    // 修改密码
    rpc ModifyPassword(mchId int64, oldPwd, newPwd string) error

    // 保存API信息
    rpc SaveApiInfo(mchId int64, d *merchant.ApiInfo) error
    // 获取API接口
    rpc GetApiInfo(mchId int) *merchant.ApiInfo
    // 启用/停用接口权限
    rpc ApiPerm(mchId int64, enabled bool) error
    // 根据API ID获取MerchantId
    rpc GetMerchantIdByApiId(apiId string) int64
    // 查询分页订单
    rpc PagedNormalOrderOfVendor(vendorId int64, begin, size int, pagination bool,
    where, orderBy string) (int, []*dto.PagedVendorOrder)
    // 查询分页订单
    rpc PagedWholesaleOrderOfVendor(vendorId int64, begin, size int, pagination bool,
    where, orderBy string) (int, []*dto.PagedVendorOrder)
    // 查询分页订单
    rpc PagedTradeOrderOfVendor(vendorId int64, begin, size int, pagination bool,
    where, orderBy string) (int32, []*proto.SComplexOrder)
    // 提到会员账户
    rpc TakeToMemberAccount(mchId int64, amount float32) error
    // 账户充值
    rpc ChargeAccount(mchId int64, kind int32, title,
    outerNo string, amount float64, relateUser int64) error

    rpc GetMchBuyerGroup_(mchId, id int64) *merchant.MchBuyerGroup
    // 保存
    rpc SaveMchBuyerGroup_(mchId int64, v *merchant.MchBuyerGroup) (r *proto.Result, err error)
    // 获取买家分组
    rpc GetBuyerGroups(mchId int64) []*merchant.BuyerGroup
    // 获取批发返点率
    rpc GetRebateRate(mchId, groupId int64) []*wholesaler.WsRebateRate

    // 保存分组返点率
    rpc SaveGroupRebateRate(mchId, groupId int64,
    arr []*wholesaler.WsRebateRate) error
}

// 商户交易设置
message STradeConf {
    // 商户编号  sint64 MchId = 1;
    // 交易类型  sint32 TradeType = 2;
    // 交易方案，根据方案来自动调整比例  sint64 PlanId = 3;
    // 交易标志  sint32 Flag = 4;
    // 交易手续费依据,1:按金额 2:按比例  sint32 AmountBasis = 5;
    // 交易费，按单笔收取  sint32 TradeFee = 6;
    // 交易手续费比例  sint32 TradeRate = 7;
}