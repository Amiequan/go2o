syntax = "proto3";

import "global.proto";
import "message/cart_dto.proto";

option go_package = "./;proto";
option java_package = "com.github.go2o.rpc";

// 购物车服务
service CartService {
    // 批发购物车接口
    rpc WholesaleCartV1 (WsCartRequest) returns (Result) {
    }
    // 获取购物车,当购物车编号不存在时,将返回一个新的购物车
    rpc GetShoppingCart (ShoppingCartId) returns (SShoppingCart) {
    }
    // 放入购物车
    rpc PutInCart(CartItemRequest) returns (CartItemResponse) {
    }
    // 从购物车里删除指定数量商品
    rpc ReduceCartItem(CartItemRequest) returns (CartItemResponse) {
    }
    // 获取购物车结算信息
    rpc GetCartSettle_ (ShoppingCartId) returns (SettleMeta_) {
    }
    // 勾选商品结算
    rpc CheckCart (CheckCartRequest) returns (Result) {
    }
    // 更新购物车结算
    rpc PrepareSettlePersist_ (SettlePersistRequest) returns (Result) {
    }
}


message SettlePersistRequest {
    // 买家编号
    int64 BuyerId = 1;
    // 店铺编号
    int64 ShopId = 2;
    int64 PaymentOpt = 3;
    int64 DeliverOpt = 4;
    int64 AddressId = 5;
}
message CartItemRequest {
    // 买家编号
    ShoppingCartId Id = 1;
    //商品编号
    sint64 ItemId = 2;
    //SKU编号
    sint64 SkuId = 3;
    // 数量
    int32 quantity = 4;
}

message CheckCartRequest {
    ShoppingCartId Id = 1;
    repeated SCheckCartItem Items = 2;
}

// 购物车编号
message ShoppingCartId{
    // 会员/用户编号
    sint64 UserId = 1;
    // 购物车标识,当未指定用户时候使用
    string CartCode = 2;
    // 是否为批发销售的购物车
    bool IsWholesale = 3;
}

message SettleMeta_ {
    int64 PaymentOpt = 1;
    int64 DeliverOpt = 2;
    SettleShopMeta_ Shop = 3;
    SettleDeliverMeta_ Deliver = 4;
}

message SettleShopMeta_ {
    int64 ShopId = 1;
    string ShopName = 2;
    string Telephone = 3;
}


message SettleDeliverMeta_ {
    int64 Id = 1;
    string ConsigneeName = 2;
    string ConsigneePhone = 3;
    string Address = 4;
}
