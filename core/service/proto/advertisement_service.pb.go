// Code generated by protoc-gen-go. DO NOT EDIT.
// source: advertisement_service.proto

package proto // import "./"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AdvertisementServiceClient is the client API for AdvertisementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AdvertisementServiceClient interface {
	GetGroups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdGroupResponse, error)
	GetPosition(ctx context.Context, in *AdPositionId, opts ...grpc.CallOption) (*SAdPosition, error)
	SaveAdPosition(ctx context.Context, in *SAdPosition, opts ...grpc.CallOption) (*Result, error)
	DeleteAdPosition(ctx context.Context, in *AdPositionId, opts ...grpc.CallOption) (*Result, error)
	// 设置广告位的默认广告
	SetDefaultAd(ctx context.Context, in *SetDefaultAdRequest, opts ...grpc.CallOption) (*Result, error)
	// 查询广告
	QueryAd(ctx context.Context, in *QueryAdRequest, opts ...grpc.CallOption) (*QueryAdResponse, error)
	// 用户投放广告
	SetUserAd(ctx context.Context, in *SetUserAdRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取广告,returnData=true返回数据传输对象
	GetAdvertisement(ctx context.Context, in *AdIdRequest, opts ...grpc.CallOption) (*SAdDto, error)
	// 保存广告,更新时不允许修改类型
	SaveAd(ctx context.Context, in *SaveAdRequest, opts ...grpc.CallOption) (*Result, error)
	// 删除广告
	DeleteAd(ctx context.Context, in *AdIdRequest, opts ...grpc.CallOption) (*Result, error)
	// 保存图片广告
	SaveSwiperAdImage(ctx context.Context, in *SaveSwiperImageRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取广告图片
	GetSwiperAdImage(ctx context.Context, in *ImageIdRequest, opts ...grpc.CallOption) (*SImageAdData, error)
	// 删除广告图片
	DeleteSwiperAdImage(ctx context.Context, in *ImageIdRequest, opts ...grpc.CallOption) (*Result, error)
}

type advertisementServiceClient struct {
	cc *grpc.ClientConn
}

func NewAdvertisementServiceClient(cc *grpc.ClientConn) AdvertisementServiceClient {
	return &advertisementServiceClient{cc}
}

func (c *advertisementServiceClient) GetGroups(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AdGroupResponse, error) {
	out := new(AdGroupResponse)
	err := c.cc.Invoke(ctx, "/AdvertisementService/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertisementServiceClient) GetPosition(ctx context.Context, in *AdPositionId, opts ...grpc.CallOption) (*SAdPosition, error) {
	out := new(SAdPosition)
	err := c.cc.Invoke(ctx, "/AdvertisementService/GetPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertisementServiceClient) SaveAdPosition(ctx context.Context, in *SAdPosition, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/AdvertisementService/SaveAdPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertisementServiceClient) DeleteAdPosition(ctx context.Context, in *AdPositionId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/AdvertisementService/DeleteAdPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertisementServiceClient) SetDefaultAd(ctx context.Context, in *SetDefaultAdRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/AdvertisementService/SetDefaultAd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertisementServiceClient) QueryAd(ctx context.Context, in *QueryAdRequest, opts ...grpc.CallOption) (*QueryAdResponse, error) {
	out := new(QueryAdResponse)
	err := c.cc.Invoke(ctx, "/AdvertisementService/QueryAd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertisementServiceClient) SetUserAd(ctx context.Context, in *SetUserAdRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/AdvertisementService/SetUserAd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertisementServiceClient) GetAdvertisement(ctx context.Context, in *AdIdRequest, opts ...grpc.CallOption) (*SAdDto, error) {
	out := new(SAdDto)
	err := c.cc.Invoke(ctx, "/AdvertisementService/GetAdvertisement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertisementServiceClient) SaveAd(ctx context.Context, in *SaveAdRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/AdvertisementService/SaveAd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertisementServiceClient) DeleteAd(ctx context.Context, in *AdIdRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/AdvertisementService/DeleteAd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertisementServiceClient) SaveSwiperAdImage(ctx context.Context, in *SaveSwiperImageRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/AdvertisementService/SaveSwiperAdImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertisementServiceClient) GetSwiperAdImage(ctx context.Context, in *ImageIdRequest, opts ...grpc.CallOption) (*SImageAdData, error) {
	out := new(SImageAdData)
	err := c.cc.Invoke(ctx, "/AdvertisementService/GetSwiperAdImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *advertisementServiceClient) DeleteSwiperAdImage(ctx context.Context, in *ImageIdRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/AdvertisementService/DeleteSwiperAdImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdvertisementServiceServer is the server API for AdvertisementService service.
type AdvertisementServiceServer interface {
	GetGroups(context.Context, *Empty) (*AdGroupResponse, error)
	GetPosition(context.Context, *AdPositionId) (*SAdPosition, error)
	SaveAdPosition(context.Context, *SAdPosition) (*Result, error)
	DeleteAdPosition(context.Context, *AdPositionId) (*Result, error)
	// 设置广告位的默认广告
	SetDefaultAd(context.Context, *SetDefaultAdRequest) (*Result, error)
	// 查询广告
	QueryAd(context.Context, *QueryAdRequest) (*QueryAdResponse, error)
	// 用户投放广告
	SetUserAd(context.Context, *SetUserAdRequest) (*Result, error)
	// 获取广告,returnData=true返回数据传输对象
	GetAdvertisement(context.Context, *AdIdRequest) (*SAdDto, error)
	// 保存广告,更新时不允许修改类型
	SaveAd(context.Context, *SaveAdRequest) (*Result, error)
	// 删除广告
	DeleteAd(context.Context, *AdIdRequest) (*Result, error)
	// 保存图片广告
	SaveSwiperAdImage(context.Context, *SaveSwiperImageRequest) (*Result, error)
	// 获取广告图片
	GetSwiperAdImage(context.Context, *ImageIdRequest) (*SImageAdData, error)
	// 删除广告图片
	DeleteSwiperAdImage(context.Context, *ImageIdRequest) (*Result, error)
}

func RegisterAdvertisementServiceServer(s *grpc.Server, srv AdvertisementServiceServer) {
	s.RegisterService(&_AdvertisementService_serviceDesc, srv)
}

func _AdvertisementService_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdvertisementService/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).GetGroups(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertisementService_GetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdPositionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).GetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdvertisementService/GetPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).GetPosition(ctx, req.(*AdPositionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertisementService_SaveAdPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SAdPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).SaveAdPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdvertisementService/SaveAdPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).SaveAdPosition(ctx, req.(*SAdPosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertisementService_DeleteAdPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdPositionId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).DeleteAdPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdvertisementService/DeleteAdPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).DeleteAdPosition(ctx, req.(*AdPositionId))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertisementService_SetDefaultAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDefaultAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).SetDefaultAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdvertisementService/SetDefaultAd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).SetDefaultAd(ctx, req.(*SetDefaultAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertisementService_QueryAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).QueryAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdvertisementService/QueryAd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).QueryAd(ctx, req.(*QueryAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertisementService_SetUserAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUserAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).SetUserAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdvertisementService/SetUserAd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).SetUserAd(ctx, req.(*SetUserAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertisementService_GetAdvertisement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).GetAdvertisement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdvertisementService/GetAdvertisement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).GetAdvertisement(ctx, req.(*AdIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertisementService_SaveAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).SaveAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdvertisementService/SaveAd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).SaveAd(ctx, req.(*SaveAdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertisementService_DeleteAd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).DeleteAd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdvertisementService/DeleteAd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).DeleteAd(ctx, req.(*AdIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertisementService_SaveSwiperAdImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSwiperImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).SaveSwiperAdImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdvertisementService/SaveSwiperAdImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).SaveSwiperAdImage(ctx, req.(*SaveSwiperImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertisementService_GetSwiperAdImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).GetSwiperAdImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdvertisementService/GetSwiperAdImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).GetSwiperAdImage(ctx, req.(*ImageIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdvertisementService_DeleteSwiperAdImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdvertisementServiceServer).DeleteSwiperAdImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AdvertisementService/DeleteSwiperAdImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdvertisementServiceServer).DeleteSwiperAdImage(ctx, req.(*ImageIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AdvertisementService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "AdvertisementService",
	HandlerType: (*AdvertisementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroups",
			Handler:    _AdvertisementService_GetGroups_Handler,
		},
		{
			MethodName: "GetPosition",
			Handler:    _AdvertisementService_GetPosition_Handler,
		},
		{
			MethodName: "SaveAdPosition",
			Handler:    _AdvertisementService_SaveAdPosition_Handler,
		},
		{
			MethodName: "DeleteAdPosition",
			Handler:    _AdvertisementService_DeleteAdPosition_Handler,
		},
		{
			MethodName: "SetDefaultAd",
			Handler:    _AdvertisementService_SetDefaultAd_Handler,
		},
		{
			MethodName: "QueryAd",
			Handler:    _AdvertisementService_QueryAd_Handler,
		},
		{
			MethodName: "SetUserAd",
			Handler:    _AdvertisementService_SetUserAd_Handler,
		},
		{
			MethodName: "GetAdvertisement",
			Handler:    _AdvertisementService_GetAdvertisement_Handler,
		},
		{
			MethodName: "SaveAd",
			Handler:    _AdvertisementService_SaveAd_Handler,
		},
		{
			MethodName: "DeleteAd",
			Handler:    _AdvertisementService_DeleteAd_Handler,
		},
		{
			MethodName: "SaveSwiperAdImage",
			Handler:    _AdvertisementService_SaveSwiperAdImage_Handler,
		},
		{
			MethodName: "GetSwiperAdImage",
			Handler:    _AdvertisementService_GetSwiperAdImage_Handler,
		},
		{
			MethodName: "DeleteSwiperAdImage",
			Handler:    _AdvertisementService_DeleteSwiperAdImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "advertisement_service.proto",
}

func init() {
	proto.RegisterFile("advertisement_service.proto", fileDescriptor_advertisement_service_25b966155b9e77ab)
}

var fileDescriptor_advertisement_service_25b966155b9e77ab = []byte{
	// 377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x41, 0xcb, 0xd3, 0x40,
	0x10, 0xcd, 0x41, 0xfa, 0x7d, 0xdf, 0x9a, 0xaf, 0x4d, 0xb7, 0x05, 0x21, 0x1e, 0x0a, 0xe9, 0x41,
	0x8a, 0x32, 0xc5, 0x2a, 0x78, 0xf0, 0xb4, 0x12, 0x09, 0xbd, 0x69, 0x17, 0x2f, 0x5e, 0x64, 0xdb,
	0x1d, 0x63, 0x20, 0xe9, 0xc6, 0xec, 0xa4, 0xd2, 0xdf, 0xec, 0x9f, 0x90, 0x6e, 0xda, 0x26, 0xd1,
	0x82, 0xa7, 0x99, 0xf7, 0xf2, 0xde, 0x9b, 0xc9, 0xb0, 0xec, 0xb9, 0xd2, 0x07, 0xac, 0x28, 0xb3,
	0x58, 0xe0, 0x9e, 0xbe, 0x59, 0xac, 0x0e, 0xd9, 0x0e, 0xa1, 0xac, 0x0c, 0x99, 0xd0, 0x4f, 0x73,
	0xb3, 0x55, 0xf9, 0x19, 0xcd, 0x0a, 0xb4, 0x56, 0xa5, 0xb8, 0xec, 0x5b, 0x34, 0x99, 0x46, 0xb0,
	0xfa, 0xfd, 0x84, 0x4d, 0x45, 0xf7, 0x9b, 0x6c, 0xd2, 0xf8, 0x0b, 0xf6, 0x90, 0x20, 0x25, 0x95,
	0xa9, 0x4b, 0xcb, 0x07, 0xf0, 0xb1, 0x28, 0xe9, 0x18, 0x06, 0x20, 0xb4, 0xa3, 0x36, 0x68, 0x4b,
	0xb3, 0xb7, 0x18, 0x79, 0xfc, 0x15, 0x7b, 0x9a, 0x20, 0x7d, 0x32, 0x36, 0xa3, 0xcc, 0xec, 0xf9,
	0x23, 0x08, 0x7d, 0x01, 0x6b, 0x1d, 0xfa, 0x20, 0x5b, 0x1c, 0x79, 0x7c, 0xc1, 0x86, 0x52, 0x1d,
	0xb0, 0xe5, 0x78, 0x4f, 0x11, 0xde, 0xc1, 0x06, 0x6d, 0x9d, 0x93, 0x0b, 0x0e, 0x62, 0xcc, 0x91,
	0xba, 0xe2, 0xbf, 0xd2, 0x3b, 0xea, 0x25, 0xf3, 0x25, 0x52, 0x8c, 0xdf, 0x55, 0x9d, 0x93, 0xd0,
	0x7c, 0x0a, 0x5d, 0xb8, 0xc1, 0x9f, 0x35, 0x5a, 0xea, 0x1a, 0x80, 0xdd, 0x7d, 0xae, 0xb1, 0x3a,
	0x0a, 0xcd, 0x47, 0x70, 0xee, 0x2e, 0xb2, 0xa0, 0x25, 0xae, 0xff, 0xb9, 0x60, 0x0f, 0x12, 0xe9,
	0x8b, 0xc5, 0x4a, 0x68, 0x3e, 0x86, 0x6b, 0x7f, 0x23, 0xfa, 0x25, 0x0b, 0x12, 0xa4, 0xde, 0x59,
	0xb9, 0x0f, 0x42, 0xaf, 0x3b, 0x62, 0x29, 0x74, 0x4c, 0x26, 0xf2, 0xf8, 0x9c, 0x0d, 0x9a, 0x8b,
	0xf0, 0x21, 0x34, 0xcd, 0x8d, 0xc4, 0x39, 0xbb, 0xbf, 0xdc, 0xe2, 0x9f, 0xa4, 0xab, 0xe8, 0x1d,
	0x1b, 0x9f, 0x02, 0xe4, 0xaf, 0xac, 0x3c, 0x2d, 0xb6, 0x2e, 0x54, 0x8a, 0xfc, 0x19, 0xb4, 0x9c,
	0x63, 0x6e, 0x18, 0xdf, 0xba, 0x7d, 0xfb, 0xbe, 0x11, 0xb8, 0xda, 0x0e, 0x7a, 0x04, 0xe9, 0x18,
	0xa1, 0x63, 0x45, 0x2a, 0xf2, 0xf8, 0x6b, 0x36, 0x69, 0x76, 0xfa, 0x8f, 0xb1, 0x1d, 0xf4, 0x61,
	0xc6, 0x26, 0x3b, 0x53, 0x40, 0x9a, 0xd1, 0x8f, 0x7a, 0x0b, 0xa9, 0x59, 0x19, 0xa8, 0xca, 0xdd,
	0xd7, 0x7b, 0x58, 0xbe, 0x77, 0xcf, 0x71, 0x3b, 0x70, 0xe5, 0xcd, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x75, 0xe2, 0xae, 0x43, 0xe3, 0x02, 0x00, 0x00,
}
