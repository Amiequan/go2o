// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: shipment_service.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_shipment_service_proto protoreflect.FileDescriptor

var file_shipment_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0x94, 0x02, 0x0a, 0x0f,
	0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x31, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x67,
	0x65, 0x41, 0x72, 0x65, 0x61, 0x5f, 0x12, 0x0f, 0x2e, 0x53, 0x43, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x3d, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x08, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x1a, 0x1a, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x46, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x46, 0x6c, 0x6f, 0x77, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x53, 0x53, 0x68, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x16, 0x53, 0x68, 0x69, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10,
	0x2e, 0x53, 0x53, 0x68, 0x69, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x22, 0x00, 0x42, 0x1e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x67, 0x6f, 0x32, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_shipment_service_proto_goTypes = []interface{}{
	(*SCoverageValue)(nil),            // 0: SCoverageValue
	(*OrderId)(nil),                   // 1: OrderId
	(*LogisticFlowTrackRequest)(nil),  // 2: LogisticFlowTrackRequest
	(*OrderLogisticTrackRequest)(nil), // 3: OrderLogisticTrackRequest
	(*Result)(nil),                    // 4: Result
	(*ShipmentOrderListResponse)(nil), // 5: ShipmentOrderListResponse
	(*SShipOrderTrack)(nil),           // 6: SShipOrderTrack
}
var file_shipment_service_proto_depIdxs = []int32{
	0, // 0: ShipmentService.CreateCoverageArea_:input_type -> SCoverageValue
	1, // 1: ShipmentService.GetShipOrderOfOrder:input_type -> OrderId
	2, // 2: ShipmentService.GetLogisticFlowTrack:input_type -> LogisticFlowTrackRequest
	3, // 3: ShipmentService.ShipOrderLogisticTrack:input_type -> OrderLogisticTrackRequest
	4, // 4: ShipmentService.CreateCoverageArea_:output_type -> Result
	5, // 5: ShipmentService.GetShipOrderOfOrder:output_type -> ShipmentOrderListResponse
	6, // 6: ShipmentService.GetLogisticFlowTrack:output_type -> SShipOrderTrack
	6, // 7: ShipmentService.ShipOrderLogisticTrack:output_type -> SShipOrderTrack
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_shipment_service_proto_init() }
func file_shipment_service_proto_init() {
	if File_shipment_service_proto != nil {
		return
	}
	file_global_proto_init()
	file_message_shipment_dto_proto_init()
	file_message_order_dto_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shipment_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_shipment_service_proto_goTypes,
		DependencyIndexes: file_shipment_service_proto_depIdxs,
	}.Build()
	File_shipment_service_proto = out.File
	file_shipment_service_proto_rawDesc = nil
	file_shipment_service_proto_goTypes = nil
	file_shipment_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ShipmentServiceClient is the client API for ShipmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShipmentServiceClient interface {
	// 创建一个配送覆盖的区域
	CreateCoverageArea_(ctx context.Context, in *SCoverageValue, opts ...grpc.CallOption) (*Result, error)
	// 获取订单的发货单信息
	GetShipOrderOfOrder(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*ShipmentOrderListResponse, error)
	//* 物流追踪
	GetLogisticFlowTrack(ctx context.Context, in *LogisticFlowTrackRequest, opts ...grpc.CallOption) (*SShipOrderTrack, error)
	//* 获取发货单的物流追踪信息,$shipOrderId:发货单编号 $invert:是否倒序排列
	ShipOrderLogisticTrack(ctx context.Context, in *OrderLogisticTrackRequest, opts ...grpc.CallOption) (*SShipOrderTrack, error)
}

type shipmentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShipmentServiceClient(cc grpc.ClientConnInterface) ShipmentServiceClient {
	return &shipmentServiceClient{cc}
}

func (c *shipmentServiceClient) CreateCoverageArea_(ctx context.Context, in *SCoverageValue, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ShipmentService/CreateCoverageArea_", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentServiceClient) GetShipOrderOfOrder(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*ShipmentOrderListResponse, error) {
	out := new(ShipmentOrderListResponse)
	err := c.cc.Invoke(ctx, "/ShipmentService/GetShipOrderOfOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentServiceClient) GetLogisticFlowTrack(ctx context.Context, in *LogisticFlowTrackRequest, opts ...grpc.CallOption) (*SShipOrderTrack, error) {
	out := new(SShipOrderTrack)
	err := c.cc.Invoke(ctx, "/ShipmentService/GetLogisticFlowTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentServiceClient) ShipOrderLogisticTrack(ctx context.Context, in *OrderLogisticTrackRequest, opts ...grpc.CallOption) (*SShipOrderTrack, error) {
	out := new(SShipOrderTrack)
	err := c.cc.Invoke(ctx, "/ShipmentService/ShipOrderLogisticTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShipmentServiceServer is the server API for ShipmentService service.
type ShipmentServiceServer interface {
	// 创建一个配送覆盖的区域
	CreateCoverageArea_(context.Context, *SCoverageValue) (*Result, error)
	// 获取订单的发货单信息
	GetShipOrderOfOrder(context.Context, *OrderId) (*ShipmentOrderListResponse, error)
	//* 物流追踪
	GetLogisticFlowTrack(context.Context, *LogisticFlowTrackRequest) (*SShipOrderTrack, error)
	//* 获取发货单的物流追踪信息,$shipOrderId:发货单编号 $invert:是否倒序排列
	ShipOrderLogisticTrack(context.Context, *OrderLogisticTrackRequest) (*SShipOrderTrack, error)
}

// UnimplementedShipmentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedShipmentServiceServer struct {
}

func (*UnimplementedShipmentServiceServer) CreateCoverageArea_(context.Context, *SCoverageValue) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCoverageArea_ not implemented")
}
func (*UnimplementedShipmentServiceServer) GetShipOrderOfOrder(context.Context, *OrderId) (*ShipmentOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipOrderOfOrder not implemented")
}
func (*UnimplementedShipmentServiceServer) GetLogisticFlowTrack(context.Context, *LogisticFlowTrackRequest) (*SShipOrderTrack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogisticFlowTrack not implemented")
}
func (*UnimplementedShipmentServiceServer) ShipOrderLogisticTrack(context.Context, *OrderLogisticTrackRequest) (*SShipOrderTrack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShipOrderLogisticTrack not implemented")
}

func RegisterShipmentServiceServer(s *grpc.Server, srv ShipmentServiceServer) {
	s.RegisterService(&_ShipmentService_serviceDesc, srv)
}

func _ShipmentService_CreateCoverageArea__Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SCoverageValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).CreateCoverageArea_(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShipmentService/CreateCoverageArea_",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).CreateCoverageArea_(ctx, req.(*SCoverageValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipmentService_GetShipOrderOfOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).GetShipOrderOfOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShipmentService/GetShipOrderOfOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).GetShipOrderOfOrder(ctx, req.(*OrderId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipmentService_GetLogisticFlowTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogisticFlowTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).GetLogisticFlowTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShipmentService/GetLogisticFlowTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).GetLogisticFlowTrack(ctx, req.(*LogisticFlowTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipmentService_ShipOrderLogisticTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderLogisticTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).ShipOrderLogisticTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShipmentService/ShipOrderLogisticTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).ShipOrderLogisticTrack(ctx, req.(*OrderLogisticTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShipmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ShipmentService",
	HandlerType: (*ShipmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCoverageArea_",
			Handler:    _ShipmentService_CreateCoverageArea__Handler,
		},
		{
			MethodName: "GetShipOrderOfOrder",
			Handler:    _ShipmentService_GetShipOrderOfOrder_Handler,
		},
		{
			MethodName: "GetLogisticFlowTrack",
			Handler:    _ShipmentService_GetLogisticFlowTrack_Handler,
		},
		{
			MethodName: "ShipOrderLogisticTrack",
			Handler:    _ShipmentService_ShipOrderLogisticTrack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shipment_service.proto",
}
