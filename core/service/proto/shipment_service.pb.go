// Code generated by protoc-gen-go. DO NOT EDIT.
// source: shipment_service.proto

package proto // import "."

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ShipmentServiceClient is the client API for ShipmentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShipmentServiceClient interface {
	// 创建一个配送覆盖的区域
	CreateCoverageArea_(ctx context.Context, in *SCoverageValue, opts ...grpc.CallOption) (*Result, error)
	// 获取订单的发货单信息
	GetShipOrderOfOrder(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*ShipmentOrderListResponse, error)
	// * 物流追踪
	GetLogisticFlowTrack(ctx context.Context, in *LogisticFlowTrackRequest, opts ...grpc.CallOption) (*SShipOrderTrack, error)
	// * 获取发货单的物流追踪信息,$shipOrderId:发货单编号 $invert:是否倒序排列
	ShipOrderLogisticTrack(ctx context.Context, in *OrderLogisticTrackRequest, opts ...grpc.CallOption) (*SShipOrderTrack, error)
}

type shipmentServiceClient struct {
	cc *grpc.ClientConn
}

func NewShipmentServiceClient(cc *grpc.ClientConn) ShipmentServiceClient {
	return &shipmentServiceClient{cc}
}

func (c *shipmentServiceClient) CreateCoverageArea_(ctx context.Context, in *SCoverageValue, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ShipmentService/CreateCoverageArea_", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentServiceClient) GetShipOrderOfOrder(ctx context.Context, in *OrderId, opts ...grpc.CallOption) (*ShipmentOrderListResponse, error) {
	out := new(ShipmentOrderListResponse)
	err := c.cc.Invoke(ctx, "/ShipmentService/GetShipOrderOfOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentServiceClient) GetLogisticFlowTrack(ctx context.Context, in *LogisticFlowTrackRequest, opts ...grpc.CallOption) (*SShipOrderTrack, error) {
	out := new(SShipOrderTrack)
	err := c.cc.Invoke(ctx, "/ShipmentService/GetLogisticFlowTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentServiceClient) ShipOrderLogisticTrack(ctx context.Context, in *OrderLogisticTrackRequest, opts ...grpc.CallOption) (*SShipOrderTrack, error) {
	out := new(SShipOrderTrack)
	err := c.cc.Invoke(ctx, "/ShipmentService/ShipOrderLogisticTrack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShipmentServiceServer is the server API for ShipmentService service.
type ShipmentServiceServer interface {
	// 创建一个配送覆盖的区域
	CreateCoverageArea_(context.Context, *SCoverageValue) (*Result, error)
	// 获取订单的发货单信息
	GetShipOrderOfOrder(context.Context, *OrderId) (*ShipmentOrderListResponse, error)
	// * 物流追踪
	GetLogisticFlowTrack(context.Context, *LogisticFlowTrackRequest) (*SShipOrderTrack, error)
	// * 获取发货单的物流追踪信息,$shipOrderId:发货单编号 $invert:是否倒序排列
	ShipOrderLogisticTrack(context.Context, *OrderLogisticTrackRequest) (*SShipOrderTrack, error)
}

func RegisterShipmentServiceServer(s *grpc.Server, srv ShipmentServiceServer) {
	s.RegisterService(&_ShipmentService_serviceDesc, srv)
}

func _ShipmentService_CreateCoverageArea__Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SCoverageValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).CreateCoverageArea_(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShipmentService/CreateCoverageArea_",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).CreateCoverageArea_(ctx, req.(*SCoverageValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipmentService_GetShipOrderOfOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).GetShipOrderOfOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShipmentService/GetShipOrderOfOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).GetShipOrderOfOrder(ctx, req.(*OrderId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipmentService_GetLogisticFlowTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogisticFlowTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).GetLogisticFlowTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShipmentService/GetLogisticFlowTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).GetLogisticFlowTrack(ctx, req.(*LogisticFlowTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipmentService_ShipOrderLogisticTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderLogisticTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentServiceServer).ShipOrderLogisticTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShipmentService/ShipOrderLogisticTrack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentServiceServer).ShipOrderLogisticTrack(ctx, req.(*OrderLogisticTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShipmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ShipmentService",
	HandlerType: (*ShipmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCoverageArea_",
			Handler:    _ShipmentService_CreateCoverageArea__Handler,
		},
		{
			MethodName: "GetShipOrderOfOrder",
			Handler:    _ShipmentService_GetShipOrderOfOrder_Handler,
		},
		{
			MethodName: "GetLogisticFlowTrack",
			Handler:    _ShipmentService_GetLogisticFlowTrack_Handler,
		},
		{
			MethodName: "ShipOrderLogisticTrack",
			Handler:    _ShipmentService_ShipOrderLogisticTrack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shipment_service.proto",
}

func init() {
	proto.RegisterFile("shipment_service.proto", fileDescriptor_shipment_service_7f2d08a4b6834d3e)
}

var fileDescriptor_shipment_service_7f2d08a4b6834d3e = []byte{
	// 246 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x41, 0x4b, 0xc3, 0x30,
	0x1c, 0xc5, 0x8b, 0x07, 0xa7, 0x41, 0x98, 0xa4, 0x52, 0x30, 0xc7, 0x7e, 0x80, 0x88, 0x7a, 0x14,
	0x0f, 0x3a, 0x74, 0x0a, 0x83, 0x41, 0x2b, 0x1e, 0xbc, 0x8c, 0xac, 0x7b, 0xd6, 0x60, 0xb6, 0xd4,
	0xfc, 0xd3, 0xf9, 0x45, 0xfc, 0xc0, 0xb2, 0xb4, 0xd9, 0xa5, 0xb0, 0xd3, 0x23, 0xbf, 0xbc, 0xfc,
	0x1e, 0x84, 0x65, 0xf4, 0xa5, 0x9b, 0x35, 0x36, 0x7e, 0x41, 0x70, 0x5b, 0x5d, 0x41, 0x36, 0xce,
	0x7a, 0x2b, 0xce, 0x6a, 0x63, 0x97, 0xca, 0xf4, 0xa7, 0x6c, 0x0d, 0x22, 0x55, 0xe3, 0x2a, 0xb6,
	0x7b, 0x9e, 0x46, 0x6e, 0xdd, 0x0a, 0xae, 0x83, 0x37, 0x7f, 0x47, 0x6c, 0x5c, 0xf6, 0xbd, 0xb2,
	0x93, 0xf2, 0x6b, 0x96, 0x4e, 0x1c, 0x94, 0xc7, 0xc4, 0x6e, 0xe1, 0x54, 0x8d, 0x07, 0x07, 0xb5,
	0xe0, 0x63, 0x59, 0x46, 0xf0, 0xae, 0x4c, 0x0b, 0x31, 0x92, 0x05, 0xa8, 0x35, 0x3e, 0x4f, 0xf8,
	0x3d, 0x4b, 0xa7, 0xf0, 0x3b, 0xd1, 0x7c, 0x27, 0x9f, 0x7f, 0x86, 0xe0, 0x27, 0x32, 0xe4, 0xeb,
	0x4a, 0x08, 0x19, 0x57, 0x02, 0x99, 0x69, 0xf2, 0x05, 0xa8, 0xb1, 0x1b, 0x42, 0x9e, 0xf0, 0x27,
	0x76, 0x31, 0x85, 0x9f, 0xd9, 0x5a, 0x93, 0xd7, 0xd5, 0xb3, 0xb1, 0xbf, 0x6f, 0x4e, 0x55, 0xdf,
	0xfc, 0x52, 0x0e, 0x58, 0x81, 0x9f, 0x16, 0xe4, 0xc5, 0xb9, 0x2c, 0xf7, 0x73, 0xe1, 0x22, 0x4f,
	0xf8, 0x0b, 0xcb, 0xf6, 0x2c, 0x3e, 0xec, 0x44, 0x42, 0x0e, 0xe1, 0x01, 0xd3, 0xe3, 0xe9, 0xc7,
	0x48, 0xde, 0x85, 0x1f, 0x5a, 0x1e, 0x87, 0xb8, 0xfd, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x77, 0x52,
	0x9b, 0x9a, 0x7d, 0x01, 0x00, 0x00,
}
