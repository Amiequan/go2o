// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: content_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PagingArticleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CategoryName string `protobuf:"bytes,1,opt,name=CategoryName,proto3" json:"CategoryName"`
	Begin        int32  `protobuf:"zigzag32,2,opt,name=Begin,proto3" json:"Begin"`
	Size         int32  `protobuf:"zigzag32,3,opt,name=Size,proto3" json:"Size"`
}

func (x *PagingArticleRequest) Reset() {
	*x = PagingArticleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagingArticleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagingArticleRequest) ProtoMessage() {}

func (x *PagingArticleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_content_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagingArticleRequest.ProtoReflect.Descriptor instead.
func (*PagingArticleRequest) Descriptor() ([]byte, []int) {
	return file_content_service_proto_rawDescGZIP(), []int{0}
}

func (x *PagingArticleRequest) GetCategoryName() string {
	if x != nil {
		return x.CategoryName
	}
	return ""
}

func (x *PagingArticleRequest) GetBegin() int32 {
	if x != nil {
		return x.Begin
	}
	return 0
}

func (x *PagingArticleRequest) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ArticleListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64       `protobuf:"varint,1,opt,name=Total,proto3" json:"Total"`
	Data  []*SArticle `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data"`
}

func (x *ArticleListResponse) Reset() {
	*x = ArticleListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleListResponse) ProtoMessage() {}

func (x *ArticleListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleListResponse.ProtoReflect.Descriptor instead.
func (*ArticleListResponse) Descriptor() ([]byte, []int) {
	return file_content_service_proto_rawDescGZIP(), []int{1}
}

func (x *ArticleListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ArticleListResponse) GetData() []*SArticle {
	if x != nil {
		return x.Data
	}
	return nil
}

//栏目
type SArticleCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//编号
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id"`
	//父类编号,如为一级栏目则为0
	ParentId int64 `protobuf:"varint,2,opt,name=ParentId,proto3" json:"ParentId"`
	// 浏览权限
	PermFlag int32 `protobuf:"varint,3,opt,name=PermFlag,proto3" json:"PermFlag"`
	// 名称(唯一)
	Name string `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name"`
	// 别名
	Alias string `protobuf:"bytes,5,opt,name=Alias,proto3" json:"Alias"`
	// 排序编号
	SortNum int32 `protobuf:"varint,6,opt,name=SortNum,proto3" json:"SortNum"`
	// 定位路径（打开栏目页定位到的路径）
	Location string `protobuf:"bytes,7,opt,name=Location,proto3" json:"Location"`
	// 页面标题
	Title string `protobuf:"bytes,8,opt,name=Title,proto3" json:"Title"`
	// 关键字
	Keywords string `protobuf:"bytes,9,opt,name=Keywords,proto3" json:"Keywords"`
	// 描述
	Description string `protobuf:"bytes,10,opt,name=Description,proto3" json:"Description"`
}

func (x *SArticleCategory) Reset() {
	*x = SArticleCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SArticleCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SArticleCategory) ProtoMessage() {}

func (x *SArticleCategory) ProtoReflect() protoreflect.Message {
	mi := &file_content_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SArticleCategory.ProtoReflect.Descriptor instead.
func (*SArticleCategory) Descriptor() ([]byte, []int) {
	return file_content_service_proto_rawDescGZIP(), []int{2}
}

func (x *SArticleCategory) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SArticleCategory) GetParentId() int64 {
	if x != nil {
		return x.ParentId
	}
	return 0
}

func (x *SArticleCategory) GetPermFlag() int32 {
	if x != nil {
		return x.PermFlag
	}
	return 0
}

func (x *SArticleCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SArticleCategory) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *SArticleCategory) GetSortNum() int32 {
	if x != nil {
		return x.SortNum
	}
	return 0
}

func (x *SArticleCategory) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *SArticleCategory) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SArticleCategory) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *SArticleCategory) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

//* 文章
type SArticle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* 编号
	Id int64 `protobuf:"zigzag64,1,opt,name=Id,proto3" json:"Id"`
	//* 栏目编号
	CategoryId int64 `protobuf:"zigzag64,2,opt,name=CategoryId,proto3" json:"CategoryId"`
	//* 标题
	Title string `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title"`
	//* 小标题
	SmallTitle string `protobuf:"bytes,4,opt,name=SmallTitle,proto3" json:"SmallTitle"`
	//* 文章附图
	Thumbnail string `protobuf:"bytes,5,opt,name=Thumbnail,proto3" json:"Thumbnail"`
	//* 重定向URL
	PublisherId int64 `protobuf:"zigzag64,6,opt,name=PublisherId,proto3" json:"PublisherId"`
	//* 重定向URL
	Location string `protobuf:"bytes,7,opt,name=Location,proto3" json:"Location"`
	//* 优先级,优先级越高，则置顶
	Priority int32 `protobuf:"zigzag32,8,opt,name=Priority,proto3" json:"Priority"`
	//* 浏览钥匙
	AccessKey string `protobuf:"bytes,9,opt,name=AccessKey,proto3" json:"AccessKey"`
	//* 文档内容
	Content string `protobuf:"bytes,10,opt,name=Content,proto3" json:"Content"`
	//* 标签（关键词）
	Tags string `protobuf:"bytes,11,opt,name=Tags,proto3" json:"Tags"`
	//* 显示次数
	ViewCount int32 `protobuf:"zigzag32,12,opt,name=ViewCount,proto3" json:"ViewCount"`
	//* 排序序号
	SortNum int32 `protobuf:"zigzag32,13,opt,name=SortNum,proto3" json:"SortNum"`
	//* 创建时间
	CreateTime int64 `protobuf:"zigzag64,14,opt,name=CreateTime,proto3" json:"CreateTime"`
	//* 最后修改时间
	UpdateTime int64 `protobuf:"zigzag64,15,opt,name=UpdateTime,proto3" json:"UpdateTime"`
}

func (x *SArticle) Reset() {
	*x = SArticle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SArticle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SArticle) ProtoMessage() {}

func (x *SArticle) ProtoReflect() protoreflect.Message {
	mi := &file_content_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SArticle.ProtoReflect.Descriptor instead.
func (*SArticle) Descriptor() ([]byte, []int) {
	return file_content_service_proto_rawDescGZIP(), []int{3}
}

func (x *SArticle) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SArticle) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *SArticle) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SArticle) GetSmallTitle() string {
	if x != nil {
		return x.SmallTitle
	}
	return ""
}

func (x *SArticle) GetThumbnail() string {
	if x != nil {
		return x.Thumbnail
	}
	return ""
}

func (x *SArticle) GetPublisherId() int64 {
	if x != nil {
		return x.PublisherId
	}
	return 0
}

func (x *SArticle) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *SArticle) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *SArticle) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *SArticle) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *SArticle) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *SArticle) GetViewCount() int32 {
	if x != nil {
		return x.ViewCount
	}
	return 0
}

func (x *SArticle) GetSortNum() int32 {
	if x != nil {
		return x.SortNum
	}
	return 0
}

func (x *SArticle) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SArticle) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

type SPage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 编号
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id"`
	// 商户编号
	UserId int64 `protobuf:"varint,2,opt,name=UserId,proto3" json:"UserId"`
	// 标题
	Title string `protobuf:"bytes,3,opt,name=Title,proto3" json:"Title"`
	// 字符标识
	StrIndent string `protobuf:"bytes,4,opt,name=StrIndent,proto3" json:"StrIndent"`
	// 浏览权限
	PermFlag int32 `protobuf:"varint,5,opt,name=PermFlag,proto3" json:"PermFlag"`
	// 浏览钥匙
	AccessKey string `protobuf:"bytes,6,opt,name=AccessKey,proto3" json:"AccessKey"`
	// 关键词
	KeyWord string `protobuf:"bytes,7,opt,name=KeyWord,proto3" json:"KeyWord"`
	// 描述
	Description string `protobuf:"bytes,8,opt,name=Description,proto3" json:"Description"`
	// 样式表地址
	CssPath string `protobuf:"bytes,9,opt,name=CssPath,proto3" json:"CssPath"`
	// 内容
	Body string `protobuf:"bytes,10,opt,name=Body,proto3" json:"Body"`
	// 修改时间
	UpdateTime int64 `protobuf:"varint,11,opt,name=UpdateTime,proto3" json:"UpdateTime"`
	// 是否启用
	Enabled bool `protobuf:"varint,12,opt,name=Enabled,proto3" json:"Enabled"`
}

func (x *SPage) Reset() {
	*x = SPage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPage) ProtoMessage() {}

func (x *SPage) ProtoReflect() protoreflect.Message {
	mi := &file_content_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPage.ProtoReflect.Descriptor instead.
func (*SPage) Descriptor() ([]byte, []int) {
	return file_content_service_proto_rawDescGZIP(), []int{4}
}

func (x *SPage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SPage) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SPage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SPage) GetStrIndent() string {
	if x != nil {
		return x.StrIndent
	}
	return ""
}

func (x *SPage) GetPermFlag() int32 {
	if x != nil {
		return x.PermFlag
	}
	return 0
}

func (x *SPage) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *SPage) GetKeyWord() string {
	if x != nil {
		return x.KeyWord
	}
	return ""
}

func (x *SPage) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SPage) GetCssPath() string {
	if x != nil {
		return x.CssPath
	}
	return ""
}

func (x *SPage) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *SPage) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *SPage) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type ArticleCategoriesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []*SArticleCategory `protobuf:"bytes,1,rep,name=Value,proto3" json:"Value"`
}

func (x *ArticleCategoriesResponse) Reset() {
	*x = ArticleCategoriesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_content_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArticleCategoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArticleCategoriesResponse) ProtoMessage() {}

func (x *ArticleCategoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_content_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArticleCategoriesResponse.ProtoReflect.Descriptor instead.
func (*ArticleCategoriesResponse) Descriptor() ([]byte, []int) {
	return file_content_service_proto_rawDescGZIP(), []int{5}
}

func (x *ArticleCategoriesResponse) GetValue() []*SArticleCategory {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_content_service_proto protoreflect.FileDescriptor

var file_content_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x64, 0x0a, 0x14, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x05, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4a, 0x0a, 0x13, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0x8e, 0x02, 0x0a, 0x10, 0x53, 0x41, 0x72, 0x74,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x65, 0x72, 0x6d,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x50, 0x65, 0x72, 0x6d,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x69, 0x61,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x53, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x53, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xac, 0x03, 0x0a, 0x08, 0x53, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x02, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53,
	0x6d, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x54,
	0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x54, 0x68, 0x75, 0x6d, 0x62, 0x6e, 0x61, 0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x61, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x56, 0x69, 0x65, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x53, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07,
	0x53, 0x6f, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc1, 0x02, 0x0a, 0x05, 0x53, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x65, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x50, 0x65, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x57, 0x6f,
	0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x57, 0x6f, 0x72,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x73, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x42, 0x6f, 0x64,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x44, 0x0a, 0x19, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x32, 0xb1, 0x04, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12,
	0x09, 0x2e, 0x49, 0x64, 0x4f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x06, 0x2e, 0x53, 0x50, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x12, 0x1d, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65, 0x50, 0x61, 0x67, 0x65,
	0x12, 0x06, 0x2e, 0x53, 0x50, 0x61, 0x67, 0x65, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x61, 0x67,
	0x65, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x06, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x34, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x09, 0x2e, 0x49, 0x64, 0x4f, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x1a, 0x11, 0x2e, 0x53, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x13, 0x53, 0x61, 0x76, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x11, 0x2e, 0x53, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x2a, 0x0a,
	0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x07,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x12, 0x09, 0x2e, 0x49, 0x64, 0x4f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x1a, 0x09, 0x2e, 0x53, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x22, 0x00, 0x12,
	0x22, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65,
	0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x41, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x12, 0x09, 0x2e, 0x53, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x1a, 0x07, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x6f, 0x70, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x09, 0x2e, 0x49,
	0x64, 0x4f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x14, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x44, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x72,
	0x74, 0x69, 0x63, 0x6c, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41,
	0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e,
	0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x1f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x67, 0x6f, 0x32, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x5a, 0x08, 0x2e, 0x2f,
	0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_content_service_proto_rawDescOnce sync.Once
	file_content_service_proto_rawDescData = file_content_service_proto_rawDesc
)

func file_content_service_proto_rawDescGZIP() []byte {
	file_content_service_proto_rawDescOnce.Do(func() {
		file_content_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_content_service_proto_rawDescData)
	})
	return file_content_service_proto_rawDescData
}

var file_content_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_content_service_proto_goTypes = []interface{}{
	(*PagingArticleRequest)(nil),      // 0: PagingArticleRequest
	(*ArticleListResponse)(nil),       // 1: ArticleListResponse
	(*SArticleCategory)(nil),          // 2: SArticleCategory
	(*SArticle)(nil),                  // 3: SArticle
	(*SPage)(nil),                     // 4: SPage
	(*ArticleCategoriesResponse)(nil), // 5: ArticleCategoriesResponse
	(*IdOrName)(nil),                  // 6: IdOrName
	(*Int64)(nil),                     // 7: Int64
	(*Empty)(nil),                     // 8: Empty
	(*Result)(nil),                    // 9: Result
}
var file_content_service_proto_depIdxs = []int32{
	3,  // 0: ArticleListResponse.Data:type_name -> SArticle
	2,  // 1: ArticleCategoriesResponse.Value:type_name -> SArticleCategory
	6,  // 2: ContentService.GetPage:input_type -> IdOrName
	4,  // 3: ContentService.SavePage:input_type -> SPage
	7,  // 4: ContentService.DeletePage:input_type -> Int64
	8,  // 5: ContentService.GetArticleCategories:input_type -> Empty
	6,  // 6: ContentService.GetArticleCategory:input_type -> IdOrName
	2,  // 7: ContentService.SaveArticleCategory:input_type -> SArticleCategory
	7,  // 8: ContentService.DeleteArticleCategory:input_type -> Int64
	6,  // 9: ContentService.GetArticle:input_type -> IdOrName
	7,  // 10: ContentService.DeleteArticle:input_type -> Int64
	3,  // 11: ContentService.SaveArticle:input_type -> SArticle
	6,  // 12: ContentService.QueryTopArticles:input_type -> IdOrName
	0,  // 13: ContentService.QueryPagingArticles:input_type -> PagingArticleRequest
	4,  // 14: ContentService.GetPage:output_type -> SPage
	9,  // 15: ContentService.SavePage:output_type -> Result
	9,  // 16: ContentService.DeletePage:output_type -> Result
	5,  // 17: ContentService.GetArticleCategories:output_type -> ArticleCategoriesResponse
	2,  // 18: ContentService.GetArticleCategory:output_type -> SArticleCategory
	9,  // 19: ContentService.SaveArticleCategory:output_type -> Result
	9,  // 20: ContentService.DeleteArticleCategory:output_type -> Result
	3,  // 21: ContentService.GetArticle:output_type -> SArticle
	9,  // 22: ContentService.DeleteArticle:output_type -> Result
	9,  // 23: ContentService.SaveArticle:output_type -> Result
	1,  // 24: ContentService.QueryTopArticles:output_type -> ArticleListResponse
	1,  // 25: ContentService.QueryPagingArticles:output_type -> ArticleListResponse
	14, // [14:26] is the sub-list for method output_type
	2,  // [2:14] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_content_service_proto_init() }
func file_content_service_proto_init() {
	if File_content_service_proto != nil {
		return
	}
	file_global_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_content_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagingArticleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SArticleCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SArticle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SPage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_content_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArticleCategoriesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_content_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_content_service_proto_goTypes,
		DependencyIndexes: file_content_service_proto_depIdxs,
		MessageInfos:      file_content_service_proto_msgTypes,
	}.Build()
	File_content_service_proto = out.File
	file_content_service_proto_rawDesc = nil
	file_content_service_proto_goTypes = nil
	file_content_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContentServiceClient interface {
	// 获取页面
	GetPage(ctx context.Context, in *IdOrName, opts ...grpc.CallOption) (*SPage, error)
	// 保存页面
	SavePage(ctx context.Context, in *SPage, opts ...grpc.CallOption) (*Result, error)
	// 删除页面
	DeletePage(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	// 获取所有栏目
	GetArticleCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArticleCategoriesResponse, error)
	// 获取文章栏目,可传入ID或者别名
	GetArticleCategory(ctx context.Context, in *IdOrName, opts ...grpc.CallOption) (*SArticleCategory, error)
	// 保存文章栏目
	SaveArticleCategory(ctx context.Context, in *SArticleCategory, opts ...grpc.CallOption) (*Result, error)
	// 删除文章分类
	DeleteArticleCategory(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	// 获取文章
	GetArticle(ctx context.Context, in *IdOrName, opts ...grpc.CallOption) (*SArticle, error)
	// 删除文章
	DeleteArticle(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	// 保存文章
	SaveArticle(ctx context.Context, in *SArticle, opts ...grpc.CallOption) (*Result, error)
	//* 获取置顶的文章,cat
	QueryTopArticles(ctx context.Context, in *IdOrName, opts ...grpc.CallOption) (*ArticleListResponse, error)
	//* 获取分页文章
	QueryPagingArticles(ctx context.Context, in *PagingArticleRequest, opts ...grpc.CallOption) (*ArticleListResponse, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) GetPage(ctx context.Context, in *IdOrName, opts ...grpc.CallOption) (*SPage, error) {
	out := new(SPage)
	err := c.cc.Invoke(ctx, "/ContentService/GetPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) SavePage(ctx context.Context, in *SPage, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ContentService/SavePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeletePage(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ContentService/DeletePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetArticleCategories(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ArticleCategoriesResponse, error) {
	out := new(ArticleCategoriesResponse)
	err := c.cc.Invoke(ctx, "/ContentService/GetArticleCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetArticleCategory(ctx context.Context, in *IdOrName, opts ...grpc.CallOption) (*SArticleCategory, error) {
	out := new(SArticleCategory)
	err := c.cc.Invoke(ctx, "/ContentService/GetArticleCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) SaveArticleCategory(ctx context.Context, in *SArticleCategory, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ContentService/SaveArticleCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteArticleCategory(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ContentService/DeleteArticleCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetArticle(ctx context.Context, in *IdOrName, opts ...grpc.CallOption) (*SArticle, error) {
	out := new(SArticle)
	err := c.cc.Invoke(ctx, "/ContentService/GetArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteArticle(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ContentService/DeleteArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) SaveArticle(ctx context.Context, in *SArticle, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ContentService/SaveArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) QueryTopArticles(ctx context.Context, in *IdOrName, opts ...grpc.CallOption) (*ArticleListResponse, error) {
	out := new(ArticleListResponse)
	err := c.cc.Invoke(ctx, "/ContentService/QueryTopArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) QueryPagingArticles(ctx context.Context, in *PagingArticleRequest, opts ...grpc.CallOption) (*ArticleListResponse, error) {
	out := new(ArticleListResponse)
	err := c.cc.Invoke(ctx, "/ContentService/QueryPagingArticles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
type ContentServiceServer interface {
	// 获取页面
	GetPage(context.Context, *IdOrName) (*SPage, error)
	// 保存页面
	SavePage(context.Context, *SPage) (*Result, error)
	// 删除页面
	DeletePage(context.Context, *Int64) (*Result, error)
	// 获取所有栏目
	GetArticleCategories(context.Context, *Empty) (*ArticleCategoriesResponse, error)
	// 获取文章栏目,可传入ID或者别名
	GetArticleCategory(context.Context, *IdOrName) (*SArticleCategory, error)
	// 保存文章栏目
	SaveArticleCategory(context.Context, *SArticleCategory) (*Result, error)
	// 删除文章分类
	DeleteArticleCategory(context.Context, *Int64) (*Result, error)
	// 获取文章
	GetArticle(context.Context, *IdOrName) (*SArticle, error)
	// 删除文章
	DeleteArticle(context.Context, *Int64) (*Result, error)
	// 保存文章
	SaveArticle(context.Context, *SArticle) (*Result, error)
	//* 获取置顶的文章,cat
	QueryTopArticles(context.Context, *IdOrName) (*ArticleListResponse, error)
	//* 获取分页文章
	QueryPagingArticles(context.Context, *PagingArticleRequest) (*ArticleListResponse, error)
}

// UnimplementedContentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (*UnimplementedContentServiceServer) GetPage(context.Context, *IdOrName) (*SPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPage not implemented")
}
func (*UnimplementedContentServiceServer) SavePage(context.Context, *SPage) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePage not implemented")
}
func (*UnimplementedContentServiceServer) DeletePage(context.Context, *Int64) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePage not implemented")
}
func (*UnimplementedContentServiceServer) GetArticleCategories(context.Context, *Empty) (*ArticleCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleCategories not implemented")
}
func (*UnimplementedContentServiceServer) GetArticleCategory(context.Context, *IdOrName) (*SArticleCategory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticleCategory not implemented")
}
func (*UnimplementedContentServiceServer) SaveArticleCategory(context.Context, *SArticleCategory) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveArticleCategory not implemented")
}
func (*UnimplementedContentServiceServer) DeleteArticleCategory(context.Context, *Int64) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticleCategory not implemented")
}
func (*UnimplementedContentServiceServer) GetArticle(context.Context, *IdOrName) (*SArticle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (*UnimplementedContentServiceServer) DeleteArticle(context.Context, *Int64) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (*UnimplementedContentServiceServer) SaveArticle(context.Context, *SArticle) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveArticle not implemented")
}
func (*UnimplementedContentServiceServer) QueryTopArticles(context.Context, *IdOrName) (*ArticleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTopArticles not implemented")
}
func (*UnimplementedContentServiceServer) QueryPagingArticles(context.Context, *PagingArticleRequest) (*ArticleListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPagingArticles not implemented")
}

func RegisterContentServiceServer(s *grpc.Server, srv ContentServiceServer) {
	s.RegisterService(&_ContentService_serviceDesc, srv)
}

func _ContentService_GetPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdOrName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentService/GetPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetPage(ctx, req.(*IdOrName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_SavePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SPage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).SavePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentService/SavePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).SavePage(ctx, req.(*SPage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeletePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeletePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentService/DeletePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeletePage(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetArticleCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetArticleCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentService/GetArticleCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetArticleCategories(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetArticleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdOrName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetArticleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentService/GetArticleCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetArticleCategory(ctx, req.(*IdOrName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_SaveArticleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SArticleCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).SaveArticleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentService/SaveArticleCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).SaveArticleCategory(ctx, req.(*SArticleCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteArticleCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteArticleCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentService/DeleteArticleCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteArticleCategory(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdOrName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentService/GetArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetArticle(ctx, req.(*IdOrName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentService/DeleteArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteArticle(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_SaveArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SArticle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).SaveArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentService/SaveArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).SaveArticle(ctx, req.(*SArticle))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_QueryTopArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdOrName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).QueryTopArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentService/QueryTopArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).QueryTopArticles(ctx, req.(*IdOrName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_QueryPagingArticles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagingArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).QueryPagingArticles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContentService/QueryPagingArticles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).QueryPagingArticles(ctx, req.(*PagingArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPage",
			Handler:    _ContentService_GetPage_Handler,
		},
		{
			MethodName: "SavePage",
			Handler:    _ContentService_SavePage_Handler,
		},
		{
			MethodName: "DeletePage",
			Handler:    _ContentService_DeletePage_Handler,
		},
		{
			MethodName: "GetArticleCategories",
			Handler:    _ContentService_GetArticleCategories_Handler,
		},
		{
			MethodName: "GetArticleCategory",
			Handler:    _ContentService_GetArticleCategory_Handler,
		},
		{
			MethodName: "SaveArticleCategory",
			Handler:    _ContentService_SaveArticleCategory_Handler,
		},
		{
			MethodName: "DeleteArticleCategory",
			Handler:    _ContentService_DeleteArticleCategory_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _ContentService_GetArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _ContentService_DeleteArticle_Handler,
		},
		{
			MethodName: "SaveArticle",
			Handler:    _ContentService_SaveArticle_Handler,
		},
		{
			MethodName: "QueryTopArticles",
			Handler:    _ContentService_QueryTopArticles_Handler,
		},
		{
			MethodName: "QueryPagingArticles",
			Handler:    _ContentService_QueryPagingArticles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content_service.proto",
}
