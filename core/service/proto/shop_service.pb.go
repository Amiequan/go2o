// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: shop_service.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TurnShopRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShopId int64  `protobuf:"zigzag64,1,opt,name=shopId,proto3" json:"shopId"`
	On     bool   `protobuf:"varint,2,opt,name=on,proto3" json:"on"`
	Reason string `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason"`
}

func (x *TurnShopRequest) Reset() {
	*x = TurnShopRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shop_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TurnShopRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TurnShopRequest) ProtoMessage() {}

func (x *TurnShopRequest) ProtoReflect() protoreflect.Message {
	mi := &file_shop_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TurnShopRequest.ProtoReflect.Descriptor instead.
func (*TurnShopRequest) Descriptor() ([]byte, []int) {
	return file_shop_service_proto_rawDescGZIP(), []int{0}
}

func (x *TurnShopRequest) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *TurnShopRequest) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *TurnShopRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

var File_shop_service_proto protoreflect.FileDescriptor

var file_shop_service_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x68, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x0f, 0x54, 0x75,
	0x72, 0x6e, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x73,
	0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x32, 0xc2, 0x02,
	0x0a, 0x0b, 0x53, 0x68, 0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x07, 0x2e, 0x53, 0x68, 0x6f, 0x70, 0x49,
	0x64, 0x1a, 0x06, 0x2e, 0x53, 0x53, 0x68, 0x6f, 0x70, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x16, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x68, 0x6f, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x1a, 0x12, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x1f, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x12, 0x08, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x1a, 0x07,
	0x2e, 0x53, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x0f, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x68, 0x6f, 0x70, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x07, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x00, 0x12,
	0x27, 0x0a, 0x08, 0x54, 0x75, 0x72, 0x6e, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x10, 0x2e, 0x54, 0x75,
	0x72, 0x6e, 0x53, 0x68, 0x6f, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1d, 0x0a, 0x08, 0x53, 0x61, 0x76, 0x65,
	0x53, 0x68, 0x6f, 0x70, 0x12, 0x06, 0x2e, 0x53, 0x53, 0x68, 0x6f, 0x70, 0x1a, 0x07, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65, 0x4f,
	0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x68, 0x6f, 0x70, 0x12, 0x07, 0x2e, 0x53, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x22,
	0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x08, 0x2e,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x42, 0x1e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x67, 0x6f, 0x32, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_shop_service_proto_rawDescOnce sync.Once
	file_shop_service_proto_rawDescData = file_shop_service_proto_rawDesc
)

func file_shop_service_proto_rawDescGZIP() []byte {
	file_shop_service_proto_rawDescOnce.Do(func() {
		file_shop_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_shop_service_proto_rawDescData)
	})
	return file_shop_service_proto_rawDescData
}

var file_shop_service_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_shop_service_proto_goTypes = []interface{}{
	(*TurnShopRequest)(nil),   // 0: TurnShopRequest
	(*ShopId)(nil),            // 1: ShopId
	(*MerchantId)(nil),        // 2: MerchantId
	(*StoreId)(nil),           // 3: StoreId
	(*String)(nil),            // 4: String
	(*SShop)(nil),             // 5: SShop
	(*SStore)(nil),            // 6: SStore
	(*CheckShopResponse)(nil), // 7: CheckShopResponse
	(*Int64)(nil),             // 8: Int64
	(*Result)(nil),            // 9: Result
}
var file_shop_service_proto_depIdxs = []int32{
	1, // 0: ShopService.GetShop:input_type -> ShopId
	2, // 1: ShopService.CheckMerchantShopState:input_type -> MerchantId
	3, // 2: ShopService.GetStore:input_type -> StoreId
	4, // 3: ShopService.QueryShopByHost:input_type -> String
	0, // 4: ShopService.TurnShop:input_type -> TurnShopRequest
	5, // 5: ShopService.SaveShop:input_type -> SShop
	6, // 6: ShopService.SaveOfflineShop:input_type -> SStore
	3, // 7: ShopService.DeleteStore:input_type -> StoreId
	5, // 8: ShopService.GetShop:output_type -> SShop
	7, // 9: ShopService.CheckMerchantShopState:output_type -> CheckShopResponse
	6, // 10: ShopService.GetStore:output_type -> SStore
	8, // 11: ShopService.QueryShopByHost:output_type -> Int64
	9, // 12: ShopService.TurnShop:output_type -> Result
	9, // 13: ShopService.SaveShop:output_type -> Result
	9, // 14: ShopService.SaveOfflineShop:output_type -> Result
	9, // 15: ShopService.DeleteStore:output_type -> Result
	8, // [8:16] is the sub-list for method output_type
	0, // [0:8] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_shop_service_proto_init() }
func file_shop_service_proto_init() {
	if File_shop_service_proto != nil {
		return
	}
	file_global_proto_init()
	file_message_shop_dto_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_shop_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TurnShopRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shop_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_shop_service_proto_goTypes,
		DependencyIndexes: file_shop_service_proto_depIdxs,
		MessageInfos:      file_shop_service_proto_msgTypes,
	}.Build()
	File_shop_service_proto = out.File
	file_shop_service_proto_rawDesc = nil
	file_shop_service_proto_goTypes = nil
	file_shop_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ShopServiceClient is the client API for ShopService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ShopServiceClient interface {
	//* 获取店铺,shopId
	GetShop(ctx context.Context, in *ShopId, opts ...grpc.CallOption) (*SShop, error)
	//rpc GetVendorShop_ (Int64) returns (SShop) {}
	// 检查商户是否开通店铺
	CheckMerchantShopState(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*CheckShopResponse, error)
	//* 获取门店,storeId
	GetStore(ctx context.Context, in *StoreId, opts ...grpc.CallOption) (*SStore, error)
	//* 根据主机头获取店铺编号,host
	QueryShopByHost(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error)
	// 获取门店
	//rpc GetOfflineShop(1:sint32 shopId)returns(Shop)
	// 打开或关闭商店
	TurnShop(ctx context.Context, in *TurnShopRequest, opts ...grpc.CallOption) (*Result, error)
	// 保存门店
	SaveShop(ctx context.Context, in *SShop, opts ...grpc.CallOption) (*Result, error)
	// 保存门店
	SaveOfflineShop(ctx context.Context, in *SStore, opts ...grpc.CallOption) (*Result, error)
	// 删除商店
	DeleteStore(ctx context.Context, in *StoreId, opts ...grpc.CallOption) (*Result, error)
}

type shopServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShopServiceClient(cc grpc.ClientConnInterface) ShopServiceClient {
	return &shopServiceClient{cc}
}

func (c *shopServiceClient) GetShop(ctx context.Context, in *ShopId, opts ...grpc.CallOption) (*SShop, error) {
	out := new(SShop)
	err := c.cc.Invoke(ctx, "/ShopService/GetShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) CheckMerchantShopState(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*CheckShopResponse, error) {
	out := new(CheckShopResponse)
	err := c.cc.Invoke(ctx, "/ShopService/CheckMerchantShopState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) GetStore(ctx context.Context, in *StoreId, opts ...grpc.CallOption) (*SStore, error) {
	out := new(SStore)
	err := c.cc.Invoke(ctx, "/ShopService/GetStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) QueryShopByHost(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/ShopService/QueryShopByHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) TurnShop(ctx context.Context, in *TurnShopRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ShopService/TurnShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) SaveShop(ctx context.Context, in *SShop, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ShopService/SaveShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) SaveOfflineShop(ctx context.Context, in *SStore, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ShopService/SaveOfflineShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopServiceClient) DeleteStore(ctx context.Context, in *StoreId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ShopService/DeleteStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopServiceServer is the server API for ShopService service.
type ShopServiceServer interface {
	//* 获取店铺,shopId
	GetShop(context.Context, *ShopId) (*SShop, error)
	//rpc GetVendorShop_ (Int64) returns (SShop) {}
	// 检查商户是否开通店铺
	CheckMerchantShopState(context.Context, *MerchantId) (*CheckShopResponse, error)
	//* 获取门店,storeId
	GetStore(context.Context, *StoreId) (*SStore, error)
	//* 根据主机头获取店铺编号,host
	QueryShopByHost(context.Context, *String) (*Int64, error)
	// 获取门店
	//rpc GetOfflineShop(1:sint32 shopId)returns(Shop)
	// 打开或关闭商店
	TurnShop(context.Context, *TurnShopRequest) (*Result, error)
	// 保存门店
	SaveShop(context.Context, *SShop) (*Result, error)
	// 保存门店
	SaveOfflineShop(context.Context, *SStore) (*Result, error)
	// 删除商店
	DeleteStore(context.Context, *StoreId) (*Result, error)
}

// UnimplementedShopServiceServer can be embedded to have forward compatible implementations.
type UnimplementedShopServiceServer struct {
}

func (*UnimplementedShopServiceServer) GetShop(context.Context, *ShopId) (*SShop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShop not implemented")
}
func (*UnimplementedShopServiceServer) CheckMerchantShopState(context.Context, *MerchantId) (*CheckShopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckMerchantShopState not implemented")
}
func (*UnimplementedShopServiceServer) GetStore(context.Context, *StoreId) (*SStore, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStore not implemented")
}
func (*UnimplementedShopServiceServer) QueryShopByHost(context.Context, *String) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryShopByHost not implemented")
}
func (*UnimplementedShopServiceServer) TurnShop(context.Context, *TurnShopRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TurnShop not implemented")
}
func (*UnimplementedShopServiceServer) SaveShop(context.Context, *SShop) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveShop not implemented")
}
func (*UnimplementedShopServiceServer) SaveOfflineShop(context.Context, *SStore) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveOfflineShop not implemented")
}
func (*UnimplementedShopServiceServer) DeleteStore(context.Context, *StoreId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStore not implemented")
}

func RegisterShopServiceServer(s *grpc.Server, srv ShopServiceServer) {
	s.RegisterService(&_ShopService_serviceDesc, srv)
}

func _ShopService_GetShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShopId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).GetShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShopService/GetShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).GetShop(ctx, req.(*ShopId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_CheckMerchantShopState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).CheckMerchantShopState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShopService/CheckMerchantShopState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).CheckMerchantShopState(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_GetStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).GetStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShopService/GetStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).GetStore(ctx, req.(*StoreId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_QueryShopByHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).QueryShopByHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShopService/QueryShopByHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).QueryShopByHost(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_TurnShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TurnShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).TurnShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShopService/TurnShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).TurnShop(ctx, req.(*TurnShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_SaveShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SShop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).SaveShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShopService/SaveShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).SaveShop(ctx, req.(*SShop))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_SaveOfflineShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SStore)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).SaveOfflineShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShopService/SaveOfflineShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).SaveOfflineShop(ctx, req.(*SStore))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShopService_DeleteStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopServiceServer).DeleteStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ShopService/DeleteStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopServiceServer).DeleteStore(ctx, req.(*StoreId))
	}
	return interceptor(ctx, in, info, handler)
}

var _ShopService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ShopService",
	HandlerType: (*ShopServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShop",
			Handler:    _ShopService_GetShop_Handler,
		},
		{
			MethodName: "CheckMerchantShopState",
			Handler:    _ShopService_CheckMerchantShopState_Handler,
		},
		{
			MethodName: "GetStore",
			Handler:    _ShopService_GetStore_Handler,
		},
		{
			MethodName: "QueryShopByHost",
			Handler:    _ShopService_QueryShopByHost_Handler,
		},
		{
			MethodName: "TurnShop",
			Handler:    _ShopService_TurnShop_Handler,
		},
		{
			MethodName: "SaveShop",
			Handler:    _ShopService_SaveShop_Handler,
		},
		{
			MethodName: "SaveOfflineShop",
			Handler:    _ShopService_SaveOfflineShop_Handler,
		},
		{
			MethodName: "DeleteStore",
			Handler:    _ShopService_DeleteStore_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shop_service.proto",
}
