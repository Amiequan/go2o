// Code generated by protoc-gen-go. DO NOT EDIT.
// source: payment_service.proto

package proto // import "./"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// * 支付方式的位值
type EPayMethod int32

const (
	EPayMethod__4 EPayMethod = 0
	// * 余额抵扣
	EPayMethod_Balance EPayMethod = 1
	// * 钱包支付
	EPayMethod_Wallet EPayMethod = 2
	// * 积分兑换
	EPayMethod_Integral EPayMethod = 4
	// * 用户卡
	EPayMethod_UserCard EPayMethod = 8
	// * 用户券
	EPayMethod_UserCoupon EPayMethod = 16
	// * 现金支付
	EPayMethod_Cash EPayMethod = 32
	// * 银行卡支付
	EPayMethod_BankCard EPayMethod = 64
	// * 第三方支付,如支付宝等
	EPayMethod_PaySP EPayMethod = 128
	// * 卖家支付通道
	EPayMethod_SellerPay EPayMethod = 256
	// * 系统支付通道
	EPayMethod_SystemPay EPayMethod = 512
)

var EPayMethod_name = map[int32]string{
	0:   "_4",
	1:   "Balance",
	2:   "Wallet",
	4:   "Integral",
	8:   "UserCard",
	16:  "UserCoupon",
	32:  "Cash",
	64:  "BankCard",
	128: "PaySP",
	256: "SellerPay",
	512: "SystemPay",
}
var EPayMethod_value = map[string]int32{
	"_4":         0,
	"Balance":    1,
	"Wallet":     2,
	"Integral":   4,
	"UserCard":   8,
	"UserCoupon": 16,
	"Cash":       32,
	"BankCard":   64,
	"PaySP":      128,
	"SellerPay":  256,
	"SystemPay":  512,
}

func (x EPayMethod) String() string {
	return proto.EnumName(EPayMethod_name, int32(x))
}
func (EPayMethod) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{0}
}

type AdjustOrderRequest struct {
	PaymentNo            string   `protobuf:"bytes,1,opt,name=paymentNo,proto3" json:"paymentNo"`
	Amount               int64    `protobuf:"varint,2,opt,name=amount,proto3" json:"amount"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AdjustOrderRequest) Reset()         { *m = AdjustOrderRequest{} }
func (m *AdjustOrderRequest) String() string { return proto.CompactTextString(m) }
func (*AdjustOrderRequest) ProtoMessage()    {}
func (*AdjustOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{0}
}
func (m *AdjustOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AdjustOrderRequest.Unmarshal(m, b)
}
func (m *AdjustOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AdjustOrderRequest.Marshal(b, m, deterministic)
}
func (dst *AdjustOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdjustOrderRequest.Merge(dst, src)
}
func (m *AdjustOrderRequest) XXX_Size() int {
	return xxx_messageInfo_AdjustOrderRequest.Size(m)
}
func (m *AdjustOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AdjustOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AdjustOrderRequest proto.InternalMessageInfo

func (m *AdjustOrderRequest) GetPaymentNo() string {
	if m != nil {
		return m.PaymentNo
	}
	return ""
}

func (m *AdjustOrderRequest) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type DiscountBalanceRequest struct {
	OrderId              int32    `protobuf:"zigzag32,1,opt,name=orderId,proto3" json:"orderId"`
	Remark               string   `protobuf:"bytes,2,opt,name=Remark,proto3" json:"Remark"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscountBalanceRequest) Reset()         { *m = DiscountBalanceRequest{} }
func (m *DiscountBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*DiscountBalanceRequest) ProtoMessage()    {}
func (*DiscountBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{1}
}
func (m *DiscountBalanceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscountBalanceRequest.Unmarshal(m, b)
}
func (m *DiscountBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscountBalanceRequest.Marshal(b, m, deterministic)
}
func (dst *DiscountBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscountBalanceRequest.Merge(dst, src)
}
func (m *DiscountBalanceRequest) XXX_Size() int {
	return xxx_messageInfo_DiscountBalanceRequest.Size(m)
}
func (m *DiscountBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscountBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DiscountBalanceRequest proto.InternalMessageInfo

func (m *DiscountBalanceRequest) GetOrderId() int32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *DiscountBalanceRequest) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

type DiscountIntegralRequest struct {
	OrderId              int32    `protobuf:"zigzag32,1,opt,name=orderId,proto3" json:"orderId"`
	Integral             int64    `protobuf:"zigzag64,2,opt,name=integral,proto3" json:"integral"`
	IgnoreOut            bool     `protobuf:"varint,3,opt,name=ignoreOut,proto3" json:"ignoreOut"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DiscountIntegralRequest) Reset()         { *m = DiscountIntegralRequest{} }
func (m *DiscountIntegralRequest) String() string { return proto.CompactTextString(m) }
func (*DiscountIntegralRequest) ProtoMessage()    {}
func (*DiscountIntegralRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{2}
}
func (m *DiscountIntegralRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DiscountIntegralRequest.Unmarshal(m, b)
}
func (m *DiscountIntegralRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DiscountIntegralRequest.Marshal(b, m, deterministic)
}
func (dst *DiscountIntegralRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DiscountIntegralRequest.Merge(dst, src)
}
func (m *DiscountIntegralRequest) XXX_Size() int {
	return xxx_messageInfo_DiscountIntegralRequest.Size(m)
}
func (m *DiscountIntegralRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DiscountIntegralRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DiscountIntegralRequest proto.InternalMessageInfo

func (m *DiscountIntegralRequest) GetOrderId() int32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *DiscountIntegralRequest) GetIntegral() int64 {
	if m != nil {
		return m.Integral
	}
	return 0
}

func (m *DiscountIntegralRequest) GetIgnoreOut() bool {
	if m != nil {
		return m.IgnoreOut
	}
	return false
}

type WalletPaymentRequest struct {
	TradeNo              string   `protobuf:"bytes,1,opt,name=tradeNo,proto3" json:"tradeNo"`
	MergePay             bool     `protobuf:"varint,2,opt,name=mergePay,proto3" json:"mergePay"`
	Remark               string   `protobuf:"bytes,3,opt,name=Remark,proto3" json:"Remark"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WalletPaymentRequest) Reset()         { *m = WalletPaymentRequest{} }
func (m *WalletPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*WalletPaymentRequest) ProtoMessage()    {}
func (*WalletPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{3}
}
func (m *WalletPaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WalletPaymentRequest.Unmarshal(m, b)
}
func (m *WalletPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WalletPaymentRequest.Marshal(b, m, deterministic)
}
func (dst *WalletPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WalletPaymentRequest.Merge(dst, src)
}
func (m *WalletPaymentRequest) XXX_Size() int {
	return xxx_messageInfo_WalletPaymentRequest.Size(m)
}
func (m *WalletPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WalletPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WalletPaymentRequest proto.InternalMessageInfo

func (m *WalletPaymentRequest) GetTradeNo() string {
	if m != nil {
		return m.TradeNo
	}
	return ""
}

func (m *WalletPaymentRequest) GetMergePay() bool {
	if m != nil {
		return m.MergePay
	}
	return false
}

func (m *WalletPaymentRequest) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

type HyperPaymentRequest struct {
	OrderId              int32    `protobuf:"zigzag32,1,opt,name=orderId,proto3" json:"orderId"`
	Remark               string   `protobuf:"bytes,2,opt,name=Remark,proto3" json:"Remark"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HyperPaymentRequest) Reset()         { *m = HyperPaymentRequest{} }
func (m *HyperPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*HyperPaymentRequest) ProtoMessage()    {}
func (*HyperPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{4}
}
func (m *HyperPaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HyperPaymentRequest.Unmarshal(m, b)
}
func (m *HyperPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HyperPaymentRequest.Marshal(b, m, deterministic)
}
func (dst *HyperPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HyperPaymentRequest.Merge(dst, src)
}
func (m *HyperPaymentRequest) XXX_Size() int {
	return xxx_messageInfo_HyperPaymentRequest.Size(m)
}
func (m *HyperPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HyperPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HyperPaymentRequest proto.InternalMessageInfo

func (m *HyperPaymentRequest) GetOrderId() int32 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *HyperPaymentRequest) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

type FinishPaymentRequest struct {
	TradeNo              string   `protobuf:"bytes,1,opt,name=tradeNo,proto3" json:"tradeNo"`
	SpName               string   `protobuf:"bytes,2,opt,name=spName,proto3" json:"spName"`
	OuterNo              string   `protobuf:"bytes,3,opt,name=outerNo,proto3" json:"outerNo"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FinishPaymentRequest) Reset()         { *m = FinishPaymentRequest{} }
func (m *FinishPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*FinishPaymentRequest) ProtoMessage()    {}
func (*FinishPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{5}
}
func (m *FinishPaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FinishPaymentRequest.Unmarshal(m, b)
}
func (m *FinishPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FinishPaymentRequest.Marshal(b, m, deterministic)
}
func (dst *FinishPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FinishPaymentRequest.Merge(dst, src)
}
func (m *FinishPaymentRequest) XXX_Size() int {
	return xxx_messageInfo_FinishPaymentRequest.Size(m)
}
func (m *FinishPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FinishPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FinishPaymentRequest proto.InternalMessageInfo

func (m *FinishPaymentRequest) GetTradeNo() string {
	if m != nil {
		return m.TradeNo
	}
	return ""
}

func (m *FinishPaymentRequest) GetSpName() string {
	if m != nil {
		return m.SpName
	}
	return ""
}

func (m *FinishPaymentRequest) GetOuterNo() string {
	if m != nil {
		return m.OuterNo
	}
	return ""
}

// * 支付网关请求
type PayGatewayV2Request struct {
	// * 交易号
	TradeNo string `protobuf:"bytes,1,opt,name=TradeNo,proto3" json:"TradeNo"`
	// * 是否合并支付
	MergePay bool `protobuf:"varint,2,opt,name=MergePay,proto3" json:"MergePay"`
	// * 钱包抵扣
	WalletDiscount bool `protobuf:"varint,3,opt,name=WalletDiscount,proto3" json:"WalletDiscount"`
	// * 支付方式
	PayMethod int32 `protobuf:"varint,4,opt,name=PayMethod,proto3" json:"PayMethod"`
	// * 支付SP
	SpName               string   `protobuf:"bytes,5,opt,name=SpName,proto3" json:"SpName"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayGatewayV2Request) Reset()         { *m = PayGatewayV2Request{} }
func (m *PayGatewayV2Request) String() string { return proto.CompactTextString(m) }
func (*PayGatewayV2Request) ProtoMessage()    {}
func (*PayGatewayV2Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{6}
}
func (m *PayGatewayV2Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayGatewayV2Request.Unmarshal(m, b)
}
func (m *PayGatewayV2Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayGatewayV2Request.Marshal(b, m, deterministic)
}
func (dst *PayGatewayV2Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGatewayV2Request.Merge(dst, src)
}
func (m *PayGatewayV2Request) XXX_Size() int {
	return xxx_messageInfo_PayGatewayV2Request.Size(m)
}
func (m *PayGatewayV2Request) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGatewayV2Request.DiscardUnknown(m)
}

var xxx_messageInfo_PayGatewayV2Request proto.InternalMessageInfo

func (m *PayGatewayV2Request) GetTradeNo() string {
	if m != nil {
		return m.TradeNo
	}
	return ""
}

func (m *PayGatewayV2Request) GetMergePay() bool {
	if m != nil {
		return m.MergePay
	}
	return false
}

func (m *PayGatewayV2Request) GetWalletDiscount() bool {
	if m != nil {
		return m.WalletDiscount
	}
	return false
}

func (m *PayGatewayV2Request) GetPayMethod() int32 {
	if m != nil {
		return m.PayMethod
	}
	return 0
}

func (m *PayGatewayV2Request) GetSpName() string {
	if m != nil {
		return m.SpName
	}
	return ""
}

// * 支付网关响应
type PayGatewayResponse struct {
	// * 代码
	ErrCode int32 `protobuf:"varint,1,opt,name=ErrCode,proto3" json:"ErrCode"`
	// * 消息
	ErrMsg string `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg"`
	// * 交易单号
	TradeNo string `protobuf:"bytes,3,opt,name=TradeNo,proto3" json:"TradeNo"`
	// 是否已完成交易
	IsFinished bool `protobuf:"varint,4,opt,name=IsFinished,proto3" json:"IsFinished"`
	// 总金额
	TotalAmount int64 `protobuf:"varint,5,opt,name=TotalAmount,proto3" json:"TotalAmount"`
	// 交易费用
	ProcedureFee int64 `protobuf:"varint,6,opt,name=ProcedureFee,proto3" json:"ProcedureFee"`
	// 金额
	FinalFee int64 `protobuf:"varint,7,opt,name=FinalFee,proto3" json:"FinalFee"`
	// 支付表单
	PaymentForm          string   `protobuf:"bytes,8,opt,name=PaymentForm,proto3" json:"PaymentForm"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayGatewayResponse) Reset()         { *m = PayGatewayResponse{} }
func (m *PayGatewayResponse) String() string { return proto.CompactTextString(m) }
func (*PayGatewayResponse) ProtoMessage()    {}
func (*PayGatewayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{7}
}
func (m *PayGatewayResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayGatewayResponse.Unmarshal(m, b)
}
func (m *PayGatewayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayGatewayResponse.Marshal(b, m, deterministic)
}
func (dst *PayGatewayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGatewayResponse.Merge(dst, src)
}
func (m *PayGatewayResponse) XXX_Size() int {
	return xxx_messageInfo_PayGatewayResponse.Size(m)
}
func (m *PayGatewayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGatewayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PayGatewayResponse proto.InternalMessageInfo

func (m *PayGatewayResponse) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *PayGatewayResponse) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *PayGatewayResponse) GetTradeNo() string {
	if m != nil {
		return m.TradeNo
	}
	return ""
}

func (m *PayGatewayResponse) GetIsFinished() bool {
	if m != nil {
		return m.IsFinished
	}
	return false
}

func (m *PayGatewayResponse) GetTotalAmount() int64 {
	if m != nil {
		return m.TotalAmount
	}
	return 0
}

func (m *PayGatewayResponse) GetProcedureFee() int64 {
	if m != nil {
		return m.ProcedureFee
	}
	return 0
}

func (m *PayGatewayResponse) GetFinalFee() int64 {
	if m != nil {
		return m.FinalFee
	}
	return 0
}

func (m *PayGatewayResponse) GetPaymentForm() string {
	if m != nil {
		return m.PaymentForm
	}
	return ""
}

type OrderInfoRequest struct {
	TradeNo              string   `protobuf:"bytes,1,opt,name=TradeNo,proto3" json:"TradeNo"`
	MergePay             bool     `protobuf:"varint,2,opt,name=MergePay,proto3" json:"MergePay"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderInfoRequest) Reset()         { *m = OrderInfoRequest{} }
func (m *OrderInfoRequest) String() string { return proto.CompactTextString(m) }
func (*OrderInfoRequest) ProtoMessage()    {}
func (*OrderInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{8}
}
func (m *OrderInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderInfoRequest.Unmarshal(m, b)
}
func (m *OrderInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderInfoRequest.Marshal(b, m, deterministic)
}
func (dst *OrderInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderInfoRequest.Merge(dst, src)
}
func (m *OrderInfoRequest) XXX_Size() int {
	return xxx_messageInfo_OrderInfoRequest.Size(m)
}
func (m *OrderInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OrderInfoRequest proto.InternalMessageInfo

func (m *OrderInfoRequest) GetTradeNo() string {
	if m != nil {
		return m.TradeNo
	}
	return ""
}

func (m *OrderInfoRequest) GetMergePay() bool {
	if m != nil {
		return m.MergePay
	}
	return false
}

type MixedPaymentRequest struct {
	TradeNo              string             `protobuf:"bytes,1,opt,name=TradeNo,proto3" json:"TradeNo"`
	Data                 []*SRequestPayData `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MixedPaymentRequest) Reset()         { *m = MixedPaymentRequest{} }
func (m *MixedPaymentRequest) String() string { return proto.CompactTextString(m) }
func (*MixedPaymentRequest) ProtoMessage()    {}
func (*MixedPaymentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{9}
}
func (m *MixedPaymentRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MixedPaymentRequest.Unmarshal(m, b)
}
func (m *MixedPaymentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MixedPaymentRequest.Marshal(b, m, deterministic)
}
func (dst *MixedPaymentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MixedPaymentRequest.Merge(dst, src)
}
func (m *MixedPaymentRequest) XXX_Size() int {
	return xxx_messageInfo_MixedPaymentRequest.Size(m)
}
func (m *MixedPaymentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MixedPaymentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MixedPaymentRequest proto.InternalMessageInfo

func (m *MixedPaymentRequest) GetTradeNo() string {
	if m != nil {
		return m.TradeNo
	}
	return ""
}

func (m *MixedPaymentRequest) GetData() []*SRequestPayData {
	if m != nil {
		return m.Data
	}
	return nil
}

type PayGatewayRequest struct {
	Action               string            `protobuf:"bytes,1,opt,name=action,proto3" json:"action"`
	UserId               int64             `protobuf:"zigzag64,2,opt,name=userId,proto3" json:"userId"`
	Data                 map[string]string `protobuf:"bytes,3,rep,name=Data,proto3" json:"Data" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PayGatewayRequest) Reset()         { *m = PayGatewayRequest{} }
func (m *PayGatewayRequest) String() string { return proto.CompactTextString(m) }
func (*PayGatewayRequest) ProtoMessage()    {}
func (*PayGatewayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{10}
}
func (m *PayGatewayRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayGatewayRequest.Unmarshal(m, b)
}
func (m *PayGatewayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayGatewayRequest.Marshal(b, m, deterministic)
}
func (dst *PayGatewayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayGatewayRequest.Merge(dst, src)
}
func (m *PayGatewayRequest) XXX_Size() int {
	return xxx_messageInfo_PayGatewayRequest.Size(m)
}
func (m *PayGatewayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PayGatewayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PayGatewayRequest proto.InternalMessageInfo

func (m *PayGatewayRequest) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *PayGatewayRequest) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PayGatewayRequest) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

// * 支付单
type SPaymentOrder struct {
	// * 交易号
	TradeNo string `protobuf:"bytes,1,opt,name=TradeNo,proto3" json:"TradeNo"`
	// * 卖家编号
	SellerId int32 `protobuf:"zigzag32,2,opt,name=SellerId,proto3" json:"SellerId"`
	// * 交易类型
	TradeType string `protobuf:"bytes,3,opt,name=TradeType,proto3" json:"TradeType"`
	// * 合并支付交单单号
	MergeTradeNo string `protobuf:"bytes,4,opt,name=MergeTradeNo,proto3" json:"MergeTradeNo"`
	// * 支付单详情
	Subject string `protobuf:"bytes,5,opt,name=Subject,proto3" json:"Subject"`
	// * 是否为子订单
	SubOrder bool `protobuf:"varint,6,opt,name=SubOrder,proto3" json:"SubOrder"`
	// * 支付单的类型，如购物或其他
	OrderType int32 `protobuf:"zigzag32,7,opt,name=OrderType,proto3" json:"OrderType"`
	// * 外部订单号
	OutOrderNo string `protobuf:"bytes,8,opt,name=OutOrderNo,proto3" json:"OutOrderNo"`
	// * 买家编号
	BuyerId int64 `protobuf:"varint,9,opt,name=BuyerId,proto3" json:"BuyerId"`
	// * 支付用户编号
	PayUid int64 `protobuf:"varint,10,opt,name=PayUid,proto3" json:"PayUid"`
	// * 商品金额
	ItemAmount int64 `protobuf:"varint,11,opt,name=ItemAmount,proto3" json:"ItemAmount"`
	// * 优惠金额
	DiscountAmount int64 `protobuf:"varint,12,opt,name=DiscountAmount,proto3" json:"DiscountAmount"`
	// * 调整金额
	AdjustAmount int64 `protobuf:"varint,13,opt,name=AdjustAmount,proto3" json:"AdjustAmount"`
	// * 抵扣金额
	DeductAmount int64 `protobuf:"varint,14,opt,name=DeductAmount,proto3" json:"DeductAmount"`
	// * 共计金额
	TotalAmount int64 `protobuf:"varint,15,opt,name=TotalAmount,proto3" json:"TotalAmount"`
	// * 手续费
	ProcedureFee int64 `protobuf:"varint,16,opt,name=ProcedureFee,proto3" json:"ProcedureFee"`
	// * 实付金额
	PaidFee int64 `protobuf:"varint,17,opt,name=PaidFee,proto3" json:"PaidFee"`
	// * 最终应付金额
	FinalFee int64 `protobuf:"varint,18,opt,name=FinalFee,proto3" json:"FinalFee"`
	// * 可⽤支付方式
	PayFlag int32 `protobuf:"varint,19,opt,name=PayFlag,proto3" json:"PayFlag"`
	// * 实际使用支付方式
	FinalFlag int32 `protobuf:"zigzag32,20,opt,name=FinalFlag,proto3" json:"FinalFlag"`
	// * 其他支付信息
	ExtraData string `protobuf:"bytes,21,opt,name=ExtraData,proto3" json:"ExtraData"`
	// * 订单状态
	State int32 `protobuf:"zigzag32,22,opt,name=State,proto3" json:"State"`
	// * 提交时间
	SubmitTime int64 `protobuf:"zigzag64,23,opt,name=SubmitTime,proto3" json:"SubmitTime"`
	// * 过期时间
	ExpiresTime int64 `protobuf:"zigzag64,24,opt,name=ExpiresTime,proto3" json:"ExpiresTime"`
	// * 支付时间
	PaidTime int64 `protobuf:"zigzag64,25,opt,name=PaidTime,proto3" json:"PaidTime"`
	// * 交易数据
	TradeData []*STradeMethodData `protobuf:"bytes,26,rep,name=TradeData,proto3" json:"TradeData"`
	// * 编号
	Id                   int32    `protobuf:"zigzag32,27,opt,name=Id,proto3" json:"Id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SPaymentOrder) Reset()         { *m = SPaymentOrder{} }
func (m *SPaymentOrder) String() string { return proto.CompactTextString(m) }
func (*SPaymentOrder) ProtoMessage()    {}
func (*SPaymentOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{11}
}
func (m *SPaymentOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SPaymentOrder.Unmarshal(m, b)
}
func (m *SPaymentOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SPaymentOrder.Marshal(b, m, deterministic)
}
func (dst *SPaymentOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPaymentOrder.Merge(dst, src)
}
func (m *SPaymentOrder) XXX_Size() int {
	return xxx_messageInfo_SPaymentOrder.Size(m)
}
func (m *SPaymentOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SPaymentOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SPaymentOrder proto.InternalMessageInfo

func (m *SPaymentOrder) GetTradeNo() string {
	if m != nil {
		return m.TradeNo
	}
	return ""
}

func (m *SPaymentOrder) GetSellerId() int32 {
	if m != nil {
		return m.SellerId
	}
	return 0
}

func (m *SPaymentOrder) GetTradeType() string {
	if m != nil {
		return m.TradeType
	}
	return ""
}

func (m *SPaymentOrder) GetMergeTradeNo() string {
	if m != nil {
		return m.MergeTradeNo
	}
	return ""
}

func (m *SPaymentOrder) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *SPaymentOrder) GetSubOrder() bool {
	if m != nil {
		return m.SubOrder
	}
	return false
}

func (m *SPaymentOrder) GetOrderType() int32 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

func (m *SPaymentOrder) GetOutOrderNo() string {
	if m != nil {
		return m.OutOrderNo
	}
	return ""
}

func (m *SPaymentOrder) GetBuyerId() int64 {
	if m != nil {
		return m.BuyerId
	}
	return 0
}

func (m *SPaymentOrder) GetPayUid() int64 {
	if m != nil {
		return m.PayUid
	}
	return 0
}

func (m *SPaymentOrder) GetItemAmount() int64 {
	if m != nil {
		return m.ItemAmount
	}
	return 0
}

func (m *SPaymentOrder) GetDiscountAmount() int64 {
	if m != nil {
		return m.DiscountAmount
	}
	return 0
}

func (m *SPaymentOrder) GetAdjustAmount() int64 {
	if m != nil {
		return m.AdjustAmount
	}
	return 0
}

func (m *SPaymentOrder) GetDeductAmount() int64 {
	if m != nil {
		return m.DeductAmount
	}
	return 0
}

func (m *SPaymentOrder) GetTotalAmount() int64 {
	if m != nil {
		return m.TotalAmount
	}
	return 0
}

func (m *SPaymentOrder) GetProcedureFee() int64 {
	if m != nil {
		return m.ProcedureFee
	}
	return 0
}

func (m *SPaymentOrder) GetPaidFee() int64 {
	if m != nil {
		return m.PaidFee
	}
	return 0
}

func (m *SPaymentOrder) GetFinalFee() int64 {
	if m != nil {
		return m.FinalFee
	}
	return 0
}

func (m *SPaymentOrder) GetPayFlag() int32 {
	if m != nil {
		return m.PayFlag
	}
	return 0
}

func (m *SPaymentOrder) GetFinalFlag() int32 {
	if m != nil {
		return m.FinalFlag
	}
	return 0
}

func (m *SPaymentOrder) GetExtraData() string {
	if m != nil {
		return m.ExtraData
	}
	return ""
}

func (m *SPaymentOrder) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SPaymentOrder) GetSubmitTime() int64 {
	if m != nil {
		return m.SubmitTime
	}
	return 0
}

func (m *SPaymentOrder) GetExpiresTime() int64 {
	if m != nil {
		return m.ExpiresTime
	}
	return 0
}

func (m *SPaymentOrder) GetPaidTime() int64 {
	if m != nil {
		return m.PaidTime
	}
	return 0
}

func (m *SPaymentOrder) GetTradeData() []*STradeMethodData {
	if m != nil {
		return m.TradeData
	}
	return nil
}

func (m *SPaymentOrder) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// * 请求支付数据
type SRequestPayData struct {
	// * 支付方式
	Method int32 `protobuf:"zigzag32,1,opt,name=Method,proto3" json:"Method"`
	// * 支付方式代码
	Code string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code"`
	// * 支付金额
	Amount               int64    `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SRequestPayData) Reset()         { *m = SRequestPayData{} }
func (m *SRequestPayData) String() string { return proto.CompactTextString(m) }
func (*SRequestPayData) ProtoMessage()    {}
func (*SRequestPayData) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{12}
}
func (m *SRequestPayData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SRequestPayData.Unmarshal(m, b)
}
func (m *SRequestPayData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SRequestPayData.Marshal(b, m, deterministic)
}
func (dst *SRequestPayData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SRequestPayData.Merge(dst, src)
}
func (m *SRequestPayData) XXX_Size() int {
	return xxx_messageInfo_SRequestPayData.Size(m)
}
func (m *SRequestPayData) XXX_DiscardUnknown() {
	xxx_messageInfo_SRequestPayData.DiscardUnknown(m)
}

var xxx_messageInfo_SRequestPayData proto.InternalMessageInfo

func (m *SRequestPayData) GetMethod() int32 {
	if m != nil {
		return m.Method
	}
	return 0
}

func (m *SRequestPayData) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *SRequestPayData) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

// * 交易方式数据
type STradeMethodData struct {
	// * 支付途径
	Method int32 `protobuf:"zigzag32,1,opt,name=Method,proto3" json:"Method"`
	// * 交易代码
	Code string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code"`
	// * 支付金额
	Amount int64 `protobuf:"varint,3,opt,name=Amount,proto3" json:"Amount"`
	// * 是否为内置支付途径
	Internal int32 `protobuf:"zigzag32,4,opt,name=Internal,proto3" json:"Internal"`
	// * 外部交易单号
	OutTradeNo string `protobuf:"bytes,5,opt,name=OutTradeNo,proto3" json:"OutTradeNo"`
	// * 支付时间
	PayTime              int64    `protobuf:"zigzag64,6,opt,name=PayTime,proto3" json:"PayTime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *STradeMethodData) Reset()         { *m = STradeMethodData{} }
func (m *STradeMethodData) String() string { return proto.CompactTextString(m) }
func (*STradeMethodData) ProtoMessage()    {}
func (*STradeMethodData) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{13}
}
func (m *STradeMethodData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_STradeMethodData.Unmarshal(m, b)
}
func (m *STradeMethodData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_STradeMethodData.Marshal(b, m, deterministic)
}
func (dst *STradeMethodData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_STradeMethodData.Merge(dst, src)
}
func (m *STradeMethodData) XXX_Size() int {
	return xxx_messageInfo_STradeMethodData.Size(m)
}
func (m *STradeMethodData) XXX_DiscardUnknown() {
	xxx_messageInfo_STradeMethodData.DiscardUnknown(m)
}

var xxx_messageInfo_STradeMethodData proto.InternalMessageInfo

func (m *STradeMethodData) GetMethod() int32 {
	if m != nil {
		return m.Method
	}
	return 0
}

func (m *STradeMethodData) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *STradeMethodData) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *STradeMethodData) GetInternal() int32 {
	if m != nil {
		return m.Internal
	}
	return 0
}

func (m *STradeMethodData) GetOutTradeNo() string {
	if m != nil {
		return m.OutTradeNo
	}
	return ""
}

func (m *STradeMethodData) GetPayTime() int64 {
	if m != nil {
		return m.PayTime
	}
	return 0
}

// * 支付单预交易数据
type SPrepareTradeData struct {
	// * 错误码
	ErrCode int32 `protobuf:"zigzag32,1,opt,name=errCode,proto3" json:"errCode"`
	// * 错误消息
	ErrMsg string `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg"`
	// * 交易号
	TradeNo string `protobuf:"bytes,3,opt,name=tradeNo,proto3" json:"tradeNo"`
	// * 支付标志
	PayFlag int32 `protobuf:"zigzag32,4,opt,name=PayFlag,proto3" json:"PayFlag"`
	// * 交易状态
	TradeState int32 `protobuf:"zigzag32,5,opt,name=TradeState,proto3" json:"TradeState"`
	// * 交易订单
	TradeOrders []*SPaymentOrderData `protobuf:"bytes,6,rep,name=TradeOrders,proto3" json:"TradeOrders"`
	// * 累计金额
	TotalAmount int64 `protobuf:"varint,7,opt,name=TotalAmount,proto3" json:"TotalAmount"`
	// * 手续费
	ProcedureFee int64 `protobuf:"varint,8,opt,name=ProcedureFee,proto3" json:"ProcedureFee"`
	// * 最终支付金额
	FinalFee             int64    `protobuf:"varint,9,opt,name=FinalFee,proto3" json:"FinalFee"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SPrepareTradeData) Reset()         { *m = SPrepareTradeData{} }
func (m *SPrepareTradeData) String() string { return proto.CompactTextString(m) }
func (*SPrepareTradeData) ProtoMessage()    {}
func (*SPrepareTradeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{14}
}
func (m *SPrepareTradeData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SPrepareTradeData.Unmarshal(m, b)
}
func (m *SPrepareTradeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SPrepareTradeData.Marshal(b, m, deterministic)
}
func (dst *SPrepareTradeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPrepareTradeData.Merge(dst, src)
}
func (m *SPrepareTradeData) XXX_Size() int {
	return xxx_messageInfo_SPrepareTradeData.Size(m)
}
func (m *SPrepareTradeData) XXX_DiscardUnknown() {
	xxx_messageInfo_SPrepareTradeData.DiscardUnknown(m)
}

var xxx_messageInfo_SPrepareTradeData proto.InternalMessageInfo

func (m *SPrepareTradeData) GetErrCode() int32 {
	if m != nil {
		return m.ErrCode
	}
	return 0
}

func (m *SPrepareTradeData) GetErrMsg() string {
	if m != nil {
		return m.ErrMsg
	}
	return ""
}

func (m *SPrepareTradeData) GetTradeNo() string {
	if m != nil {
		return m.TradeNo
	}
	return ""
}

func (m *SPrepareTradeData) GetPayFlag() int32 {
	if m != nil {
		return m.PayFlag
	}
	return 0
}

func (m *SPrepareTradeData) GetTradeState() int32 {
	if m != nil {
		return m.TradeState
	}
	return 0
}

func (m *SPrepareTradeData) GetTradeOrders() []*SPaymentOrderData {
	if m != nil {
		return m.TradeOrders
	}
	return nil
}

func (m *SPrepareTradeData) GetTotalAmount() int64 {
	if m != nil {
		return m.TotalAmount
	}
	return 0
}

func (m *SPrepareTradeData) GetProcedureFee() int64 {
	if m != nil {
		return m.ProcedureFee
	}
	return 0
}

func (m *SPrepareTradeData) GetFinalFee() int64 {
	if m != nil {
		return m.FinalFee
	}
	return 0
}

// * 支付单数据
type SPaymentOrderData struct {
	// * 交易订单号
	OrderNo string `protobuf:"bytes,1,opt,name=OrderNo,proto3" json:"OrderNo"`
	// * 标题
	Subject string `protobuf:"bytes,2,opt,name=Subject,proto3" json:"Subject"`
	// * 交易类型
	TradeType string `protobuf:"bytes,3,opt,name=TradeType,proto3" json:"TradeType"`
	// * 状态
	State int32 `protobuf:"zigzag32,4,opt,name=State,proto3" json:"State"`
	// * 手续费
	ProcedureFee int64 `protobuf:"varint,5,opt,name=ProcedureFee,proto3" json:"ProcedureFee"`
	// * 最终支付金额
	FinalFee             int64    `protobuf:"varint,6,opt,name=FinalFee,proto3" json:"FinalFee"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SPaymentOrderData) Reset()         { *m = SPaymentOrderData{} }
func (m *SPaymentOrderData) String() string { return proto.CompactTextString(m) }
func (*SPaymentOrderData) ProtoMessage()    {}
func (*SPaymentOrderData) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{15}
}
func (m *SPaymentOrderData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SPaymentOrderData.Unmarshal(m, b)
}
func (m *SPaymentOrderData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SPaymentOrderData.Marshal(b, m, deterministic)
}
func (dst *SPaymentOrderData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SPaymentOrderData.Merge(dst, src)
}
func (m *SPaymentOrderData) XXX_Size() int {
	return xxx_messageInfo_SPaymentOrderData.Size(m)
}
func (m *SPaymentOrderData) XXX_DiscardUnknown() {
	xxx_messageInfo_SPaymentOrderData.DiscardUnknown(m)
}

var xxx_messageInfo_SPaymentOrderData proto.InternalMessageInfo

func (m *SPaymentOrderData) GetOrderNo() string {
	if m != nil {
		return m.OrderNo
	}
	return ""
}

func (m *SPaymentOrderData) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *SPaymentOrderData) GetTradeType() string {
	if m != nil {
		return m.TradeType
	}
	return ""
}

func (m *SPaymentOrderData) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SPaymentOrderData) GetProcedureFee() int64 {
	if m != nil {
		return m.ProcedureFee
	}
	return 0
}

func (m *SPaymentOrderData) GetFinalFee() int64 {
	if m != nil {
		return m.FinalFee
	}
	return 0
}

// * 集成支付应用编号
type PayIntegrateAppId struct {
	Value                int32    `protobuf:"varint,1,opt,name=Value,proto3" json:"Value"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PayIntegrateAppId) Reset()         { *m = PayIntegrateAppId{} }
func (m *PayIntegrateAppId) String() string { return proto.CompactTextString(m) }
func (*PayIntegrateAppId) ProtoMessage()    {}
func (*PayIntegrateAppId) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{16}
}
func (m *PayIntegrateAppId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PayIntegrateAppId.Unmarshal(m, b)
}
func (m *PayIntegrateAppId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PayIntegrateAppId.Marshal(b, m, deterministic)
}
func (dst *PayIntegrateAppId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayIntegrateAppId.Merge(dst, src)
}
func (m *PayIntegrateAppId) XXX_Size() int {
	return xxx_messageInfo_PayIntegrateAppId.Size(m)
}
func (m *PayIntegrateAppId) XXX_DiscardUnknown() {
	xxx_messageInfo_PayIntegrateAppId.DiscardUnknown(m)
}

var xxx_messageInfo_PayIntegrateAppId proto.InternalMessageInfo

func (m *PayIntegrateAppId) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// * 查询集成支付应用响应
type QueryIntegrateAppResponse struct {
	Value                []*SIntegrateApp `protobuf:"bytes,1,rep,name=Value,proto3" json:"Value"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *QueryIntegrateAppResponse) Reset()         { *m = QueryIntegrateAppResponse{} }
func (m *QueryIntegrateAppResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIntegrateAppResponse) ProtoMessage()    {}
func (*QueryIntegrateAppResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{17}
}
func (m *QueryIntegrateAppResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryIntegrateAppResponse.Unmarshal(m, b)
}
func (m *QueryIntegrateAppResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryIntegrateAppResponse.Marshal(b, m, deterministic)
}
func (dst *QueryIntegrateAppResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIntegrateAppResponse.Merge(dst, src)
}
func (m *QueryIntegrateAppResponse) XXX_Size() int {
	return xxx_messageInfo_QueryIntegrateAppResponse.Size(m)
}
func (m *QueryIntegrateAppResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIntegrateAppResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIntegrateAppResponse proto.InternalMessageInfo

func (m *QueryIntegrateAppResponse) GetValue() []*SIntegrateApp {
	if m != nil {
		return m.Value
	}
	return nil
}

// * 集成支付应用
type SIntegrateApp struct {
	// * 编号
	Id int32 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id"`
	// * 支付应用名称
	AppName string `protobuf:"bytes,2,opt,name=AppName,proto3" json:"AppName"`
	// * 支付应用接口
	AppUrl string `protobuf:"bytes,3,opt,name=AppUrl,proto3" json:"AppUrl"`
	// * 集成类型: 1:API调用 2: 跳转
	IntegrateType int32 `protobuf:"varint,4,opt,name=IntegrateType,proto3" json:"IntegrateType"`
	// * 显示顺序
	SortNumber int32 `protobuf:"varint,5,opt,name=SortNumber,proto3" json:"SortNumber"`
	// * 是否启用
	Enabled              int32    `protobuf:"varint,6,opt,name=Enabled,proto3" json:"Enabled"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SIntegrateApp) Reset()         { *m = SIntegrateApp{} }
func (m *SIntegrateApp) String() string { return proto.CompactTextString(m) }
func (*SIntegrateApp) ProtoMessage()    {}
func (*SIntegrateApp) Descriptor() ([]byte, []int) {
	return fileDescriptor_payment_service_eafc5f9d7d474129, []int{18}
}
func (m *SIntegrateApp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SIntegrateApp.Unmarshal(m, b)
}
func (m *SIntegrateApp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SIntegrateApp.Marshal(b, m, deterministic)
}
func (dst *SIntegrateApp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SIntegrateApp.Merge(dst, src)
}
func (m *SIntegrateApp) XXX_Size() int {
	return xxx_messageInfo_SIntegrateApp.Size(m)
}
func (m *SIntegrateApp) XXX_DiscardUnknown() {
	xxx_messageInfo_SIntegrateApp.DiscardUnknown(m)
}

var xxx_messageInfo_SIntegrateApp proto.InternalMessageInfo

func (m *SIntegrateApp) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SIntegrateApp) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *SIntegrateApp) GetAppUrl() string {
	if m != nil {
		return m.AppUrl
	}
	return ""
}

func (m *SIntegrateApp) GetIntegrateType() int32 {
	if m != nil {
		return m.IntegrateType
	}
	return 0
}

func (m *SIntegrateApp) GetSortNumber() int32 {
	if m != nil {
		return m.SortNumber
	}
	return 0
}

func (m *SIntegrateApp) GetEnabled() int32 {
	if m != nil {
		return m.Enabled
	}
	return 0
}

func init() {
	proto.RegisterType((*AdjustOrderRequest)(nil), "AdjustOrderRequest")
	proto.RegisterType((*DiscountBalanceRequest)(nil), "DiscountBalanceRequest")
	proto.RegisterType((*DiscountIntegralRequest)(nil), "DiscountIntegralRequest")
	proto.RegisterType((*WalletPaymentRequest)(nil), "WalletPaymentRequest")
	proto.RegisterType((*HyperPaymentRequest)(nil), "HyperPaymentRequest")
	proto.RegisterType((*FinishPaymentRequest)(nil), "FinishPaymentRequest")
	proto.RegisterType((*PayGatewayV2Request)(nil), "PayGatewayV2Request")
	proto.RegisterType((*PayGatewayResponse)(nil), "PayGatewayResponse")
	proto.RegisterType((*OrderInfoRequest)(nil), "OrderInfoRequest")
	proto.RegisterType((*MixedPaymentRequest)(nil), "MixedPaymentRequest")
	proto.RegisterType((*PayGatewayRequest)(nil), "PayGatewayRequest")
	proto.RegisterMapType((map[string]string)(nil), "PayGatewayRequest.DataEntry")
	proto.RegisterType((*SPaymentOrder)(nil), "SPaymentOrder")
	proto.RegisterType((*SRequestPayData)(nil), "SRequestPayData")
	proto.RegisterType((*STradeMethodData)(nil), "STradeMethodData")
	proto.RegisterType((*SPrepareTradeData)(nil), "SPrepareTradeData")
	proto.RegisterType((*SPaymentOrderData)(nil), "SPaymentOrderData")
	proto.RegisterType((*PayIntegrateAppId)(nil), "PayIntegrateAppId")
	proto.RegisterType((*QueryIntegrateAppResponse)(nil), "QueryIntegrateAppResponse")
	proto.RegisterType((*SIntegrateApp)(nil), "SIntegrateApp")
	proto.RegisterEnum("EPayMethod", EPayMethod_name, EPayMethod_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentServiceClient interface {
	// 创建支付单并提交
	SubmitPaymentOrder(ctx context.Context, in *SPaymentOrder, opts ...grpc.CallOption) (*Result, error)
	// 根据支付单号获取支付单,orderNo
	GetPaymentOrder(ctx context.Context, in *String, opts ...grpc.CallOption) (*SPaymentOrder, error)
	// 根据交易号获取支付单编号,tradeNo
	GetPaymentOrderId(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int32, error)
	// 根据编号获取支付单
	GetPaymentOrderById(ctx context.Context, in *Int32, opts ...grpc.CallOption) (*SPaymentOrder, error)
	// 调整支付单金额
	AdjustOrder(ctx context.Context, in *AdjustOrderRequest, opts ...grpc.CallOption) (*Result, error)
	// 余额抵扣
	DiscountByBalance(ctx context.Context, in *DiscountBalanceRequest, opts ...grpc.CallOption) (*Result, error)
	// 积分抵扣支付单
	DiscountByIntegral(ctx context.Context, in *DiscountIntegralRequest, opts ...grpc.CallOption) (*Result, error)
	// 钱包账户支付
	PaymentByWallet(ctx context.Context, in *WalletPaymentRequest, opts ...grpc.CallOption) (*Result, error)
	// 余额钱包混合支付，优先扣除余额。
	HybridPayment(ctx context.Context, in *HyperPaymentRequest, opts ...grpc.CallOption) (*Result, error)
	// 完成支付单支付，并传入支付方式及外部订单号
	FinishPayment(ctx context.Context, in *FinishPaymentRequest, opts ...grpc.CallOption) (*Result, error)
	// 支付网关(仅交易单使用)
	GatewayV1(ctx context.Context, in *PayGatewayRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取支付预交易数据
	GetPreparePaymentInfo(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*SPrepareTradeData, error)
	// 支付网关V2
	GatewayV2(ctx context.Context, in *PayGatewayV2Request, opts ...grpc.CallOption) (*PayGatewayResponse, error)
	// *
	// 支付单混合支付
	//
	// @param storeCode 店铺编号
	// @param tradeNo   交易号
	// @param Data  支付数据
	// @return 支付结果,返回:order_state
	MixedPayment(ctx context.Context, in *MixedPaymentRequest, opts ...grpc.CallOption) (*Result, error)
	// * 保存集成支付应用
	SaveIntegrateApp(ctx context.Context, in *SIntegrateApp, opts ...grpc.CallOption) (*Result, error)
	// * 获取集成支付应用列表
	QueryIntegrateAppList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QueryIntegrateAppResponse, error)
	// * 删除集成支付应用
	DeleteIntegrateApp(ctx context.Context, in *PayIntegrateAppId, opts ...grpc.CallOption) (*Result, error)
}

type paymentServiceClient struct {
	cc *grpc.ClientConn
}

func NewPaymentServiceClient(cc *grpc.ClientConn) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) SubmitPaymentOrder(ctx context.Context, in *SPaymentOrder, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/SubmitPaymentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentOrder(ctx context.Context, in *String, opts ...grpc.CallOption) (*SPaymentOrder, error) {
	out := new(SPaymentOrder)
	err := c.cc.Invoke(ctx, "/PaymentService/GetPaymentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentOrderId(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int32, error) {
	out := new(Int32)
	err := c.cc.Invoke(ctx, "/PaymentService/GetPaymentOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentOrderById(ctx context.Context, in *Int32, opts ...grpc.CallOption) (*SPaymentOrder, error) {
	out := new(SPaymentOrder)
	err := c.cc.Invoke(ctx, "/PaymentService/GetPaymentOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) AdjustOrder(ctx context.Context, in *AdjustOrderRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/AdjustOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) DiscountByBalance(ctx context.Context, in *DiscountBalanceRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/DiscountByBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) DiscountByIntegral(ctx context.Context, in *DiscountIntegralRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/DiscountByIntegral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) PaymentByWallet(ctx context.Context, in *WalletPaymentRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/PaymentByWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) HybridPayment(ctx context.Context, in *HyperPaymentRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/HybridPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) FinishPayment(ctx context.Context, in *FinishPaymentRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/FinishPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GatewayV1(ctx context.Context, in *PayGatewayRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/GatewayV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPreparePaymentInfo(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*SPrepareTradeData, error) {
	out := new(SPrepareTradeData)
	err := c.cc.Invoke(ctx, "/PaymentService/GetPreparePaymentInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GatewayV2(ctx context.Context, in *PayGatewayV2Request, opts ...grpc.CallOption) (*PayGatewayResponse, error) {
	out := new(PayGatewayResponse)
	err := c.cc.Invoke(ctx, "/PaymentService/GatewayV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) MixedPayment(ctx context.Context, in *MixedPaymentRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/MixedPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) SaveIntegrateApp(ctx context.Context, in *SIntegrateApp, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/SaveIntegrateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) QueryIntegrateAppList(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*QueryIntegrateAppResponse, error) {
	out := new(QueryIntegrateAppResponse)
	err := c.cc.Invoke(ctx, "/PaymentService/QueryIntegrateAppList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) DeleteIntegrateApp(ctx context.Context, in *PayIntegrateAppId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/DeleteIntegrateApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
type PaymentServiceServer interface {
	// 创建支付单并提交
	SubmitPaymentOrder(context.Context, *SPaymentOrder) (*Result, error)
	// 根据支付单号获取支付单,orderNo
	GetPaymentOrder(context.Context, *String) (*SPaymentOrder, error)
	// 根据交易号获取支付单编号,tradeNo
	GetPaymentOrderId(context.Context, *String) (*Int32, error)
	// 根据编号获取支付单
	GetPaymentOrderById(context.Context, *Int32) (*SPaymentOrder, error)
	// 调整支付单金额
	AdjustOrder(context.Context, *AdjustOrderRequest) (*Result, error)
	// 余额抵扣
	DiscountByBalance(context.Context, *DiscountBalanceRequest) (*Result, error)
	// 积分抵扣支付单
	DiscountByIntegral(context.Context, *DiscountIntegralRequest) (*Result, error)
	// 钱包账户支付
	PaymentByWallet(context.Context, *WalletPaymentRequest) (*Result, error)
	// 余额钱包混合支付，优先扣除余额。
	HybridPayment(context.Context, *HyperPaymentRequest) (*Result, error)
	// 完成支付单支付，并传入支付方式及外部订单号
	FinishPayment(context.Context, *FinishPaymentRequest) (*Result, error)
	// 支付网关(仅交易单使用)
	GatewayV1(context.Context, *PayGatewayRequest) (*Result, error)
	// 获取支付预交易数据
	GetPreparePaymentInfo(context.Context, *OrderInfoRequest) (*SPrepareTradeData, error)
	// 支付网关V2
	GatewayV2(context.Context, *PayGatewayV2Request) (*PayGatewayResponse, error)
	// *
	// 支付单混合支付
	//
	// @param storeCode 店铺编号
	// @param tradeNo   交易号
	// @param Data  支付数据
	// @return 支付结果,返回:order_state
	MixedPayment(context.Context, *MixedPaymentRequest) (*Result, error)
	// * 保存集成支付应用
	SaveIntegrateApp(context.Context, *SIntegrateApp) (*Result, error)
	// * 获取集成支付应用列表
	QueryIntegrateAppList(context.Context, *Empty) (*QueryIntegrateAppResponse, error)
	// * 删除集成支付应用
	DeleteIntegrateApp(context.Context, *PayIntegrateAppId) (*Result, error)
}

func RegisterPaymentServiceServer(s *grpc.Server, srv PaymentServiceServer) {
	s.RegisterService(&_PaymentService_serviceDesc, srv)
}

func _PaymentService_SubmitPaymentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SPaymentOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).SubmitPaymentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/SubmitPaymentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).SubmitPaymentOrder(ctx, req.(*SPaymentOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/GetPaymentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentOrder(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/GetPaymentOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentOrderId(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int32)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/GetPaymentOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentOrderById(ctx, req.(*Int32))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_AdjustOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).AdjustOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/AdjustOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).AdjustOrder(ctx, req.(*AdjustOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_DiscountByBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).DiscountByBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/DiscountByBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).DiscountByBalance(ctx, req.(*DiscountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_DiscountByIntegral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscountIntegralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).DiscountByIntegral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/DiscountByIntegral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).DiscountByIntegral(ctx, req.(*DiscountIntegralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_PaymentByWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).PaymentByWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/PaymentByWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).PaymentByWallet(ctx, req.(*WalletPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_HybridPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HyperPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).HybridPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/HybridPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).HybridPayment(ctx, req.(*HyperPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_FinishPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).FinishPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/FinishPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).FinishPayment(ctx, req.(*FinishPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GatewayV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GatewayV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/GatewayV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GatewayV1(ctx, req.(*PayGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPreparePaymentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPreparePaymentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/GetPreparePaymentInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPreparePaymentInfo(ctx, req.(*OrderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GatewayV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayGatewayV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GatewayV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/GatewayV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GatewayV2(ctx, req.(*PayGatewayV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_MixedPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MixedPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).MixedPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/MixedPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).MixedPayment(ctx, req.(*MixedPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_SaveIntegrateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SIntegrateApp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).SaveIntegrateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/SaveIntegrateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).SaveIntegrateApp(ctx, req.(*SIntegrateApp))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_QueryIntegrateAppList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).QueryIntegrateAppList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/QueryIntegrateAppList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).QueryIntegrateAppList(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_DeleteIntegrateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayIntegrateAppId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).DeleteIntegrateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/DeleteIntegrateApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).DeleteIntegrateApp(ctx, req.(*PayIntegrateAppId))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitPaymentOrder",
			Handler:    _PaymentService_SubmitPaymentOrder_Handler,
		},
		{
			MethodName: "GetPaymentOrder",
			Handler:    _PaymentService_GetPaymentOrder_Handler,
		},
		{
			MethodName: "GetPaymentOrderId",
			Handler:    _PaymentService_GetPaymentOrderId_Handler,
		},
		{
			MethodName: "GetPaymentOrderById",
			Handler:    _PaymentService_GetPaymentOrderById_Handler,
		},
		{
			MethodName: "AdjustOrder",
			Handler:    _PaymentService_AdjustOrder_Handler,
		},
		{
			MethodName: "DiscountByBalance",
			Handler:    _PaymentService_DiscountByBalance_Handler,
		},
		{
			MethodName: "DiscountByIntegral",
			Handler:    _PaymentService_DiscountByIntegral_Handler,
		},
		{
			MethodName: "PaymentByWallet",
			Handler:    _PaymentService_PaymentByWallet_Handler,
		},
		{
			MethodName: "HybridPayment",
			Handler:    _PaymentService_HybridPayment_Handler,
		},
		{
			MethodName: "FinishPayment",
			Handler:    _PaymentService_FinishPayment_Handler,
		},
		{
			MethodName: "GatewayV1",
			Handler:    _PaymentService_GatewayV1_Handler,
		},
		{
			MethodName: "GetPreparePaymentInfo",
			Handler:    _PaymentService_GetPreparePaymentInfo_Handler,
		},
		{
			MethodName: "GatewayV2",
			Handler:    _PaymentService_GatewayV2_Handler,
		},
		{
			MethodName: "MixedPayment",
			Handler:    _PaymentService_MixedPayment_Handler,
		},
		{
			MethodName: "SaveIntegrateApp",
			Handler:    _PaymentService_SaveIntegrateApp_Handler,
		},
		{
			MethodName: "QueryIntegrateAppList",
			Handler:    _PaymentService_QueryIntegrateAppList_Handler,
		},
		{
			MethodName: "DeleteIntegrateApp",
			Handler:    _PaymentService_DeleteIntegrateApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment_service.proto",
}

func init() {
	proto.RegisterFile("payment_service.proto", fileDescriptor_payment_service_eafc5f9d7d474129)
}

var fileDescriptor_payment_service_eafc5f9d7d474129 = []byte{
	// 1611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5f, 0x6f, 0xe3, 0xc6,
	0x11, 0xb7, 0xfe, 0x4b, 0x63, 0x5b, 0x47, 0xad, 0xec, 0x3b, 0x46, 0x0d, 0x52, 0x83, 0x38, 0x04,
	0x6e, 0xd0, 0xf0, 0x12, 0x5f, 0x80, 0xa4, 0x2d, 0x0a, 0xc4, 0xbe, 0xb3, 0xef, 0x14, 0xd4, 0x3e,
	0x95, 0xb2, 0x53, 0xa0, 0x2f, 0xc1, 0x4a, 0xdc, 0xca, 0xcc, 0x51, 0x24, 0xbb, 0x5c, 0x5e, 0x8f,
	0x6f, 0x29, 0xd0, 0xaf, 0xd1, 0x0f, 0x50, 0xa0, 0x28, 0x90, 0xe7, 0xbe, 0xf6, 0x83, 0x15, 0x3b,
	0xbb, 0xa4, 0x96, 0xb4, 0xee, 0xdc, 0xa2, 0x7d, 0xb2, 0x7e, 0xc3, 0xd9, 0x99, 0xd9, 0xd9, 0xf9,
	0xcd, 0xce, 0x1a, 0x0e, 0x13, 0x9a, 0xaf, 0x59, 0x24, 0xbe, 0x4b, 0x19, 0x7f, 0x13, 0x2c, 0x99,
	0x9b, 0xf0, 0x58, 0xc4, 0x93, 0xbd, 0x55, 0x18, 0x2f, 0x68, 0xa8, 0x90, 0xf3, 0x0d, 0x90, 0x53,
	0xff, 0xfb, 0x2c, 0x15, 0xaf, 0xb8, 0xcf, 0xb8, 0xc7, 0xfe, 0x98, 0xb1, 0x54, 0x90, 0x0f, 0x61,
	0xa0, 0x17, 0x5f, 0xc5, 0x76, 0xe3, 0xa8, 0x71, 0x3c, 0xf0, 0x36, 0x02, 0xf2, 0x10, 0xba, 0x74,
	0x1d, 0x67, 0x91, 0xb0, 0x9b, 0x47, 0x8d, 0xe3, 0x96, 0xa7, 0x91, 0xf3, 0x0d, 0x3c, 0x7c, 0x1e,
	0xa4, 0x4b, 0xf9, 0xfb, 0x8c, 0x86, 0x34, 0x5a, 0xb2, 0xc2, 0x9e, 0x0d, 0xbd, 0x58, 0xda, 0x9f,
	0xfa, 0x68, 0x6d, 0xe4, 0x15, 0x50, 0xda, 0xf2, 0xd8, 0x9a, 0xf2, 0xd7, 0x68, 0x6b, 0xe0, 0x69,
	0xe4, 0xac, 0xe1, 0x51, 0x61, 0x6b, 0x1a, 0x09, 0xb6, 0xe2, 0x34, 0xbc, 0xdf, 0xd8, 0x04, 0xfa,
	0x81, 0x56, 0x46, 0x73, 0xc4, 0x2b, 0xb1, 0xdc, 0x52, 0xb0, 0x8a, 0x62, 0xce, 0x5e, 0x65, 0xc2,
	0x6e, 0x1d, 0x35, 0x8e, 0xfb, 0xde, 0x46, 0xe0, 0xf8, 0x70, 0xf0, 0x3b, 0x1a, 0x86, 0x4c, 0xcc,
	0xd4, 0x2e, 0x0d, 0x5f, 0x82, 0x53, 0x9f, 0x95, 0x69, 0x28, 0xa0, 0xf4, 0xb5, 0x66, 0x7c, 0xc5,
	0x66, 0x34, 0x47, 0x5f, 0x7d, 0xaf, 0xc4, 0xc6, 0xa6, 0x5a, 0x95, 0x4d, 0xbd, 0x80, 0xf1, 0xcb,
	0x3c, 0x61, 0xfc, 0xae, 0x93, 0xff, 0x32, 0x3b, 0x0b, 0x38, 0xb8, 0x08, 0xa2, 0x20, 0xbd, 0xfd,
	0x8f, 0xc3, 0x7d, 0x08, 0xdd, 0x34, 0xb9, 0xa2, 0x6b, 0x56, 0x58, 0x52, 0x08, 0x7d, 0x67, 0x82,
	0xf1, 0xab, 0x58, 0xc7, 0x5a, 0x40, 0xe7, 0x6f, 0x0d, 0x18, 0xcf, 0x68, 0xfe, 0x82, 0x0a, 0xf6,
	0x27, 0x9a, 0x7f, 0x7b, 0x62, 0xf8, 0xb8, 0xae, 0xfa, 0xb8, 0xde, 0xa4, 0xe4, 0xb2, 0x96, 0x92,
	0x02, 0x93, 0x8f, 0x61, 0xa8, 0x12, 0x5c, 0x9c, 0xaa, 0x3e, 0x83, 0x9a, 0x54, 0x1e, 0xd3, 0x8c,
	0xe6, 0x97, 0x4c, 0xdc, 0xc6, 0xbe, 0xdd, 0x3e, 0x6a, 0x1c, 0x77, 0xbc, 0x8d, 0x40, 0xee, 0x62,
	0xae, 0x76, 0xd1, 0x51, 0xbb, 0x50, 0xc8, 0xf9, 0x4b, 0x13, 0xc8, 0x26, 0x56, 0x8f, 0xa5, 0x49,
	0x1c, 0xa5, 0xb8, 0xb9, 0x73, 0xce, 0x9f, 0xc5, 0x3e, 0xc3, 0x50, 0x3b, 0x5e, 0x01, 0xa5, 0xa1,
	0x73, 0xce, 0x2f, 0xd3, 0x55, 0x91, 0x0e, 0x85, 0xcc, 0xcd, 0xb5, 0xaa, 0x9b, 0xfb, 0x08, 0x60,
	0x9a, 0xaa, 0xa4, 0x33, 0x15, 0x59, 0xdf, 0x33, 0x24, 0xe4, 0x08, 0x76, 0xaf, 0x63, 0x41, 0xc3,
	0x53, 0xc5, 0x8c, 0x0e, 0x32, 0xc3, 0x14, 0x11, 0x07, 0xf6, 0x66, 0x3c, 0x5e, 0x32, 0x3f, 0xe3,
	0xec, 0x82, 0x31, 0xbb, 0x8b, 0x2a, 0x15, 0x99, 0x4c, 0xe1, 0x45, 0x10, 0xd1, 0x50, 0x7e, 0xef,
	0xe1, 0xf7, 0x12, 0x4b, 0x0f, 0xfa, 0xb8, 0x2f, 0x62, 0xbe, 0xb6, 0xfb, 0x18, 0x9f, 0x29, 0x72,
	0x5e, 0x82, 0x85, 0x34, 0x9e, 0x46, 0x7f, 0x88, 0xff, 0xa7, 0xe3, 0x72, 0x6e, 0x60, 0x7c, 0x19,
	0xbc, 0x65, 0xfe, 0xdd, 0xfa, 0x7a, 0x87, 0xb1, 0xc7, 0xd0, 0x7e, 0x4e, 0x05, 0xb5, 0x9b, 0x47,
	0xad, 0xe3, 0xdd, 0x13, 0xcb, 0x9d, 0xeb, 0x25, 0x33, 0x9a, 0x4b, 0xb9, 0x87, 0x5f, 0x9d, 0x7f,
	0x34, 0x60, 0x64, 0x9e, 0x93, 0xb2, 0x2a, 0xfb, 0xc9, 0x52, 0x04, 0x71, 0xa4, 0x8d, 0x6a, 0x24,
	0xe5, 0x59, 0x8a, 0xb4, 0x50, 0x64, 0xd6, 0x88, 0x7c, 0xa6, 0x7d, 0xb5, 0xd0, 0xd7, 0x87, 0xee,
	0x1d, 0x8b, 0xae, 0xfc, 0x7c, 0x1e, 0x09, 0x9e, 0x2b, 0xbf, 0x93, 0x2f, 0x61, 0x50, 0x8a, 0x88,
	0x05, 0xad, 0xd7, 0x2c, 0xd7, 0xbe, 0xe4, 0x4f, 0x72, 0x00, 0x9d, 0x37, 0x34, 0xcc, 0x0a, 0x6e,
	0x28, 0xf0, 0xcb, 0xe6, 0x57, 0x0d, 0xe7, 0x5f, 0x5d, 0xd8, 0x9f, 0xeb, 0x24, 0x60, 0x6a, 0xdf,
	0x9f, 0xcf, 0x39, 0x0b, 0xc3, 0x32, 0xe0, 0x91, 0x57, 0x62, 0x59, 0xd6, 0xa8, 0x76, 0x9d, 0x27,
	0x4c, 0x57, 0xd6, 0x46, 0x20, 0x2b, 0x03, 0x33, 0x5f, 0x18, 0x6e, 0xa3, 0x42, 0x45, 0x26, 0xfd,
	0xce, 0xb3, 0xc5, 0xf7, 0x6c, 0x29, 0x74, 0xed, 0x17, 0x10, 0xfd, 0x66, 0x0b, 0x8c, 0x0e, 0x6b,
	0xaa, 0xef, 0x95, 0x58, 0xfa, 0xc5, 0x1f, 0xe8, 0xb7, 0x87, 0x41, 0x6d, 0x04, 0xb2, 0xa6, 0x5f,
	0x65, 0x6a, 0x5f, 0x57, 0xb1, 0x2e, 0x28, 0x43, 0x22, 0x7d, 0x9e, 0x65, 0x39, 0x6e, 0x68, 0x80,
	0xc5, 0x58, 0x40, 0x79, 0x34, 0x33, 0x9a, 0xdf, 0x04, 0xbe, 0x0d, 0xea, 0x0a, 0x50, 0x08, 0x59,
	0x22, 0xd8, 0x5a, 0x93, 0x60, 0x17, 0xbf, 0x19, 0x12, 0xd9, 0x06, 0x0a, 0xaa, 0x6b, 0x9d, 0x3d,
	0xd4, 0xa9, 0x49, 0x65, 0x46, 0xd4, 0xb5, 0xa4, 0xb5, 0xf6, 0x15, 0x57, 0x4c, 0x99, 0xd4, 0x79,
	0xce, 0xfc, 0x6c, 0x59, 0xe8, 0x0c, 0x95, 0x8e, 0x29, 0xab, 0xb3, 0xf2, 0xc1, 0xfd, 0xac, 0xb4,
	0xb6, 0xb0, 0xd2, 0x86, 0xde, 0x8c, 0x06, 0xbe, 0xfc, 0x3c, 0x52, 0x79, 0xd0, 0xb0, 0xc2, 0x57,
	0x52, 0xe3, 0x2b, 0xae, 0xca, 0x2f, 0x42, 0xba, 0xb2, 0xc7, 0xaa, 0xfb, 0x68, 0x28, 0x4f, 0x45,
	0x69, 0xc9, 0x6f, 0x07, 0xea, 0x54, 0x4a, 0x81, 0xfc, 0x7a, 0xfe, 0x56, 0x70, 0x8a, 0x35, 0x7e,
	0xa8, 0x6a, 0xa5, 0x14, 0xc8, 0x5a, 0x9d, 0x0b, 0x2a, 0x98, 0xfd, 0x10, 0xd7, 0x29, 0x20, 0xf3,
	0x3e, 0xcf, 0x16, 0xeb, 0x40, 0x5c, 0x07, 0x6b, 0x66, 0x3f, 0x42, 0xba, 0x18, 0x12, 0x99, 0x87,
	0xf3, 0xb7, 0x49, 0xc0, 0x59, 0x8a, 0x0a, 0x36, 0x2a, 0x98, 0x22, 0xb9, 0x13, 0xb9, 0x29, 0xfc,
	0xfc, 0x81, 0xba, 0x3b, 0x0b, 0x4c, 0x9e, 0xe8, 0xea, 0xc5, 0x88, 0x26, 0xc8, 0xba, 0x91, 0x3b,
	0x47, 0x91, 0x6a, 0xcc, 0x48, 0xf1, 0x8d, 0x0e, 0x19, 0x42, 0x73, 0xea, 0xdb, 0x3f, 0xc1, 0x08,
	0x9b, 0x53, 0xdf, 0xb9, 0x81, 0x07, 0xb5, 0x86, 0x20, 0x2b, 0x48, 0x77, 0x79, 0x75, 0xe7, 0x69,
	0x44, 0x08, 0xb4, 0xb1, 0x61, 0x2b, 0x2a, 0xb6, 0x8b, 0x6e, 0xad, 0x0f, 0xb0, 0xa5, 0xaa, 0x4d,
	0x21, 0xe7, 0xef, 0x0d, 0xb0, 0xea, 0x61, 0xfc, 0x3f, 0x0c, 0xcb, 0x64, 0xc8, 0xa9, 0x83, 0x47,
	0x34, 0x44, 0x32, 0x8e, 0xbc, 0x12, 0x6b, 0xd2, 0x14, 0x54, 0xed, 0x94, 0xa4, 0x31, 0x88, 0x3a,
	0xa3, 0x39, 0xe6, 0xb1, 0x8b, 0x79, 0x2c, 0xa0, 0xf3, 0x63, 0x13, 0x46, 0xf3, 0x19, 0x67, 0x09,
	0xe5, 0x6c, 0x93, 0x2b, 0x1b, 0x7a, 0xcc, 0xb8, 0xa4, 0x46, 0x5e, 0x01, 0xdf, 0x77, 0x49, 0x89,
	0xea, 0x25, 0x25, 0x2a, 0xbe, 0xb1, 0xac, 0x54, 0xd8, 0x65, 0xc9, 0x7d, 0x04, 0x80, 0x2e, 0x55,
	0xed, 0x74, 0xf0, 0xa3, 0x21, 0x21, 0x5f, 0xc0, 0x2e, 0x22, 0xa4, 0x7e, 0x6a, 0x77, 0xf1, 0x90,
	0x89, 0x5b, 0xe9, 0x7d, 0x78, 0xca, 0xa6, 0x5a, 0x9d, 0x5e, 0xbd, 0xfb, 0xe9, 0xd5, 0xbf, 0xe7,
	0xd2, 0x1b, 0x54, 0x49, 0xe4, 0xfc, 0xb3, 0x21, 0x73, 0x56, 0x0b, 0x42, 0xee, 0xb3, 0xe8, 0x5a,
	0xba, 0x09, 0x1b, 0x2d, 0xab, 0x68, 0x93, 0xcd, 0x6a, 0x9b, 0x7c, 0x7f, 0x0b, 0x2e, 0x69, 0xd5,
	0x36, 0x69, 0x55, 0x8f, 0xbe, 0x73, 0x4f, 0xf4, 0xdd, 0x5a, 0xf4, 0x3f, 0xc3, 0xeb, 0x4e, 0x0f,
	0xb0, 0x82, 0x9d, 0x26, 0xc9, 0xd4, 0x97, 0xae, 0xbe, 0xc5, 0xdb, 0x46, 0xcd, 0x24, 0x0a, 0x38,
	0xa7, 0xf0, 0xc1, 0x6f, 0x33, 0xc6, 0x2b, 0xca, 0xe5, 0x20, 0xf3, 0x78, 0xb3, 0x44, 0x9e, 0xcb,
	0xd0, 0x9d, 0x57, 0xd4, 0xb4, 0x89, 0x1f, 0x1b, 0xb0, 0x5f, 0xf9, 0xa0, 0x79, 0xa8, 0xfc, 0x34,
	0xa7, 0xbe, 0xcc, 0xce, 0x69, 0x62, 0x8e, 0x81, 0x05, 0x44, 0x26, 0x24, 0xc9, 0x0d, 0x0f, 0x8b,
	0x91, 0x55, 0x21, 0xf2, 0x18, 0xf6, 0x4b, 0x8b, 0x98, 0x39, 0x35, 0x93, 0x55, 0x85, 0xd8, 0x7e,
	0x62, 0x2e, 0xae, 0xb2, 0xf5, 0x82, 0x71, 0xcc, 0x52, 0xc7, 0x33, 0x24, 0x38, 0x88, 0x45, 0x74,
	0x11, 0x32, 0x1f, 0x53, 0x24, 0x07, 0x31, 0x05, 0x3f, 0xf9, 0x6b, 0x03, 0xe0, 0x7c, 0x33, 0xe0,
	0x75, 0xa1, 0xf9, 0xdd, 0x17, 0xd6, 0x0e, 0xd9, 0x85, 0x9e, 0x7e, 0x42, 0x58, 0x0d, 0x02, 0xd0,
	0x55, 0x53, 0xa2, 0xd5, 0x24, 0x7b, 0x8a, 0x99, 0x72, 0xa4, 0xb7, 0xda, 0x12, 0xdd, 0xa4, 0x8c,
	0x3f, 0xa3, 0xdc, 0xb7, 0xfa, 0x64, 0x08, 0x80, 0x28, 0xce, 0x92, 0x38, 0xb2, 0x2c, 0xd2, 0x87,
	0xf6, 0x33, 0x9a, 0xde, 0x5a, 0x47, 0x52, 0xef, 0x8c, 0x46, 0xaf, 0x51, 0xef, 0x6b, 0x02, 0xd0,
	0x99, 0xd1, 0x7c, 0x3e, 0xb3, 0x7e, 0x68, 0x90, 0x21, 0x0c, 0xd4, 0x25, 0x3d, 0xa3, 0xb9, 0xf5,
	0x43, 0x13, 0x71, 0x9e, 0x0a, 0xb6, 0x46, 0xdc, 0x3e, 0xf9, 0x73, 0x0f, 0x86, 0xba, 0xfc, 0xe6,
	0xea, 0x19, 0x45, 0x9e, 0x00, 0x51, 0x9d, 0xb5, 0x32, 0x17, 0x0c, 0xab, 0x5c, 0x99, 0xf4, 0x5c,
	0x8f, 0xa5, 0x59, 0x28, 0x9c, 0x1d, 0xf2, 0x73, 0x78, 0xf0, 0x82, 0x55, 0xb5, 0x7b, 0xee, 0x5c,
	0xf0, 0x20, 0x5a, 0x4d, 0x6a, 0xcb, 0x9c, 0x1d, 0xf2, 0x31, 0x8c, 0x6a, 0xda, 0x53, 0x7f, 0xa3,
	0xdf, 0x75, 0xa7, 0x91, 0x78, 0x7a, 0xe2, 0xec, 0x90, 0x27, 0x30, 0xae, 0xe9, 0x9d, 0xe5, 0x53,
	0x9f, 0x68, 0x85, 0x2d, 0x86, 0x3f, 0x85, 0x5d, 0xe3, 0xa9, 0x47, 0xc6, 0xee, 0xdd, 0x87, 0x9f,
	0x19, 0xf5, 0x97, 0x30, 0x2a, 0x5f, 0x73, 0xb9, 0x3e, 0x0c, 0xf2, 0xc8, 0xdd, 0xfe, 0xc2, 0x33,
	0x17, 0xfe, 0x02, 0xc8, 0x66, 0x61, 0x71, 0x58, 0xc4, 0x76, 0xdf, 0xf1, 0x9e, 0x33, 0x97, 0x3e,
	0x85, 0x07, 0x3a, 0xe8, 0xb3, 0x5c, 0x1d, 0x39, 0x39, 0x74, 0xb7, 0x3d, 0xcc, 0xcc, 0x45, 0x9f,
	0xc1, 0xfe, 0xcb, 0x7c, 0xc1, 0x83, 0x62, 0x58, 0x25, 0x07, 0xee, 0x96, 0x57, 0x96, 0xb9, 0xe2,
	0x73, 0xd8, 0xaf, 0x3c, 0x9f, 0xc8, 0xa1, 0xbb, 0xed, 0x39, 0x65, 0x2e, 0xf9, 0x04, 0x06, 0xc5,
	0x4b, 0xe8, 0x73, 0x42, 0xee, 0x8e, 0x9c, 0xa6, 0xee, 0xd7, 0x70, 0x28, 0x4f, 0x46, 0x35, 0x7a,
	0x6d, 0x52, 0x8e, 0xe4, 0x64, 0xe4, 0xd6, 0xc7, 0xf3, 0x89, 0x6c, 0xb1, 0xb5, 0x1b, 0xc1, 0xd9,
	0x21, 0x5f, 0x6d, 0xbc, 0x9d, 0x90, 0x03, 0x77, 0xcb, 0x33, 0x6c, 0x32, 0x76, 0xef, 0x3e, 0x78,
	0xb0, 0x2a, 0xf6, 0xcc, 0xc1, 0x9d, 0x1c, 0xb8, 0x5b, 0xe6, 0x78, 0x33, 0xd8, 0x4f, 0xc1, 0x9a,
	0xd3, 0x37, 0xac, 0xda, 0x36, 0xaa, 0xfd, 0xc5, 0x54, 0xff, 0x35, 0x1c, 0xde, 0x69, 0x53, 0xbf,
	0x09, 0x52, 0x41, 0xba, 0xee, 0xf9, 0x3a, 0x11, 0xf9, 0x64, 0xe2, 0xbe, 0xb3, 0x8d, 0xe1, 0x01,
	0x93, 0xe7, 0x2c, 0x64, 0xa2, 0xea, 0x0f, 0xf3, 0x59, 0xed, 0x92, 0x86, 0xcf, 0xb3, 0x9f, 0xc2,
	0x78, 0x19, 0xaf, 0xdd, 0x55, 0x20, 0x6e, 0xb3, 0x85, 0xbb, 0x8a, 0x4f, 0x62, 0x97, 0x27, 0xcb,
	0xdf, 0xf7, 0xdd, 0x27, 0xbf, 0xc2, 0x7f, 0x62, 0x2c, 0xba, 0xf8, 0xe7, 0xe9, 0xbf, 0x03, 0x00,
	0x00, 0xff, 0xff, 0xc1, 0x1e, 0xe1, 0xdd, 0xf2, 0x10, 0x00, 0x00,
}
