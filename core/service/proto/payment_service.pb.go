// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: payment_service.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

//* 支付方式的位值
type EPayMethod int32

const (
	EPayMethod__4 EPayMethod = 0
	//* 余额抵扣
	EPayMethod_Balance EPayMethod = 1
	//* 钱包支付
	EPayMethod_Wallet EPayMethod = 2
	//* 积分兑换
	EPayMethod_Integral EPayMethod = 4
	//* 用户卡
	EPayMethod_UserCard EPayMethod = 8
	//* 用户券
	EPayMethod_UserCoupon EPayMethod = 16
	//* 现金支付
	EPayMethod_Cash EPayMethod = 32
	//* 银行卡支付
	EPayMethod_BankCard EPayMethod = 64
	//* 第三方支付,如支付宝等
	EPayMethod_PaySP EPayMethod = 128
	//* 卖家支付通道
	EPayMethod_SellerPay EPayMethod = 256
	//* 系统支付通道
	EPayMethod_SystemPay EPayMethod = 512
)

// Enum value maps for EPayMethod.
var (
	EPayMethod_name = map[int32]string{
		0:   "_4",
		1:   "Balance",
		2:   "Wallet",
		4:   "Integral",
		8:   "UserCard",
		16:  "UserCoupon",
		32:  "Cash",
		64:  "BankCard",
		128: "PaySP",
		256: "SellerPay",
		512: "SystemPay",
	}
	EPayMethod_value = map[string]int32{
		"_4":         0,
		"Balance":    1,
		"Wallet":     2,
		"Integral":   4,
		"UserCard":   8,
		"UserCoupon": 16,
		"Cash":       32,
		"BankCard":   64,
		"PaySP":      128,
		"SellerPay":  256,
		"SystemPay":  512,
	}
)

func (x EPayMethod) Enum() *EPayMethod {
	p := new(EPayMethod)
	*p = x
	return p
}

func (x EPayMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EPayMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_service_proto_enumTypes[0].Descriptor()
}

func (EPayMethod) Type() protoreflect.EnumType {
	return &file_payment_service_proto_enumTypes[0]
}

func (x EPayMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EPayMethod.Descriptor instead.
func (EPayMethod) EnumDescriptor() ([]byte, []int) {
	return file_payment_service_proto_rawDescGZIP(), []int{0}
}

type AdjustOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaymentNo string  `protobuf:"bytes,1,opt,name=paymentNo,proto3" json:"paymentNo"`
	Amount    float64 `protobuf:"fixed64,2,opt,name=amount,proto3" json:"amount"`
}

func (x *AdjustOrderRequest) Reset() {
	*x = AdjustOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjustOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjustOrderRequest) ProtoMessage() {}

func (x *AdjustOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjustOrderRequest.ProtoReflect.Descriptor instead.
func (*AdjustOrderRequest) Descriptor() ([]byte, []int) {
	return file_payment_service_proto_rawDescGZIP(), []int{0}
}

func (x *AdjustOrderRequest) GetPaymentNo() string {
	if x != nil {
		return x.PaymentNo
	}
	return ""
}

func (x *AdjustOrderRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type DiscountBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId int32  `protobuf:"zigzag32,1,opt,name=orderId,proto3" json:"orderId"`
	Remark  string `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark"`
}

func (x *DiscountBalanceRequest) Reset() {
	*x = DiscountBalanceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscountBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscountBalanceRequest) ProtoMessage() {}

func (x *DiscountBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscountBalanceRequest.ProtoReflect.Descriptor instead.
func (*DiscountBalanceRequest) Descriptor() ([]byte, []int) {
	return file_payment_service_proto_rawDescGZIP(), []int{1}
}

func (x *DiscountBalanceRequest) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *DiscountBalanceRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type DiscountIntegralRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId   int32 `protobuf:"zigzag32,1,opt,name=orderId,proto3" json:"orderId"`
	Integral  int64 `protobuf:"zigzag64,2,opt,name=integral,proto3" json:"integral"`
	IgnoreOut bool  `protobuf:"varint,3,opt,name=ignoreOut,proto3" json:"ignoreOut"`
}

func (x *DiscountIntegralRequest) Reset() {
	*x = DiscountIntegralRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscountIntegralRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscountIntegralRequest) ProtoMessage() {}

func (x *DiscountIntegralRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscountIntegralRequest.ProtoReflect.Descriptor instead.
func (*DiscountIntegralRequest) Descriptor() ([]byte, []int) {
	return file_payment_service_proto_rawDescGZIP(), []int{2}
}

func (x *DiscountIntegralRequest) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *DiscountIntegralRequest) GetIntegral() int64 {
	if x != nil {
		return x.Integral
	}
	return 0
}

func (x *DiscountIntegralRequest) GetIgnoreOut() bool {
	if x != nil {
		return x.IgnoreOut
	}
	return false
}

type WalletPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeNo  string `protobuf:"bytes,1,opt,name=tradeNo,proto3" json:"tradeNo"`
	MergePay bool   `protobuf:"varint,2,opt,name=mergePay,proto3" json:"mergePay"`
	Remark   string `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark"`
}

func (x *WalletPaymentRequest) Reset() {
	*x = WalletPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WalletPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletPaymentRequest) ProtoMessage() {}

func (x *WalletPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletPaymentRequest.ProtoReflect.Descriptor instead.
func (*WalletPaymentRequest) Descriptor() ([]byte, []int) {
	return file_payment_service_proto_rawDescGZIP(), []int{3}
}

func (x *WalletPaymentRequest) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *WalletPaymentRequest) GetMergePay() bool {
	if x != nil {
		return x.MergePay
	}
	return false
}

func (x *WalletPaymentRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type HyperPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId int32  `protobuf:"zigzag32,1,opt,name=orderId,proto3" json:"orderId"`
	Remark  string `protobuf:"bytes,2,opt,name=remark,proto3" json:"remark"`
}

func (x *HyperPaymentRequest) Reset() {
	*x = HyperPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HyperPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HyperPaymentRequest) ProtoMessage() {}

func (x *HyperPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HyperPaymentRequest.ProtoReflect.Descriptor instead.
func (*HyperPaymentRequest) Descriptor() ([]byte, []int) {
	return file_payment_service_proto_rawDescGZIP(), []int{4}
}

func (x *HyperPaymentRequest) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *HyperPaymentRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type FinishPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeNo string `protobuf:"bytes,1,opt,name=tradeNo,proto3" json:"tradeNo"`
	SpName  string `protobuf:"bytes,2,opt,name=spName,proto3" json:"spName"`
	OuterNo string `protobuf:"bytes,3,opt,name=outerNo,proto3" json:"outerNo"`
}

func (x *FinishPaymentRequest) Reset() {
	*x = FinishPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishPaymentRequest) ProtoMessage() {}

func (x *FinishPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishPaymentRequest.ProtoReflect.Descriptor instead.
func (*FinishPaymentRequest) Descriptor() ([]byte, []int) {
	return file_payment_service_proto_rawDescGZIP(), []int{5}
}

func (x *FinishPaymentRequest) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *FinishPaymentRequest) GetSpName() string {
	if x != nil {
		return x.SpName
	}
	return ""
}

func (x *FinishPaymentRequest) GetOuterNo() string {
	if x != nil {
		return x.OuterNo
	}
	return ""
}

type OrderInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeNo  string `protobuf:"bytes,1,opt,name=tradeNo,proto3" json:"tradeNo"`
	MergePay bool   `protobuf:"varint,2,opt,name=mergePay,proto3" json:"mergePay"`
}

func (x *OrderInfoRequest) Reset() {
	*x = OrderInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderInfoRequest) ProtoMessage() {}

func (x *OrderInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderInfoRequest.ProtoReflect.Descriptor instead.
func (*OrderInfoRequest) Descriptor() ([]byte, []int) {
	return file_payment_service_proto_rawDescGZIP(), []int{6}
}

func (x *OrderInfoRequest) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *OrderInfoRequest) GetMergePay() bool {
	if x != nil {
		return x.MergePay
	}
	return false
}

type MixedPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeNo string             `protobuf:"bytes,1,opt,name=tradeNo,proto3" json:"tradeNo"`
	Data    []*SRequestPayData `protobuf:"bytes,2,rep,name=data,proto3" json:"data"`
}

func (x *MixedPaymentRequest) Reset() {
	*x = MixedPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MixedPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MixedPaymentRequest) ProtoMessage() {}

func (x *MixedPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MixedPaymentRequest.ProtoReflect.Descriptor instead.
func (*MixedPaymentRequest) Descriptor() ([]byte, []int) {
	return file_payment_service_proto_rawDescGZIP(), []int{7}
}

func (x *MixedPaymentRequest) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *MixedPaymentRequest) GetData() []*SRequestPayData {
	if x != nil {
		return x.Data
	}
	return nil
}

type PayGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action string            `protobuf:"bytes,1,opt,name=action,proto3" json:"action"`
	UserId int64             `protobuf:"zigzag64,2,opt,name=userId,proto3" json:"userId"`
	Data   map[string]string `protobuf:"bytes,3,rep,name=data,proto3" json:"data" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PayGatewayRequest) Reset() {
	*x = PayGatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayGatewayRequest) ProtoMessage() {}

func (x *PayGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayGatewayRequest.ProtoReflect.Descriptor instead.
func (*PayGatewayRequest) Descriptor() ([]byte, []int) {
	return file_payment_service_proto_rawDescGZIP(), []int{8}
}

func (x *PayGatewayRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PayGatewayRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *PayGatewayRequest) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

//* 支付单
type SPaymentOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* 交易号
	TradeNo string `protobuf:"bytes,1,opt,name=TradeNo,proto3" json:"TradeNo"`
	//* 卖家编号
	SellerId int32 `protobuf:"zigzag32,2,opt,name=SellerId,proto3" json:"SellerId"`
	//* 交易类型
	TradeType string `protobuf:"bytes,3,opt,name=TradeType,proto3" json:"TradeType"`
	//* 合并支付交单单号
	MergeTradeNo string `protobuf:"bytes,4,opt,name=MergeTradeNo,proto3" json:"MergeTradeNo"`
	//* 支付单详情
	Subject string `protobuf:"bytes,5,opt,name=Subject,proto3" json:"Subject"`
	//* 是否为子订单
	SubOrder bool `protobuf:"varint,6,opt,name=SubOrder,proto3" json:"SubOrder"`
	//* 支付单的类型，如购物或其他
	OrderType int32 `protobuf:"zigzag32,7,opt,name=OrderType,proto3" json:"OrderType"`
	//* 外部订单号
	OutOrderNo string `protobuf:"bytes,8,opt,name=OutOrderNo,proto3" json:"OutOrderNo"`
	//* 买家编号
	BuyerId int32 `protobuf:"zigzag32,9,opt,name=BuyerId,proto3" json:"BuyerId"`
	//* 支付用户编号
	PayUid int32 `protobuf:"zigzag32,10,opt,name=PayUid,proto3" json:"PayUid"`
	//* 商品金额
	ItemAmount int32 `protobuf:"zigzag32,11,opt,name=ItemAmount,proto3" json:"ItemAmount"`
	//* 优惠金额
	DiscountAmount int32 `protobuf:"zigzag32,12,opt,name=DiscountAmount,proto3" json:"DiscountAmount"`
	//* 调整金额
	AdjustAmount int32 `protobuf:"zigzag32,13,opt,name=AdjustAmount,proto3" json:"AdjustAmount"`
	//* 抵扣金额
	DeductAmount int32 `protobuf:"zigzag32,14,opt,name=DeductAmount,proto3" json:"DeductAmount"`
	//* 共计金额
	TotalAmount int32 `protobuf:"zigzag32,15,opt,name=TotalAmount,proto3" json:"TotalAmount"`
	//* 手续费
	ProcedureFee int32 `protobuf:"zigzag32,16,opt,name=ProcedureFee,proto3" json:"ProcedureFee"`
	//* 实付金额
	PaidFee int32 `protobuf:"zigzag32,17,opt,name=PaidFee,proto3" json:"PaidFee"`
	//* 最终应付金额
	FinalFee int32 `protobuf:"zigzag32,18,opt,name=FinalFee,proto3" json:"FinalFee"`
	//* 可⽤支付方式
	PayFlag int32 `protobuf:"zigzag32,19,opt,name=PayFlag,proto3" json:"PayFlag"`
	//* 实际使用支付方式
	FinalFlag int32 `protobuf:"zigzag32,20,opt,name=FinalFlag,proto3" json:"FinalFlag"`
	//* 其他支付信息
	ExtraData string `protobuf:"bytes,21,opt,name=ExtraData,proto3" json:"ExtraData"`
	//* 订单状态
	State int32 `protobuf:"zigzag32,22,opt,name=State,proto3" json:"State"`
	//* 提交时间
	SubmitTime int64 `protobuf:"zigzag64,23,opt,name=SubmitTime,proto3" json:"SubmitTime"`
	//* 过期时间
	ExpiresTime int64 `protobuf:"zigzag64,24,opt,name=ExpiresTime,proto3" json:"ExpiresTime"`
	//* 支付时间
	PaidTime int64 `protobuf:"zigzag64,25,opt,name=PaidTime,proto3" json:"PaidTime"`
	//* 交易数据
	TradeData []*STradeMethodData `protobuf:"bytes,26,rep,name=TradeData,proto3" json:"TradeData"`
	//* 编号
	ID int32 `protobuf:"zigzag32,27,opt,name=ID,proto3" json:"ID"`
}

func (x *SPaymentOrder) Reset() {
	*x = SPaymentOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPaymentOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPaymentOrder) ProtoMessage() {}

func (x *SPaymentOrder) ProtoReflect() protoreflect.Message {
	mi := &file_payment_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPaymentOrder.ProtoReflect.Descriptor instead.
func (*SPaymentOrder) Descriptor() ([]byte, []int) {
	return file_payment_service_proto_rawDescGZIP(), []int{9}
}

func (x *SPaymentOrder) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *SPaymentOrder) GetSellerId() int32 {
	if x != nil {
		return x.SellerId
	}
	return 0
}

func (x *SPaymentOrder) GetTradeType() string {
	if x != nil {
		return x.TradeType
	}
	return ""
}

func (x *SPaymentOrder) GetMergeTradeNo() string {
	if x != nil {
		return x.MergeTradeNo
	}
	return ""
}

func (x *SPaymentOrder) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SPaymentOrder) GetSubOrder() bool {
	if x != nil {
		return x.SubOrder
	}
	return false
}

func (x *SPaymentOrder) GetOrderType() int32 {
	if x != nil {
		return x.OrderType
	}
	return 0
}

func (x *SPaymentOrder) GetOutOrderNo() string {
	if x != nil {
		return x.OutOrderNo
	}
	return ""
}

func (x *SPaymentOrder) GetBuyerId() int32 {
	if x != nil {
		return x.BuyerId
	}
	return 0
}

func (x *SPaymentOrder) GetPayUid() int32 {
	if x != nil {
		return x.PayUid
	}
	return 0
}

func (x *SPaymentOrder) GetItemAmount() int32 {
	if x != nil {
		return x.ItemAmount
	}
	return 0
}

func (x *SPaymentOrder) GetDiscountAmount() int32 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *SPaymentOrder) GetAdjustAmount() int32 {
	if x != nil {
		return x.AdjustAmount
	}
	return 0
}

func (x *SPaymentOrder) GetDeductAmount() int32 {
	if x != nil {
		return x.DeductAmount
	}
	return 0
}

func (x *SPaymentOrder) GetTotalAmount() int32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *SPaymentOrder) GetProcedureFee() int32 {
	if x != nil {
		return x.ProcedureFee
	}
	return 0
}

func (x *SPaymentOrder) GetPaidFee() int32 {
	if x != nil {
		return x.PaidFee
	}
	return 0
}

func (x *SPaymentOrder) GetFinalFee() int32 {
	if x != nil {
		return x.FinalFee
	}
	return 0
}

func (x *SPaymentOrder) GetPayFlag() int32 {
	if x != nil {
		return x.PayFlag
	}
	return 0
}

func (x *SPaymentOrder) GetFinalFlag() int32 {
	if x != nil {
		return x.FinalFlag
	}
	return 0
}

func (x *SPaymentOrder) GetExtraData() string {
	if x != nil {
		return x.ExtraData
	}
	return ""
}

func (x *SPaymentOrder) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SPaymentOrder) GetSubmitTime() int64 {
	if x != nil {
		return x.SubmitTime
	}
	return 0
}

func (x *SPaymentOrder) GetExpiresTime() int64 {
	if x != nil {
		return x.ExpiresTime
	}
	return 0
}

func (x *SPaymentOrder) GetPaidTime() int64 {
	if x != nil {
		return x.PaidTime
	}
	return 0
}

func (x *SPaymentOrder) GetTradeData() []*STradeMethodData {
	if x != nil {
		return x.TradeData
	}
	return nil
}

func (x *SPaymentOrder) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

//* 请求支付数据
type SRequestPayData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* 支付方式
	Method int32 `protobuf:"zigzag32,1,opt,name=Method,proto3" json:"Method"`
	//* 支付方式代码
	Code string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code"`
	//* 支付金额
	Amount int32 `protobuf:"zigzag32,3,opt,name=Amount,proto3" json:"Amount"`
}

func (x *SRequestPayData) Reset() {
	*x = SRequestPayData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SRequestPayData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SRequestPayData) ProtoMessage() {}

func (x *SRequestPayData) ProtoReflect() protoreflect.Message {
	mi := &file_payment_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SRequestPayData.ProtoReflect.Descriptor instead.
func (*SRequestPayData) Descriptor() ([]byte, []int) {
	return file_payment_service_proto_rawDescGZIP(), []int{10}
}

func (x *SRequestPayData) GetMethod() int32 {
	if x != nil {
		return x.Method
	}
	return 0
}

func (x *SRequestPayData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *SRequestPayData) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

//* 交易方式数据
type STradeMethodData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* 支付途径
	Method int32 `protobuf:"zigzag32,1,opt,name=Method,proto3" json:"Method"`
	//* 交易代码
	Code string `protobuf:"bytes,2,opt,name=Code,proto3" json:"Code"`
	//* 支付金额
	Amount int32 `protobuf:"zigzag32,3,opt,name=Amount,proto3" json:"Amount"`
	//* 是否为内置支付途径
	Internal int32 `protobuf:"zigzag32,4,opt,name=Internal,proto3" json:"Internal"`
	//* 外部交易单号
	OutTradeNo string `protobuf:"bytes,5,opt,name=OutTradeNo,proto3" json:"OutTradeNo"`
	//* 支付时间
	PayTime int64 `protobuf:"zigzag64,6,opt,name=PayTime,proto3" json:"PayTime"`
}

func (x *STradeMethodData) Reset() {
	*x = STradeMethodData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *STradeMethodData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*STradeMethodData) ProtoMessage() {}

func (x *STradeMethodData) ProtoReflect() protoreflect.Message {
	mi := &file_payment_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use STradeMethodData.ProtoReflect.Descriptor instead.
func (*STradeMethodData) Descriptor() ([]byte, []int) {
	return file_payment_service_proto_rawDescGZIP(), []int{11}
}

func (x *STradeMethodData) GetMethod() int32 {
	if x != nil {
		return x.Method
	}
	return 0
}

func (x *STradeMethodData) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *STradeMethodData) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *STradeMethodData) GetInternal() int32 {
	if x != nil {
		return x.Internal
	}
	return 0
}

func (x *STradeMethodData) GetOutTradeNo() string {
	if x != nil {
		return x.OutTradeNo
	}
	return ""
}

func (x *STradeMethodData) GetPayTime() int64 {
	if x != nil {
		return x.PayTime
	}
	return 0
}

//* 支付单预交易数据
type SPrepareTradeData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* 错误码
	ErrCode int32 `protobuf:"zigzag32,1,opt,name=ErrCode,proto3" json:"ErrCode"`
	//* 错误消息
	ErrMsg string `protobuf:"bytes,2,opt,name=ErrMsg,proto3" json:"ErrMsg"`
	//* 交易号
	TradeNo string `protobuf:"bytes,3,opt,name=TradeNo,proto3" json:"TradeNo"`
	//* 支付标志
	PayFlag int32 `protobuf:"zigzag32,4,opt,name=PayFlag,proto3" json:"PayFlag"`
	//* 交易状态
	TradeState int32 `protobuf:"zigzag32,5,opt,name=TradeState,proto3" json:"TradeState"`
	//* 交易订单
	TradeOrders []*SPaymentOrderData `protobuf:"bytes,6,rep,name=TradeOrders,proto3" json:"TradeOrders"`
	//* 累计金额
	TotalAmount int32 `protobuf:"zigzag32,7,opt,name=TotalAmount,proto3" json:"TotalAmount"`
	//* 手续费
	ProcedureFee int32 `protobuf:"zigzag32,8,opt,name=ProcedureFee,proto3" json:"ProcedureFee"`
	//* 最终支付金额
	FinalFee int32 `protobuf:"zigzag32,9,opt,name=FinalFee,proto3" json:"FinalFee"`
}

func (x *SPrepareTradeData) Reset() {
	*x = SPrepareTradeData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPrepareTradeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPrepareTradeData) ProtoMessage() {}

func (x *SPrepareTradeData) ProtoReflect() protoreflect.Message {
	mi := &file_payment_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPrepareTradeData.ProtoReflect.Descriptor instead.
func (*SPrepareTradeData) Descriptor() ([]byte, []int) {
	return file_payment_service_proto_rawDescGZIP(), []int{12}
}

func (x *SPrepareTradeData) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *SPrepareTradeData) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *SPrepareTradeData) GetTradeNo() string {
	if x != nil {
		return x.TradeNo
	}
	return ""
}

func (x *SPrepareTradeData) GetPayFlag() int32 {
	if x != nil {
		return x.PayFlag
	}
	return 0
}

func (x *SPrepareTradeData) GetTradeState() int32 {
	if x != nil {
		return x.TradeState
	}
	return 0
}

func (x *SPrepareTradeData) GetTradeOrders() []*SPaymentOrderData {
	if x != nil {
		return x.TradeOrders
	}
	return nil
}

func (x *SPrepareTradeData) GetTotalAmount() int32 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *SPrepareTradeData) GetProcedureFee() int32 {
	if x != nil {
		return x.ProcedureFee
	}
	return 0
}

func (x *SPrepareTradeData) GetFinalFee() int32 {
	if x != nil {
		return x.FinalFee
	}
	return 0
}

//* 支付单数据
type SPaymentOrderData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//* 交易订单号
	OrderNo string `protobuf:"bytes,1,opt,name=OrderNo,proto3" json:"OrderNo"`
	//* 标题
	Subject string `protobuf:"bytes,2,opt,name=Subject,proto3" json:"Subject"`
	//* 交易类型
	TradeType string `protobuf:"bytes,3,opt,name=TradeType,proto3" json:"TradeType"`
	//* 状态
	State int32 `protobuf:"zigzag32,4,opt,name=State,proto3" json:"State"`
	//* 手续费
	ProcedureFee int32 `protobuf:"zigzag32,5,opt,name=ProcedureFee,proto3" json:"ProcedureFee"`
	//* 最终支付金额
	FinalFee int32 `protobuf:"zigzag32,6,opt,name=FinalFee,proto3" json:"FinalFee"`
}

func (x *SPaymentOrderData) Reset() {
	*x = SPaymentOrderData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SPaymentOrderData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SPaymentOrderData) ProtoMessage() {}

func (x *SPaymentOrderData) ProtoReflect() protoreflect.Message {
	mi := &file_payment_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SPaymentOrderData.ProtoReflect.Descriptor instead.
func (*SPaymentOrderData) Descriptor() ([]byte, []int) {
	return file_payment_service_proto_rawDescGZIP(), []int{13}
}

func (x *SPaymentOrderData) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *SPaymentOrderData) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SPaymentOrderData) GetTradeType() string {
	if x != nil {
		return x.TradeType
	}
	return ""
}

func (x *SPaymentOrderData) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SPaymentOrderData) GetProcedureFee() int32 {
	if x != nil {
		return x.ProcedureFee
	}
	return 0
}

func (x *SPaymentOrderData) GetFinalFee() int32 {
	if x != nil {
		return x.FinalFee
	}
	return 0
}

var File_payment_service_proto protoreflect.FileDescriptor

var file_payment_service_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4a, 0x0a, 0x12, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x4a, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x6d, 0x0a,
	0x17, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4f, 0x75, 0x74, 0x22, 0x64, 0x0a, 0x14,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61,
	0x72, 0x6b, 0x22, 0x47, 0x0a, 0x13, 0x48, 0x79, 0x70, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x62, 0x0a, 0x14, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x22,
	0x48, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x61, 0x79, 0x22, 0x55, 0x0a, 0x13, 0x4d, 0x69, 0x78,
	0x65, 0x64, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x24, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x53, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0xae, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x50, 0x61, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xc4, 0x06, 0x0a, 0x0d, 0x53, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x08, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x53, 0x75, 0x62, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x75, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x42, 0x75, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x07, 0x42, 0x75, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x79,
	0x55, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x50, 0x61, 0x79, 0x55, 0x69,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x0c, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0c, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x46, 0x65, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x69, 0x64, 0x46,
	0x65, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x50, 0x61, 0x69, 0x64, 0x46, 0x65,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x08, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x50, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x13, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07,
	0x50, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x61, 0x6c,
	0x46, 0x6c, 0x61, 0x67, 0x18, 0x14, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0a, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x61, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x12, 0x52, 0x08, 0x50,
	0x61, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x53, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x02, 0x49, 0x44, 0x22, 0x55, 0x0a, 0x0f, 0x53, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xac, 0x01, 0x0a, 0x10, 0x53, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x75, 0x74, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x12, 0x52, 0x07, 0x50, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb1,
	0x02, 0x0a, 0x11, 0x53, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x45, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x45, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4e, 0x6f,
	0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x07, 0x50, 0x61, 0x79, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x53, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x46,
	0x65, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x46,
	0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x46,
	0x65, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x53, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x54, 0x72, 0x61, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x46, 0x65, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x46, 0x65, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x65, 0x65,
	0x2a, 0x9d, 0x01, 0x0a, 0x0a, 0x45, 0x50, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x06, 0x0a, 0x02, 0x5f, 0x34, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x10, 0x02,
	0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x10, 0x04, 0x12, 0x0c,
	0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04,
	0x43, 0x61, 0x73, 0x68, 0x10, 0x20, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61,
	0x72, 0x64, 0x10, 0x40, 0x12, 0x0a, 0x0a, 0x05, 0x50, 0x61, 0x79, 0x53, 0x50, 0x10, 0x80, 0x01,
	0x12, 0x0e, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x50, 0x61, 0x79, 0x10, 0x80, 0x02,
	0x12, 0x0e, 0x0a, 0x09, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x61, 0x79, 0x10, 0x80, 0x04,
	0x32, 0xa2, 0x05, 0x0a, 0x0e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x2f, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x53, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0x0e, 0x2e, 0x53, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x22, 0x00, 0x12, 0x26, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x1a, 0x0e, 0x2e, 0x53, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0b, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x41, 0x64, 0x6a,
	0x75, 0x73, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x11, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x17, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x12, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x18, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x33,
	0x0a, 0x0f, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x57, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x12, 0x15, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0d, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x48, 0x79, 0x70, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x09, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x56, 0x31, 0x12, 0x12, 0x2e, 0x50, 0x61, 0x79, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x53, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0c, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x2e, 0x4d, 0x69, 0x78, 0x65, 0x64, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x1e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x67, 0x6f, 0x32, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x5a, 0x07, 0x2e, 0x3b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_payment_service_proto_rawDescOnce sync.Once
	file_payment_service_proto_rawDescData = file_payment_service_proto_rawDesc
)

func file_payment_service_proto_rawDescGZIP() []byte {
	file_payment_service_proto_rawDescOnce.Do(func() {
		file_payment_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_payment_service_proto_rawDescData)
	})
	return file_payment_service_proto_rawDescData
}

var file_payment_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_payment_service_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_payment_service_proto_goTypes = []interface{}{
	(EPayMethod)(0),                 // 0: EPayMethod
	(*AdjustOrderRequest)(nil),      // 1: AdjustOrderRequest
	(*DiscountBalanceRequest)(nil),  // 2: DiscountBalanceRequest
	(*DiscountIntegralRequest)(nil), // 3: DiscountIntegralRequest
	(*WalletPaymentRequest)(nil),    // 4: WalletPaymentRequest
	(*HyperPaymentRequest)(nil),     // 5: HyperPaymentRequest
	(*FinishPaymentRequest)(nil),    // 6: FinishPaymentRequest
	(*OrderInfoRequest)(nil),        // 7: OrderInfoRequest
	(*MixedPaymentRequest)(nil),     // 8: MixedPaymentRequest
	(*PayGatewayRequest)(nil),       // 9: PayGatewayRequest
	(*SPaymentOrder)(nil),           // 10: SPaymentOrder
	(*SRequestPayData)(nil),         // 11: SRequestPayData
	(*STradeMethodData)(nil),        // 12: STradeMethodData
	(*SPrepareTradeData)(nil),       // 13: SPrepareTradeData
	(*SPaymentOrderData)(nil),       // 14: SPaymentOrderData
	nil,                             // 15: PayGatewayRequest.DataEntry
	(*String)(nil),                  // 16: String
	(*Int32)(nil),                   // 17: Int32
	(*Result)(nil),                  // 18: Result
}
var file_payment_service_proto_depIdxs = []int32{
	11, // 0: MixedPaymentRequest.data:type_name -> SRequestPayData
	15, // 1: PayGatewayRequest.data:type_name -> PayGatewayRequest.DataEntry
	12, // 2: SPaymentOrder.TradeData:type_name -> STradeMethodData
	14, // 3: SPrepareTradeData.TradeOrders:type_name -> SPaymentOrderData
	10, // 4: PaymentService.SubmitPaymentOrder:input_type -> SPaymentOrder
	16, // 5: PaymentService.GetPaymentOrder:input_type -> String
	16, // 6: PaymentService.GetPaymentOrderId:input_type -> String
	17, // 7: PaymentService.GetPaymentOrderById:input_type -> Int32
	1,  // 8: PaymentService.AdjustOrder:input_type -> AdjustOrderRequest
	2,  // 9: PaymentService.DiscountByBalance:input_type -> DiscountBalanceRequest
	3,  // 10: PaymentService.DiscountByIntegral:input_type -> DiscountIntegralRequest
	4,  // 11: PaymentService.PaymentByWallet:input_type -> WalletPaymentRequest
	5,  // 12: PaymentService.HybridPayment:input_type -> HyperPaymentRequest
	6,  // 13: PaymentService.FinishPayment:input_type -> FinishPaymentRequest
	9,  // 14: PaymentService.GatewayV1:input_type -> PayGatewayRequest
	7,  // 15: PaymentService.GetPaymentOrderInfo:input_type -> OrderInfoRequest
	8,  // 16: PaymentService.MixedPayment:input_type -> MixedPaymentRequest
	18, // 17: PaymentService.SubmitPaymentOrder:output_type -> Result
	10, // 18: PaymentService.GetPaymentOrder:output_type -> SPaymentOrder
	17, // 19: PaymentService.GetPaymentOrderId:output_type -> Int32
	10, // 20: PaymentService.GetPaymentOrderById:output_type -> SPaymentOrder
	18, // 21: PaymentService.AdjustOrder:output_type -> Result
	18, // 22: PaymentService.DiscountByBalance:output_type -> Result
	18, // 23: PaymentService.DiscountByIntegral:output_type -> Result
	18, // 24: PaymentService.PaymentByWallet:output_type -> Result
	18, // 25: PaymentService.HybridPayment:output_type -> Result
	18, // 26: PaymentService.FinishPayment:output_type -> Result
	18, // 27: PaymentService.GatewayV1:output_type -> Result
	13, // 28: PaymentService.GetPaymentOrderInfo:output_type -> SPrepareTradeData
	18, // 29: PaymentService.MixedPayment:output_type -> Result
	17, // [17:30] is the sub-list for method output_type
	4,  // [4:17] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_payment_service_proto_init() }
func file_payment_service_proto_init() {
	if File_payment_service_proto != nil {
		return
	}
	file_global_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_payment_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjustOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscountBalanceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscountIntegralRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WalletPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HyperPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MixedPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayGatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SPaymentOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SRequestPayData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*STradeMethodData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SPrepareTradeData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SPaymentOrderData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_payment_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_payment_service_proto_goTypes,
		DependencyIndexes: file_payment_service_proto_depIdxs,
		EnumInfos:         file_payment_service_proto_enumTypes,
		MessageInfos:      file_payment_service_proto_msgTypes,
	}.Build()
	File_payment_service_proto = out.File
	file_payment_service_proto_rawDesc = nil
	file_payment_service_proto_goTypes = nil
	file_payment_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PaymentServiceClient is the client API for PaymentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaymentServiceClient interface {
	// 创建支付单并提交
	SubmitPaymentOrder(ctx context.Context, in *SPaymentOrder, opts ...grpc.CallOption) (*Result, error)
	// 根据支付单号获取支付单,orderNo
	GetPaymentOrder(ctx context.Context, in *String, opts ...grpc.CallOption) (*SPaymentOrder, error)
	// 根据交易号获取支付单编号,tradeNo
	GetPaymentOrderId(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int32, error)
	// 根据编号获取支付单
	GetPaymentOrderById(ctx context.Context, in *Int32, opts ...grpc.CallOption) (*SPaymentOrder, error)
	// 调整支付单金额
	AdjustOrder(ctx context.Context, in *AdjustOrderRequest, opts ...grpc.CallOption) (*Result, error)
	// 余额抵扣
	DiscountByBalance(ctx context.Context, in *DiscountBalanceRequest, opts ...grpc.CallOption) (*Result, error)
	// 积分抵扣支付单
	DiscountByIntegral(ctx context.Context, in *DiscountIntegralRequest, opts ...grpc.CallOption) (*Result, error)
	// 钱包账户支付
	PaymentByWallet(ctx context.Context, in *WalletPaymentRequest, opts ...grpc.CallOption) (*Result, error)
	// 余额钱包混合支付，优先扣除余额。
	HybridPayment(ctx context.Context, in *HyperPaymentRequest, opts ...grpc.CallOption) (*Result, error)
	// 完成支付单支付，并传入支付方式及外部订单号
	FinishPayment(ctx context.Context, in *FinishPaymentRequest, opts ...grpc.CallOption) (*Result, error)
	// 支付网关
	GatewayV1(ctx context.Context, in *PayGatewayRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取支付预交易数据
	GetPaymentOrderInfo(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*SPrepareTradeData, error)
	//*
	// 支付单混合支付
	//
	// @param storeCode 店铺编号
	// @param tradeNo   交易号
	// @param data  支付数据
	// @return 支付结果,返回:order_state
	MixedPayment(ctx context.Context, in *MixedPaymentRequest, opts ...grpc.CallOption) (*Result, error)
}

type paymentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentServiceClient(cc grpc.ClientConnInterface) PaymentServiceClient {
	return &paymentServiceClient{cc}
}

func (c *paymentServiceClient) SubmitPaymentOrder(ctx context.Context, in *SPaymentOrder, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/SubmitPaymentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentOrder(ctx context.Context, in *String, opts ...grpc.CallOption) (*SPaymentOrder, error) {
	out := new(SPaymentOrder)
	err := c.cc.Invoke(ctx, "/PaymentService/GetPaymentOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentOrderId(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int32, error) {
	out := new(Int32)
	err := c.cc.Invoke(ctx, "/PaymentService/GetPaymentOrderId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentOrderById(ctx context.Context, in *Int32, opts ...grpc.CallOption) (*SPaymentOrder, error) {
	out := new(SPaymentOrder)
	err := c.cc.Invoke(ctx, "/PaymentService/GetPaymentOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) AdjustOrder(ctx context.Context, in *AdjustOrderRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/AdjustOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) DiscountByBalance(ctx context.Context, in *DiscountBalanceRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/DiscountByBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) DiscountByIntegral(ctx context.Context, in *DiscountIntegralRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/DiscountByIntegral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) PaymentByWallet(ctx context.Context, in *WalletPaymentRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/PaymentByWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) HybridPayment(ctx context.Context, in *HyperPaymentRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/HybridPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) FinishPayment(ctx context.Context, in *FinishPaymentRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/FinishPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GatewayV1(ctx context.Context, in *PayGatewayRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/GatewayV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) GetPaymentOrderInfo(ctx context.Context, in *OrderInfoRequest, opts ...grpc.CallOption) (*SPrepareTradeData, error) {
	out := new(SPrepareTradeData)
	err := c.cc.Invoke(ctx, "/PaymentService/GetPaymentOrderInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentServiceClient) MixedPayment(ctx context.Context, in *MixedPaymentRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/PaymentService/MixedPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentServiceServer is the server API for PaymentService service.
type PaymentServiceServer interface {
	// 创建支付单并提交
	SubmitPaymentOrder(context.Context, *SPaymentOrder) (*Result, error)
	// 根据支付单号获取支付单,orderNo
	GetPaymentOrder(context.Context, *String) (*SPaymentOrder, error)
	// 根据交易号获取支付单编号,tradeNo
	GetPaymentOrderId(context.Context, *String) (*Int32, error)
	// 根据编号获取支付单
	GetPaymentOrderById(context.Context, *Int32) (*SPaymentOrder, error)
	// 调整支付单金额
	AdjustOrder(context.Context, *AdjustOrderRequest) (*Result, error)
	// 余额抵扣
	DiscountByBalance(context.Context, *DiscountBalanceRequest) (*Result, error)
	// 积分抵扣支付单
	DiscountByIntegral(context.Context, *DiscountIntegralRequest) (*Result, error)
	// 钱包账户支付
	PaymentByWallet(context.Context, *WalletPaymentRequest) (*Result, error)
	// 余额钱包混合支付，优先扣除余额。
	HybridPayment(context.Context, *HyperPaymentRequest) (*Result, error)
	// 完成支付单支付，并传入支付方式及外部订单号
	FinishPayment(context.Context, *FinishPaymentRequest) (*Result, error)
	// 支付网关
	GatewayV1(context.Context, *PayGatewayRequest) (*Result, error)
	// 获取支付预交易数据
	GetPaymentOrderInfo(context.Context, *OrderInfoRequest) (*SPrepareTradeData, error)
	//*
	// 支付单混合支付
	//
	// @param storeCode 店铺编号
	// @param tradeNo   交易号
	// @param data  支付数据
	// @return 支付结果,返回:order_state
	MixedPayment(context.Context, *MixedPaymentRequest) (*Result, error)
}

// UnimplementedPaymentServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPaymentServiceServer struct {
}

func (*UnimplementedPaymentServiceServer) SubmitPaymentOrder(context.Context, *SPaymentOrder) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitPaymentOrder not implemented")
}
func (*UnimplementedPaymentServiceServer) GetPaymentOrder(context.Context, *String) (*SPaymentOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentOrder not implemented")
}
func (*UnimplementedPaymentServiceServer) GetPaymentOrderId(context.Context, *String) (*Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentOrderId not implemented")
}
func (*UnimplementedPaymentServiceServer) GetPaymentOrderById(context.Context, *Int32) (*SPaymentOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentOrderById not implemented")
}
func (*UnimplementedPaymentServiceServer) AdjustOrder(context.Context, *AdjustOrderRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdjustOrder not implemented")
}
func (*UnimplementedPaymentServiceServer) DiscountByBalance(context.Context, *DiscountBalanceRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscountByBalance not implemented")
}
func (*UnimplementedPaymentServiceServer) DiscountByIntegral(context.Context, *DiscountIntegralRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscountByIntegral not implemented")
}
func (*UnimplementedPaymentServiceServer) PaymentByWallet(context.Context, *WalletPaymentRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentByWallet not implemented")
}
func (*UnimplementedPaymentServiceServer) HybridPayment(context.Context, *HyperPaymentRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HybridPayment not implemented")
}
func (*UnimplementedPaymentServiceServer) FinishPayment(context.Context, *FinishPaymentRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishPayment not implemented")
}
func (*UnimplementedPaymentServiceServer) GatewayV1(context.Context, *PayGatewayRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayV1 not implemented")
}
func (*UnimplementedPaymentServiceServer) GetPaymentOrderInfo(context.Context, *OrderInfoRequest) (*SPrepareTradeData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentOrderInfo not implemented")
}
func (*UnimplementedPaymentServiceServer) MixedPayment(context.Context, *MixedPaymentRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MixedPayment not implemented")
}

func RegisterPaymentServiceServer(s *grpc.Server, srv PaymentServiceServer) {
	s.RegisterService(&_PaymentService_serviceDesc, srv)
}

func _PaymentService_SubmitPaymentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SPaymentOrder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).SubmitPaymentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/SubmitPaymentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).SubmitPaymentOrder(ctx, req.(*SPaymentOrder))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/GetPaymentOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentOrder(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentOrderId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentOrderId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/GetPaymentOrderId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentOrderId(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int32)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/GetPaymentOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentOrderById(ctx, req.(*Int32))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_AdjustOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdjustOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).AdjustOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/AdjustOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).AdjustOrder(ctx, req.(*AdjustOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_DiscountByBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).DiscountByBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/DiscountByBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).DiscountByBalance(ctx, req.(*DiscountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_DiscountByIntegral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscountIntegralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).DiscountByIntegral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/DiscountByIntegral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).DiscountByIntegral(ctx, req.(*DiscountIntegralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_PaymentByWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).PaymentByWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/PaymentByWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).PaymentByWallet(ctx, req.(*WalletPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_HybridPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HyperPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).HybridPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/HybridPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).HybridPayment(ctx, req.(*HyperPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_FinishPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).FinishPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/FinishPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).FinishPayment(ctx, req.(*FinishPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GatewayV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GatewayV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/GatewayV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GatewayV1(ctx, req.(*PayGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_GetPaymentOrderInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).GetPaymentOrderInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/GetPaymentOrderInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).GetPaymentOrderInfo(ctx, req.(*OrderInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentService_MixedPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MixedPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentServiceServer).MixedPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PaymentService/MixedPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentServiceServer).MixedPayment(ctx, req.(*MixedPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PaymentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PaymentService",
	HandlerType: (*PaymentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitPaymentOrder",
			Handler:    _PaymentService_SubmitPaymentOrder_Handler,
		},
		{
			MethodName: "GetPaymentOrder",
			Handler:    _PaymentService_GetPaymentOrder_Handler,
		},
		{
			MethodName: "GetPaymentOrderId",
			Handler:    _PaymentService_GetPaymentOrderId_Handler,
		},
		{
			MethodName: "GetPaymentOrderById",
			Handler:    _PaymentService_GetPaymentOrderById_Handler,
		},
		{
			MethodName: "AdjustOrder",
			Handler:    _PaymentService_AdjustOrder_Handler,
		},
		{
			MethodName: "DiscountByBalance",
			Handler:    _PaymentService_DiscountByBalance_Handler,
		},
		{
			MethodName: "DiscountByIntegral",
			Handler:    _PaymentService_DiscountByIntegral_Handler,
		},
		{
			MethodName: "PaymentByWallet",
			Handler:    _PaymentService_PaymentByWallet_Handler,
		},
		{
			MethodName: "HybridPayment",
			Handler:    _PaymentService_HybridPayment_Handler,
		},
		{
			MethodName: "FinishPayment",
			Handler:    _PaymentService_FinishPayment_Handler,
		},
		{
			MethodName: "GatewayV1",
			Handler:    _PaymentService_GatewayV1_Handler,
		},
		{
			MethodName: "GetPaymentOrderInfo",
			Handler:    _PaymentService_GetPaymentOrderInfo_Handler,
		},
		{
			MethodName: "MixedPayment",
			Handler:    _PaymentService_MixedPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "payment_service.proto",
}
