// Code generated by protoc-gen-go. DO NOT EDIT.
// source: member_service.proto

package proto // import "."

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FavoriteType int32

const (
	FavoriteType_Unused FavoriteType = 0
	FavoriteType_Shop   FavoriteType = 1
	FavoriteType_Goods  FavoriteType = 2
)

var FavoriteType_name = map[int32]string{
	0: "Unused",
	1: "Shop",
	2: "Goods",
}
var FavoriteType_value = map[string]int32{
	"Unused": 0,
	"Shop":   1,
	"Goods":  2,
}

func (x FavoriteType) String() string {
	return proto.EnumName(FavoriteType_name, int32(x))
}
func (FavoriteType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_member_service_225f9284372c9226, []int{0}
}

type FavoriteRequest struct {
	MemberId             int64        `protobuf:"zigzag64,1,opt,name=MemberId,proto3" json:"MemberId,omitempty"`
	FavoriteType         FavoriteType `protobuf:"varint,2,opt,name=FavoriteType,proto3,enum=FavoriteType" json:"FavoriteType,omitempty"`
	ReferId              int64        `protobuf:"zigzag64,3,opt,name=ReferId,proto3" json:"ReferId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FavoriteRequest) Reset()         { *m = FavoriteRequest{} }
func (m *FavoriteRequest) String() string { return proto.CompactTextString(m) }
func (*FavoriteRequest) ProtoMessage()    {}
func (*FavoriteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_service_225f9284372c9226, []int{0}
}
func (m *FavoriteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FavoriteRequest.Unmarshal(m, b)
}
func (m *FavoriteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FavoriteRequest.Marshal(b, m, deterministic)
}
func (dst *FavoriteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FavoriteRequest.Merge(dst, src)
}
func (m *FavoriteRequest) XXX_Size() int {
	return xxx_messageInfo_FavoriteRequest.Size(m)
}
func (m *FavoriteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FavoriteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FavoriteRequest proto.InternalMessageInfo

func (m *FavoriteRequest) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *FavoriteRequest) GetFavoriteType() FavoriteType {
	if m != nil {
		return m.FavoriteType
	}
	return FavoriteType_Unused
}

func (m *FavoriteRequest) GetReferId() int64 {
	if m != nil {
		return m.ReferId
	}
	return 0
}

type DepthRequest struct {
	MemberId             int64    `protobuf:"zigzag64,1,opt,name=memberId,proto3" json:"memberId,omitempty"`
	Depth                int32    `protobuf:"zigzag32,2,opt,name=depth,proto3" json:"depth,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DepthRequest) Reset()         { *m = DepthRequest{} }
func (m *DepthRequest) String() string { return proto.CompactTextString(m) }
func (*DepthRequest) ProtoMessage()    {}
func (*DepthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_service_225f9284372c9226, []int{1}
}
func (m *DepthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DepthRequest.Unmarshal(m, b)
}
func (m *DepthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DepthRequest.Marshal(b, m, deterministic)
}
func (dst *DepthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepthRequest.Merge(dst, src)
}
func (m *DepthRequest) XXX_Size() int {
	return xxx_messageInfo_DepthRequest.Size(m)
}
func (m *DepthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DepthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DepthRequest proto.InternalMessageInfo

func (m *DepthRequest) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *DepthRequest) GetDepth() int32 {
	if m != nil {
		return m.Depth
	}
	return 0
}

type InviterIdListResponse struct {
	Value                []int64  `protobuf:"zigzag64,1,rep,packed,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InviterIdListResponse) Reset()         { *m = InviterIdListResponse{} }
func (m *InviterIdListResponse) String() string { return proto.CompactTextString(m) }
func (*InviterIdListResponse) ProtoMessage()    {}
func (*InviterIdListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_service_225f9284372c9226, []int{2}
}
func (m *InviterIdListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InviterIdListResponse.Unmarshal(m, b)
}
func (m *InviterIdListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InviterIdListResponse.Marshal(b, m, deterministic)
}
func (dst *InviterIdListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviterIdListResponse.Merge(dst, src)
}
func (m *InviterIdListResponse) XXX_Size() int {
	return xxx_messageInfo_InviterIdListResponse.Size(m)
}
func (m *InviterIdListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InviterIdListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InviterIdListResponse proto.InternalMessageInfo

func (m *InviterIdListResponse) GetValue() []int64 {
	if m != nil {
		return m.Value
	}
	return nil
}

type InviteQuantityRequest struct {
	MemberId             int64             `protobuf:"zigzag64,1,opt,name=memberId,proto3" json:"memberId,omitempty"`
	Data                 map[string]string `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *InviteQuantityRequest) Reset()         { *m = InviteQuantityRequest{} }
func (m *InviteQuantityRequest) String() string { return proto.CompactTextString(m) }
func (*InviteQuantityRequest) ProtoMessage()    {}
func (*InviteQuantityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_service_225f9284372c9226, []int{3}
}
func (m *InviteQuantityRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InviteQuantityRequest.Unmarshal(m, b)
}
func (m *InviteQuantityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InviteQuantityRequest.Marshal(b, m, deterministic)
}
func (dst *InviteQuantityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InviteQuantityRequest.Merge(dst, src)
}
func (m *InviteQuantityRequest) XXX_Size() int {
	return xxx_messageInfo_InviteQuantityRequest.Size(m)
}
func (m *InviteQuantityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_InviteQuantityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_InviteQuantityRequest proto.InternalMessageInfo

func (m *InviteQuantityRequest) GetMemberId() int64 {
	if m != nil {
		return m.MemberId
	}
	return 0
}

func (m *InviteQuantityRequest) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

type MemberIdListResponse struct {
	Value                []int64  `protobuf:"zigzag64,1,rep,packed,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MemberIdListResponse) Reset()         { *m = MemberIdListResponse{} }
func (m *MemberIdListResponse) String() string { return proto.CompactTextString(m) }
func (*MemberIdListResponse) ProtoMessage()    {}
func (*MemberIdListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_member_service_225f9284372c9226, []int{4}
}
func (m *MemberIdListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemberIdListResponse.Unmarshal(m, b)
}
func (m *MemberIdListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemberIdListResponse.Marshal(b, m, deterministic)
}
func (dst *MemberIdListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberIdListResponse.Merge(dst, src)
}
func (m *MemberIdListResponse) XXX_Size() int {
	return xxx_messageInfo_MemberIdListResponse.Size(m)
}
func (m *MemberIdListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberIdListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MemberIdListResponse proto.InternalMessageInfo

func (m *MemberIdListResponse) GetValue() []int64 {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*FavoriteRequest)(nil), "FavoriteRequest")
	proto.RegisterType((*DepthRequest)(nil), "DepthRequest")
	proto.RegisterType((*InviterIdListResponse)(nil), "InviterIdListResponse")
	proto.RegisterType((*InviteQuantityRequest)(nil), "InviteQuantityRequest")
	proto.RegisterMapType((map[string]string)(nil), "InviteQuantityRequest.DataEntry")
	proto.RegisterType((*MemberIdListResponse)(nil), "MemberIdListResponse")
	proto.RegisterEnum("FavoriteType", FavoriteType_name, FavoriteType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MemberServiceClient is the client API for MemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MemberServiceClient interface {
	// *
	// 注册会员
	// @param user 登陆用户名
	// @param pwd 登陆密码,md5运算后的字符串
	// @param flag 用户自定义标志
	// @param phone 手机号码
	// @param email 邮箱
	// @param avatar 头像
	// @param extend 扩展数据
	// @return 注册结果，返回user_code
	RegisterMemberV2(ctx context.Context, in *RegisterMemberRequest, opts ...grpc.CallOption) (*Result, error)
	// 登录，返回结果(Result)和会员编号(Id);
	// Result值为：-1:会员不存在; -2:账号密码不正确; -3:账号被停用
	CheckLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Result, error)
	// * 验证交易密码
	VerifyTradePwd(ctx context.Context, in *CheckTradePwdRequest, opts ...grpc.CallOption) (*Result, error)
	// * 交换会员编号
	SwapMemberId(ctx context.Context, in *SwapMemberRequest, opts ...grpc.CallOption) (*Int64, error)
	// * 等级列表
	GetLevels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SMemberLevelListResponse, error)
	// 获取实名信息,memberId
	GetTrustInfo(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*STrustedInfo, error)
	// * 提交实名信息
	SubmitTrustInfo(ctx context.Context, in *SubmitTrustInfoRequest, opts ...grpc.CallOption) (*Result, error)
	// * 审核实名认证,若重复审核将返回错误 *
	ReviewTrustedInfo(ctx context.Context, in *ReviewTrustInfoRequest, opts ...grpc.CallOption) (*Result, error)
	// * 获取会员等级信息,id
	GetMemberLevel(ctx context.Context, in *Int32, opts ...grpc.CallOption) (*SMemberLevel, error)
	// * 保存等级
	SaveMemberLevel(ctx context.Context, in *SMemberLevel, opts ...grpc.CallOption) (*Result, error)
	// 根据SIGN获取等级,sign
	GetLevelBySign(ctx context.Context, in *String, opts ...grpc.CallOption) (*SMemberLevel, error)
	// 删除会员等级
	DeleteMemberLevel(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	// 根据会员编号获取会员信息
	GetMember(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SMember, error)
	// 根据用户名获取会员信息
	GetMemberByUser(ctx context.Context, in *String, opts ...grpc.CallOption) (*SMember, error)
	// 根据会员编号获取会员资料
	GetProfile(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SProfile, error)
	// 保存资料
	SaveProfile(ctx context.Context, in *SProfile, opts ...grpc.CallOption) (*Result, error)
	// 获取会员邀请关系
	GetRelation(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*MemberRelationResponse, error)
	// 获取会员绑定银行卡信息
	GetBankCards(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*BankCardListResponse, error)
	// 添加银行卡
	AddBankCard(ctx context.Context, in *BankCardAddRequest, opts ...grpc.CallOption) (*Result, error)
	// 移除绑定的银行卡
	RemoveBankCard(ctx context.Context, in *BankCardUserIdRequest, opts ...grpc.CallOption) (*Result, error)
	// * 激活会员,memberId
	Active(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	// * 锁定,minutes锁定分钟数,默认:-1永久锁定
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*Result, error)
	// * 解锁会员
	Unlock(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	// * 标志赋值, 如果flag小于零, 则异或运算
	GrantFlag(ctx context.Context, in *GrantFlagRequest, opts ...grpc.CallOption) (*Result, error)
	// * 获取会员汇总信息,memberId
	Complex(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SComplexMember, error)
	// * 发送会员验证码消息, 并返回验证码, 验证码通过data.code获取
	SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*Result, error)
	// * 比较验证码是否正确
	CompareCode(ctx context.Context, in *CompareCodeRequest, opts ...grpc.CallOption) (*Result, error)
	// * 获取收款码
	ReceiptsCodes(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SReceiptsCodeListResponse, error)
	// * 保存收款码
	SaveReceiptsCode(ctx context.Context, in *ReceiptsCodeSaveRequest, opts ...grpc.CallOption) (*Result, error)
	// 设置余额优先支付
	SetPayPriority(ctx context.Context, in *PayPriorityRequest, opts ...grpc.CallOption) (*Result, error)
	// 检查资料是否完成
	CheckProfileComplete(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	// * 获取会员等级信息
	MemberLevelInfo(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SMemberLevelInfo, error)
	// 更改会员等级
	UpdateLevel(ctx context.Context, in *UpdateLevelRequest, opts ...grpc.CallOption) (*Result, error)
	// 更改手机号码，不验证手机格式
	ChangePhone(ctx context.Context, in *ChangePhoneRequest, opts ...grpc.CallOption) (*Result, error)
	// 更改用户名
	ChangeUser(ctx context.Context, in *ChangeUserRequest, opts ...grpc.CallOption) (*Result, error)
	// 上传会员头像
	ChangeAvatar(ctx context.Context, in *AvatarRequest, opts ...grpc.CallOption) (*Result, error)
	// * 更改密码
	ModifyPwd(ctx context.Context, in *ModifyPwdRequest, opts ...grpc.CallOption) (*Result, error)
	// * 更改交易密码
	ModifyTradePwd(ctx context.Context, in *ModifyPwdRequest, opts ...grpc.CallOption) (*Result, error)
	// 检查资料是否完善
	CheckProfileCompleted(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Bool, error)
	// * 更改邀请人
	ChangeInviterId(ctx context.Context, in *ChangeInviterRequest, opts ...grpc.CallOption) (*Result, error)
	// * 获取会员的订单状态及其数量
	OrdersQuantity(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*OrderQuantityMapResponse, error)
	// 升级为高级会员
	Premium(ctx context.Context, in *PremiumRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取会员的会员Token,reset表示是否重置token
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*String, error)
	// 检查会员的会话Token是否正确，如正确返回: 1
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*Bool, error)
	// 移除会员的Token,memberId
	RemoveToken(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Empty, error)
	// 获取会员的收货地址,memberId
	GetAddressList(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*AddressListResponse, error)
	// 保存会员的收货地址
	SaveAddress(ctx context.Context, in *SaveAddressRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取地址，如果addrId为0，则返回默认地址
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*SAddress, error)
	// 删除配送地址
	DeleteAddress(ctx context.Context, in *AddressIdRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取会员账户信息,memberId
	GetAccount(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SAccount, error)
	// 判断会员是否由指定会员邀请推荐的
	IsInvitation(ctx context.Context, in *IsInvitationRequest, opts ...grpc.CallOption) (*Bool, error)
	// 获取自己的邀请人会员编号数组
	InviterArray(ctx context.Context, in *DepthRequest, opts ...grpc.CallOption) (*InviterIdListResponse, error)
	// 获取邀请会员的数量
	InviteMembersQuantity(ctx context.Context, in *DepthRequest, opts ...grpc.CallOption) (*Int32, error)
	// 按条件获取荐指定等级会员的数量
	QueryInviteQuantity(ctx context.Context, in *InviteQuantityRequest, opts ...grpc.CallOption) (*Int64, error)
	// 按条件获取荐指定等级会员的列表
	QueryInviteArray(ctx context.Context, in *InviteQuantityRequest, opts ...grpc.CallOption) (*MemberIdListResponse, error)
	// 获取我邀请的会员及会员邀请的人数
	GetMyPagedInvitationMembers(ctx context.Context, in *MemberInvitationPagingRequest, opts ...grpc.CallOption) (*MemberInvitationPagingResponse, error)
	// 账户充值,amount精确到分
	AccountCharge(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*Result, error)
	// 账户消耗,amount精确到分
	AccountConsume(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*Result, error)
	// 账户抵扣,amount精确到分
	AccountDiscount(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*Result, error)
	// 账户退款,amount精确到分
	AccountRefund(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*Result, error)
	// 账户人工调整
	AccountAdjust(ctx context.Context, in *AccountAdjustRequest, opts ...grpc.CallOption) (*Result, error)
	// 转账转账
	AccountTransfer(ctx context.Context, in *AccountTransferRequest, opts ...grpc.CallOption) (*Result, error)
	// 提现并返回提现编号,交易号以及错误信息
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error)
	// 确认提现
	ReviewWithdrawal(ctx context.Context, in *ReviewWithdrawalRequest, opts ...grpc.CallOption) (*Result, error)
	// 收到款项,完成提现
	FinishWithdrawal(ctx context.Context, in *FinishWithdrawalRequest, opts ...grpc.CallOption) (*Result, error)
	// 查询提现记录
	QueryWithdrawalLog(ctx context.Context, in *WithdrawalLogRequest, opts ...grpc.CallOption) (*WithdrawalLogsResponse, error)
	// !银行四要素认证
	B4EAuth(ctx context.Context, in *B4EAuthRequest, opts ...grpc.CallOption) (*Result, error)
	// * 获取指定账户的流水记录
	PagingAccountLog(ctx context.Context, in *PagingAccountInfoRequest, opts ...grpc.CallOption) (*SPagingResult, error)
	// 获取钱包流水记录
	GetWalletLog(ctx context.Context, in *WalletLogRequest, opts ...grpc.CallOption) (*WalletLogResponse, error)
	// 取消收藏
	RemoveFavorite(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Result, error)
	// 收藏商品
	Favorite(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Result, error)
	// 是否已收藏
	IsFavored(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Bool, error)
	// 查询优惠券
	QueryCoupons(ctx context.Context, in *MemberCouponPagingRequest, opts ...grpc.CallOption) (*MemberCouponListResponse, error)
}

type memberServiceClient struct {
	cc *grpc.ClientConn
}

func NewMemberServiceClient(cc *grpc.ClientConn) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) RegisterMemberV2(ctx context.Context, in *RegisterMemberRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/RegisterMemberV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CheckLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/CheckLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) VerifyTradePwd(ctx context.Context, in *CheckTradePwdRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/VerifyTradePwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SwapMemberId(ctx context.Context, in *SwapMemberRequest, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/MemberService/SwapMemberId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetLevels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SMemberLevelListResponse, error) {
	out := new(SMemberLevelListResponse)
	err := c.cc.Invoke(ctx, "/MemberService/GetLevels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetTrustInfo(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*STrustedInfo, error) {
	out := new(STrustedInfo)
	err := c.cc.Invoke(ctx, "/MemberService/GetTrustInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SubmitTrustInfo(ctx context.Context, in *SubmitTrustInfoRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/SubmitTrustInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ReviewTrustedInfo(ctx context.Context, in *ReviewTrustInfoRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ReviewTrustedInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetMemberLevel(ctx context.Context, in *Int32, opts ...grpc.CallOption) (*SMemberLevel, error) {
	out := new(SMemberLevel)
	err := c.cc.Invoke(ctx, "/MemberService/GetMemberLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SaveMemberLevel(ctx context.Context, in *SMemberLevel, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/SaveMemberLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetLevelBySign(ctx context.Context, in *String, opts ...grpc.CallOption) (*SMemberLevel, error) {
	out := new(SMemberLevel)
	err := c.cc.Invoke(ctx, "/MemberService/GetLevelBySign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DeleteMemberLevel(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/DeleteMemberLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetMember(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SMember, error) {
	out := new(SMember)
	err := c.cc.Invoke(ctx, "/MemberService/GetMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetMemberByUser(ctx context.Context, in *String, opts ...grpc.CallOption) (*SMember, error) {
	out := new(SMember)
	err := c.cc.Invoke(ctx, "/MemberService/GetMemberByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetProfile(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SProfile, error) {
	out := new(SProfile)
	err := c.cc.Invoke(ctx, "/MemberService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SaveProfile(ctx context.Context, in *SProfile, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/SaveProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetRelation(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*MemberRelationResponse, error) {
	out := new(MemberRelationResponse)
	err := c.cc.Invoke(ctx, "/MemberService/GetRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetBankCards(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*BankCardListResponse, error) {
	out := new(BankCardListResponse)
	err := c.cc.Invoke(ctx, "/MemberService/GetBankCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AddBankCard(ctx context.Context, in *BankCardAddRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/AddBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) RemoveBankCard(ctx context.Context, in *BankCardUserIdRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/RemoveBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Active(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/Active", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Unlock(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GrantFlag(ctx context.Context, in *GrantFlagRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/GrantFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Complex(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SComplexMember, error) {
	out := new(SComplexMember)
	err := c.cc.Invoke(ctx, "/MemberService/Complex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/SendCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CompareCode(ctx context.Context, in *CompareCodeRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/CompareCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ReceiptsCodes(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SReceiptsCodeListResponse, error) {
	out := new(SReceiptsCodeListResponse)
	err := c.cc.Invoke(ctx, "/MemberService/ReceiptsCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SaveReceiptsCode(ctx context.Context, in *ReceiptsCodeSaveRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/SaveReceiptsCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SetPayPriority(ctx context.Context, in *PayPriorityRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/SetPayPriority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CheckProfileComplete(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/CheckProfileComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberLevelInfo(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SMemberLevelInfo, error) {
	out := new(SMemberLevelInfo)
	err := c.cc.Invoke(ctx, "/MemberService/MemberLevelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UpdateLevel(ctx context.Context, in *UpdateLevelRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/UpdateLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangePhone(ctx context.Context, in *ChangePhoneRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ChangePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangeUser(ctx context.Context, in *ChangeUserRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ChangeUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangeAvatar(ctx context.Context, in *AvatarRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ChangeAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ModifyPwd(ctx context.Context, in *ModifyPwdRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ModifyPwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ModifyTradePwd(ctx context.Context, in *ModifyPwdRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ModifyTradePwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CheckProfileCompleted(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/MemberService/CheckProfileCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangeInviterId(ctx context.Context, in *ChangeInviterRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ChangeInviterId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) OrdersQuantity(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*OrderQuantityMapResponse, error) {
	out := new(OrderQuantityMapResponse)
	err := c.cc.Invoke(ctx, "/MemberService/OrdersQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Premium(ctx context.Context, in *PremiumRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/Premium", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/MemberService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/MemberService/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) RemoveToken(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/MemberService/RemoveToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetAddressList(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*AddressListResponse, error) {
	out := new(AddressListResponse)
	err := c.cc.Invoke(ctx, "/MemberService/GetAddressList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SaveAddress(ctx context.Context, in *SaveAddressRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/SaveAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*SAddress, error) {
	out := new(SAddress)
	err := c.cc.Invoke(ctx, "/MemberService/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DeleteAddress(ctx context.Context, in *AddressIdRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/DeleteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetAccount(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SAccount, error) {
	out := new(SAccount)
	err := c.cc.Invoke(ctx, "/MemberService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) IsInvitation(ctx context.Context, in *IsInvitationRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/MemberService/IsInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) InviterArray(ctx context.Context, in *DepthRequest, opts ...grpc.CallOption) (*InviterIdListResponse, error) {
	out := new(InviterIdListResponse)
	err := c.cc.Invoke(ctx, "/MemberService/InviterArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) InviteMembersQuantity(ctx context.Context, in *DepthRequest, opts ...grpc.CallOption) (*Int32, error) {
	out := new(Int32)
	err := c.cc.Invoke(ctx, "/MemberService/InviteMembersQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) QueryInviteQuantity(ctx context.Context, in *InviteQuantityRequest, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/MemberService/QueryInviteQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) QueryInviteArray(ctx context.Context, in *InviteQuantityRequest, opts ...grpc.CallOption) (*MemberIdListResponse, error) {
	out := new(MemberIdListResponse)
	err := c.cc.Invoke(ctx, "/MemberService/QueryInviteArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetMyPagedInvitationMembers(ctx context.Context, in *MemberInvitationPagingRequest, opts ...grpc.CallOption) (*MemberInvitationPagingResponse, error) {
	out := new(MemberInvitationPagingResponse)
	err := c.cc.Invoke(ctx, "/MemberService/GetMyPagedInvitationMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountCharge(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/AccountCharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountConsume(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/AccountConsume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountDiscount(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/AccountDiscount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountRefund(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/AccountRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountAdjust(ctx context.Context, in *AccountAdjustRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/AccountAdjust", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountTransfer(ctx context.Context, in *AccountTransferRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/AccountTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error) {
	out := new(WithdrawalResponse)
	err := c.cc.Invoke(ctx, "/MemberService/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ReviewWithdrawal(ctx context.Context, in *ReviewWithdrawalRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ReviewWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) FinishWithdrawal(ctx context.Context, in *FinishWithdrawalRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/FinishWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) QueryWithdrawalLog(ctx context.Context, in *WithdrawalLogRequest, opts ...grpc.CallOption) (*WithdrawalLogsResponse, error) {
	out := new(WithdrawalLogsResponse)
	err := c.cc.Invoke(ctx, "/MemberService/QueryWithdrawalLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) B4EAuth(ctx context.Context, in *B4EAuthRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/B4EAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) PagingAccountLog(ctx context.Context, in *PagingAccountInfoRequest, opts ...grpc.CallOption) (*SPagingResult, error) {
	out := new(SPagingResult)
	err := c.cc.Invoke(ctx, "/MemberService/PagingAccountLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetWalletLog(ctx context.Context, in *WalletLogRequest, opts ...grpc.CallOption) (*WalletLogResponse, error) {
	out := new(WalletLogResponse)
	err := c.cc.Invoke(ctx, "/MemberService/GetWalletLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) RemoveFavorite(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/RemoveFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Favorite(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/Favorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) IsFavored(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/MemberService/IsFavored", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) QueryCoupons(ctx context.Context, in *MemberCouponPagingRequest, opts ...grpc.CallOption) (*MemberCouponListResponse, error) {
	out := new(MemberCouponListResponse)
	err := c.cc.Invoke(ctx, "/MemberService/QueryCoupons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServiceServer is the server API for MemberService service.
type MemberServiceServer interface {
	// *
	// 注册会员
	// @param user 登陆用户名
	// @param pwd 登陆密码,md5运算后的字符串
	// @param flag 用户自定义标志
	// @param phone 手机号码
	// @param email 邮箱
	// @param avatar 头像
	// @param extend 扩展数据
	// @return 注册结果，返回user_code
	RegisterMemberV2(context.Context, *RegisterMemberRequest) (*Result, error)
	// 登录，返回结果(Result)和会员编号(Id);
	// Result值为：-1:会员不存在; -2:账号密码不正确; -3:账号被停用
	CheckLogin(context.Context, *LoginRequest) (*Result, error)
	// * 验证交易密码
	VerifyTradePwd(context.Context, *CheckTradePwdRequest) (*Result, error)
	// * 交换会员编号
	SwapMemberId(context.Context, *SwapMemberRequest) (*Int64, error)
	// * 等级列表
	GetLevels(context.Context, *Empty) (*SMemberLevelListResponse, error)
	// 获取实名信息,memberId
	GetTrustInfo(context.Context, *Int64) (*STrustedInfo, error)
	// * 提交实名信息
	SubmitTrustInfo(context.Context, *SubmitTrustInfoRequest) (*Result, error)
	// * 审核实名认证,若重复审核将返回错误 *
	ReviewTrustedInfo(context.Context, *ReviewTrustInfoRequest) (*Result, error)
	// * 获取会员等级信息,id
	GetMemberLevel(context.Context, *Int32) (*SMemberLevel, error)
	// * 保存等级
	SaveMemberLevel(context.Context, *SMemberLevel) (*Result, error)
	// 根据SIGN获取等级,sign
	GetLevelBySign(context.Context, *String) (*SMemberLevel, error)
	// 删除会员等级
	DeleteMemberLevel(context.Context, *Int64) (*Result, error)
	// 根据会员编号获取会员信息
	GetMember(context.Context, *Int64) (*SMember, error)
	// 根据用户名获取会员信息
	GetMemberByUser(context.Context, *String) (*SMember, error)
	// 根据会员编号获取会员资料
	GetProfile(context.Context, *Int64) (*SProfile, error)
	// 保存资料
	SaveProfile(context.Context, *SProfile) (*Result, error)
	// 获取会员邀请关系
	GetRelation(context.Context, *Int64) (*MemberRelationResponse, error)
	// 获取会员绑定银行卡信息
	GetBankCards(context.Context, *Int64) (*BankCardListResponse, error)
	// 添加银行卡
	AddBankCard(context.Context, *BankCardAddRequest) (*Result, error)
	// 移除绑定的银行卡
	RemoveBankCard(context.Context, *BankCardUserIdRequest) (*Result, error)
	// * 激活会员,memberId
	Active(context.Context, *Int64) (*Result, error)
	// * 锁定,minutes锁定分钟数,默认:-1永久锁定
	Lock(context.Context, *LockRequest) (*Result, error)
	// * 解锁会员
	Unlock(context.Context, *Int64) (*Result, error)
	// * 标志赋值, 如果flag小于零, 则异或运算
	GrantFlag(context.Context, *GrantFlagRequest) (*Result, error)
	// * 获取会员汇总信息,memberId
	Complex(context.Context, *Int64) (*SComplexMember, error)
	// * 发送会员验证码消息, 并返回验证码, 验证码通过data.code获取
	SendCode(context.Context, *SendCodeRequest) (*Result, error)
	// * 比较验证码是否正确
	CompareCode(context.Context, *CompareCodeRequest) (*Result, error)
	// * 获取收款码
	ReceiptsCodes(context.Context, *Int64) (*SReceiptsCodeListResponse, error)
	// * 保存收款码
	SaveReceiptsCode(context.Context, *ReceiptsCodeSaveRequest) (*Result, error)
	// 设置余额优先支付
	SetPayPriority(context.Context, *PayPriorityRequest) (*Result, error)
	// 检查资料是否完成
	CheckProfileComplete(context.Context, *Int64) (*Result, error)
	// * 获取会员等级信息
	MemberLevelInfo(context.Context, *Int64) (*SMemberLevelInfo, error)
	// 更改会员等级
	UpdateLevel(context.Context, *UpdateLevelRequest) (*Result, error)
	// 更改手机号码，不验证手机格式
	ChangePhone(context.Context, *ChangePhoneRequest) (*Result, error)
	// 更改用户名
	ChangeUser(context.Context, *ChangeUserRequest) (*Result, error)
	// 上传会员头像
	ChangeAvatar(context.Context, *AvatarRequest) (*Result, error)
	// * 更改密码
	ModifyPwd(context.Context, *ModifyPwdRequest) (*Result, error)
	// * 更改交易密码
	ModifyTradePwd(context.Context, *ModifyPwdRequest) (*Result, error)
	// 检查资料是否完善
	CheckProfileCompleted(context.Context, *Int64) (*Bool, error)
	// * 更改邀请人
	ChangeInviterId(context.Context, *ChangeInviterRequest) (*Result, error)
	// * 获取会员的订单状态及其数量
	OrdersQuantity(context.Context, *Int64) (*OrderQuantityMapResponse, error)
	// 升级为高级会员
	Premium(context.Context, *PremiumRequest) (*Result, error)
	// 获取会员的会员Token,reset表示是否重置token
	GetToken(context.Context, *GetTokenRequest) (*String, error)
	// 检查会员的会话Token是否正确，如正确返回: 1
	CheckToken(context.Context, *CheckTokenRequest) (*Bool, error)
	// 移除会员的Token,memberId
	RemoveToken(context.Context, *Int64) (*Empty, error)
	// 获取会员的收货地址,memberId
	GetAddressList(context.Context, *Int64) (*AddressListResponse, error)
	// 保存会员的收货地址
	SaveAddress(context.Context, *SaveAddressRequest) (*Result, error)
	// 获取地址，如果addrId为0，则返回默认地址
	GetAddress(context.Context, *GetAddressRequest) (*SAddress, error)
	// 删除配送地址
	DeleteAddress(context.Context, *AddressIdRequest) (*Result, error)
	// 获取会员账户信息,memberId
	GetAccount(context.Context, *Int64) (*SAccount, error)
	// 判断会员是否由指定会员邀请推荐的
	IsInvitation(context.Context, *IsInvitationRequest) (*Bool, error)
	// 获取自己的邀请人会员编号数组
	InviterArray(context.Context, *DepthRequest) (*InviterIdListResponse, error)
	// 获取邀请会员的数量
	InviteMembersQuantity(context.Context, *DepthRequest) (*Int32, error)
	// 按条件获取荐指定等级会员的数量
	QueryInviteQuantity(context.Context, *InviteQuantityRequest) (*Int64, error)
	// 按条件获取荐指定等级会员的列表
	QueryInviteArray(context.Context, *InviteQuantityRequest) (*MemberIdListResponse, error)
	// 获取我邀请的会员及会员邀请的人数
	GetMyPagedInvitationMembers(context.Context, *MemberInvitationPagingRequest) (*MemberInvitationPagingResponse, error)
	// 账户充值,amount精确到分
	AccountCharge(context.Context, *AccountChangeRequest) (*Result, error)
	// 账户消耗,amount精确到分
	AccountConsume(context.Context, *AccountChangeRequest) (*Result, error)
	// 账户抵扣,amount精确到分
	AccountDiscount(context.Context, *AccountChangeRequest) (*Result, error)
	// 账户退款,amount精确到分
	AccountRefund(context.Context, *AccountChangeRequest) (*Result, error)
	// 账户人工调整
	AccountAdjust(context.Context, *AccountAdjustRequest) (*Result, error)
	// 转账转账
	AccountTransfer(context.Context, *AccountTransferRequest) (*Result, error)
	// 提现并返回提现编号,交易号以及错误信息
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawalResponse, error)
	// 确认提现
	ReviewWithdrawal(context.Context, *ReviewWithdrawalRequest) (*Result, error)
	// 收到款项,完成提现
	FinishWithdrawal(context.Context, *FinishWithdrawalRequest) (*Result, error)
	// 查询提现记录
	QueryWithdrawalLog(context.Context, *WithdrawalLogRequest) (*WithdrawalLogsResponse, error)
	// !银行四要素认证
	B4EAuth(context.Context, *B4EAuthRequest) (*Result, error)
	// * 获取指定账户的流水记录
	PagingAccountLog(context.Context, *PagingAccountInfoRequest) (*SPagingResult, error)
	// 获取钱包流水记录
	GetWalletLog(context.Context, *WalletLogRequest) (*WalletLogResponse, error)
	// 取消收藏
	RemoveFavorite(context.Context, *FavoriteRequest) (*Result, error)
	// 收藏商品
	Favorite(context.Context, *FavoriteRequest) (*Result, error)
	// 是否已收藏
	IsFavored(context.Context, *FavoriteRequest) (*Bool, error)
	// 查询优惠券
	QueryCoupons(context.Context, *MemberCouponPagingRequest) (*MemberCouponListResponse, error)
}

func RegisterMemberServiceServer(s *grpc.Server, srv MemberServiceServer) {
	s.RegisterService(&_MemberService_serviceDesc, srv)
}

func _MemberService_RegisterMemberV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).RegisterMemberV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/RegisterMemberV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).RegisterMemberV2(ctx, req.(*RegisterMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/CheckLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CheckLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_VerifyTradePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTradePwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).VerifyTradePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/VerifyTradePwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).VerifyTradePwd(ctx, req.(*CheckTradePwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SwapMemberId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SwapMemberId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/SwapMemberId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SwapMemberId(ctx, req.(*SwapMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetLevels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetLevels(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetTrustInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetTrustInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetTrustInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetTrustInfo(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SubmitTrustInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTrustInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SubmitTrustInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/SubmitTrustInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SubmitTrustInfo(ctx, req.(*SubmitTrustInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ReviewTrustedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewTrustInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ReviewTrustedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ReviewTrustedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ReviewTrustedInfo(ctx, req.(*ReviewTrustInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int32)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetMemberLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetMemberLevel(ctx, req.(*Int32))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SaveMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMemberLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SaveMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/SaveMemberLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SaveMemberLevel(ctx, req.(*SMemberLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetLevelBySign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetLevelBySign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetLevelBySign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetLevelBySign(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DeleteMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DeleteMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/DeleteMemberLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DeleteMemberLevel(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetMember(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetMemberByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetMemberByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetMemberByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetMemberByUser(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetProfile(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SaveProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SaveProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/SaveProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SaveProfile(ctx, req.(*SProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetRelation(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetBankCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetBankCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetBankCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetBankCards(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AddBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AddBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/AddBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AddBankCard(ctx, req.(*BankCardAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_RemoveBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardUserIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).RemoveBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/RemoveBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).RemoveBankCard(ctx, req.(*BankCardUserIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Active_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Active(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Active",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Active(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Unlock(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GrantFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GrantFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GrantFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GrantFlag(ctx, req.(*GrantFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Complex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Complex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Complex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Complex(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/SendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SendCode(ctx, req.(*SendCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CompareCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CompareCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/CompareCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CompareCode(ctx, req.(*CompareCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ReceiptsCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ReceiptsCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ReceiptsCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ReceiptsCodes(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SaveReceiptsCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiptsCodeSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SaveReceiptsCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/SaveReceiptsCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SaveReceiptsCode(ctx, req.(*ReceiptsCodeSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SetPayPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayPriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SetPayPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/SetPayPriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SetPayPriority(ctx, req.(*PayPriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CheckProfileComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CheckProfileComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/CheckProfileComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CheckProfileComplete(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberLevelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberLevelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/MemberLevelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberLevelInfo(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UpdateLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UpdateLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/UpdateLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UpdateLevel(ctx, req.(*UpdateLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangePhone(ctx, req.(*ChangePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ChangeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangeUser(ctx, req.(*ChangeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangeAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangeAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ChangeAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangeAvatar(ctx, req.(*AvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ModifyPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ModifyPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ModifyPwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ModifyPwd(ctx, req.(*ModifyPwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ModifyTradePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ModifyTradePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ModifyTradePwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ModifyTradePwd(ctx, req.(*ModifyPwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CheckProfileCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CheckProfileCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/CheckProfileCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CheckProfileCompleted(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangeInviterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeInviterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangeInviterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ChangeInviterId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangeInviterId(ctx, req.(*ChangeInviterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_OrdersQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).OrdersQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/OrdersQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).OrdersQuantity(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Premium_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PremiumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Premium(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Premium",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Premium(ctx, req.(*PremiumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_RemoveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).RemoveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/RemoveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).RemoveToken(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetAddressList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetAddressList(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SaveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SaveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/SaveAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SaveAddress(ctx, req.(*SaveAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/DeleteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DeleteAddress(ctx, req.(*AddressIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetAccount(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_IsInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).IsInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/IsInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).IsInvitation(ctx, req.(*IsInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_InviterArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).InviterArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/InviterArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).InviterArray(ctx, req.(*DepthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_InviteMembersQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).InviteMembersQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/InviteMembersQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).InviteMembersQuantity(ctx, req.(*DepthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_QueryInviteQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).QueryInviteQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/QueryInviteQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).QueryInviteQuantity(ctx, req.(*InviteQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_QueryInviteArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).QueryInviteArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/QueryInviteArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).QueryInviteArray(ctx, req.(*InviteQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetMyPagedInvitationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberInvitationPagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetMyPagedInvitationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetMyPagedInvitationMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetMyPagedInvitationMembers(ctx, req.(*MemberInvitationPagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/AccountCharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountCharge(ctx, req.(*AccountChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountConsume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountConsume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/AccountConsume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountConsume(ctx, req.(*AccountChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/AccountDiscount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountDiscount(ctx, req.(*AccountChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/AccountRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountRefund(ctx, req.(*AccountChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountAdjust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountAdjustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountAdjust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/AccountAdjust",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountAdjust(ctx, req.(*AccountAdjustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/AccountTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountTransfer(ctx, req.(*AccountTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ReviewWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ReviewWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ReviewWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ReviewWithdrawal(ctx, req.(*ReviewWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_FinishWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).FinishWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/FinishWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).FinishWithdrawal(ctx, req.(*FinishWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_QueryWithdrawalLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).QueryWithdrawalLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/QueryWithdrawalLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).QueryWithdrawalLog(ctx, req.(*WithdrawalLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_B4EAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(B4EAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).B4EAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/B4EAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).B4EAuth(ctx, req.(*B4EAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_PagingAccountLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagingAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).PagingAccountLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/PagingAccountLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).PagingAccountLog(ctx, req.(*PagingAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetWalletLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetWalletLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetWalletLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetWalletLog(ctx, req.(*WalletLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_RemoveFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).RemoveFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/RemoveFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).RemoveFavorite(ctx, req.(*FavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Favorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Favorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Favorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Favorite(ctx, req.(*FavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_IsFavored_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).IsFavored(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/IsFavored",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).IsFavored(ctx, req.(*FavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_QueryCoupons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberCouponPagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).QueryCoupons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/QueryCoupons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).QueryCoupons(ctx, req.(*MemberCouponPagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MemberService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMemberV2",
			Handler:    _MemberService_RegisterMemberV2_Handler,
		},
		{
			MethodName: "CheckLogin",
			Handler:    _MemberService_CheckLogin_Handler,
		},
		{
			MethodName: "VerifyTradePwd",
			Handler:    _MemberService_VerifyTradePwd_Handler,
		},
		{
			MethodName: "SwapMemberId",
			Handler:    _MemberService_SwapMemberId_Handler,
		},
		{
			MethodName: "GetLevels",
			Handler:    _MemberService_GetLevels_Handler,
		},
		{
			MethodName: "GetTrustInfo",
			Handler:    _MemberService_GetTrustInfo_Handler,
		},
		{
			MethodName: "SubmitTrustInfo",
			Handler:    _MemberService_SubmitTrustInfo_Handler,
		},
		{
			MethodName: "ReviewTrustedInfo",
			Handler:    _MemberService_ReviewTrustedInfo_Handler,
		},
		{
			MethodName: "GetMemberLevel",
			Handler:    _MemberService_GetMemberLevel_Handler,
		},
		{
			MethodName: "SaveMemberLevel",
			Handler:    _MemberService_SaveMemberLevel_Handler,
		},
		{
			MethodName: "GetLevelBySign",
			Handler:    _MemberService_GetLevelBySign_Handler,
		},
		{
			MethodName: "DeleteMemberLevel",
			Handler:    _MemberService_DeleteMemberLevel_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _MemberService_GetMember_Handler,
		},
		{
			MethodName: "GetMemberByUser",
			Handler:    _MemberService_GetMemberByUser_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _MemberService_GetProfile_Handler,
		},
		{
			MethodName: "SaveProfile",
			Handler:    _MemberService_SaveProfile_Handler,
		},
		{
			MethodName: "GetRelation",
			Handler:    _MemberService_GetRelation_Handler,
		},
		{
			MethodName: "GetBankCards",
			Handler:    _MemberService_GetBankCards_Handler,
		},
		{
			MethodName: "AddBankCard",
			Handler:    _MemberService_AddBankCard_Handler,
		},
		{
			MethodName: "RemoveBankCard",
			Handler:    _MemberService_RemoveBankCard_Handler,
		},
		{
			MethodName: "Active",
			Handler:    _MemberService_Active_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _MemberService_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _MemberService_Unlock_Handler,
		},
		{
			MethodName: "GrantFlag",
			Handler:    _MemberService_GrantFlag_Handler,
		},
		{
			MethodName: "Complex",
			Handler:    _MemberService_Complex_Handler,
		},
		{
			MethodName: "SendCode",
			Handler:    _MemberService_SendCode_Handler,
		},
		{
			MethodName: "CompareCode",
			Handler:    _MemberService_CompareCode_Handler,
		},
		{
			MethodName: "ReceiptsCodes",
			Handler:    _MemberService_ReceiptsCodes_Handler,
		},
		{
			MethodName: "SaveReceiptsCode",
			Handler:    _MemberService_SaveReceiptsCode_Handler,
		},
		{
			MethodName: "SetPayPriority",
			Handler:    _MemberService_SetPayPriority_Handler,
		},
		{
			MethodName: "CheckProfileComplete",
			Handler:    _MemberService_CheckProfileComplete_Handler,
		},
		{
			MethodName: "MemberLevelInfo",
			Handler:    _MemberService_MemberLevelInfo_Handler,
		},
		{
			MethodName: "UpdateLevel",
			Handler:    _MemberService_UpdateLevel_Handler,
		},
		{
			MethodName: "ChangePhone",
			Handler:    _MemberService_ChangePhone_Handler,
		},
		{
			MethodName: "ChangeUser",
			Handler:    _MemberService_ChangeUser_Handler,
		},
		{
			MethodName: "ChangeAvatar",
			Handler:    _MemberService_ChangeAvatar_Handler,
		},
		{
			MethodName: "ModifyPwd",
			Handler:    _MemberService_ModifyPwd_Handler,
		},
		{
			MethodName: "ModifyTradePwd",
			Handler:    _MemberService_ModifyTradePwd_Handler,
		},
		{
			MethodName: "CheckProfileCompleted",
			Handler:    _MemberService_CheckProfileCompleted_Handler,
		},
		{
			MethodName: "ChangeInviterId",
			Handler:    _MemberService_ChangeInviterId_Handler,
		},
		{
			MethodName: "OrdersQuantity",
			Handler:    _MemberService_OrdersQuantity_Handler,
		},
		{
			MethodName: "Premium",
			Handler:    _MemberService_Premium_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _MemberService_GetToken_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _MemberService_CheckToken_Handler,
		},
		{
			MethodName: "RemoveToken",
			Handler:    _MemberService_RemoveToken_Handler,
		},
		{
			MethodName: "GetAddressList",
			Handler:    _MemberService_GetAddressList_Handler,
		},
		{
			MethodName: "SaveAddress",
			Handler:    _MemberService_SaveAddress_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _MemberService_GetAddress_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _MemberService_DeleteAddress_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _MemberService_GetAccount_Handler,
		},
		{
			MethodName: "IsInvitation",
			Handler:    _MemberService_IsInvitation_Handler,
		},
		{
			MethodName: "InviterArray",
			Handler:    _MemberService_InviterArray_Handler,
		},
		{
			MethodName: "InviteMembersQuantity",
			Handler:    _MemberService_InviteMembersQuantity_Handler,
		},
		{
			MethodName: "QueryInviteQuantity",
			Handler:    _MemberService_QueryInviteQuantity_Handler,
		},
		{
			MethodName: "QueryInviteArray",
			Handler:    _MemberService_QueryInviteArray_Handler,
		},
		{
			MethodName: "GetMyPagedInvitationMembers",
			Handler:    _MemberService_GetMyPagedInvitationMembers_Handler,
		},
		{
			MethodName: "AccountCharge",
			Handler:    _MemberService_AccountCharge_Handler,
		},
		{
			MethodName: "AccountConsume",
			Handler:    _MemberService_AccountConsume_Handler,
		},
		{
			MethodName: "AccountDiscount",
			Handler:    _MemberService_AccountDiscount_Handler,
		},
		{
			MethodName: "AccountRefund",
			Handler:    _MemberService_AccountRefund_Handler,
		},
		{
			MethodName: "AccountAdjust",
			Handler:    _MemberService_AccountAdjust_Handler,
		},
		{
			MethodName: "AccountTransfer",
			Handler:    _MemberService_AccountTransfer_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _MemberService_Withdraw_Handler,
		},
		{
			MethodName: "ReviewWithdrawal",
			Handler:    _MemberService_ReviewWithdrawal_Handler,
		},
		{
			MethodName: "FinishWithdrawal",
			Handler:    _MemberService_FinishWithdrawal_Handler,
		},
		{
			MethodName: "QueryWithdrawalLog",
			Handler:    _MemberService_QueryWithdrawalLog_Handler,
		},
		{
			MethodName: "B4EAuth",
			Handler:    _MemberService_B4EAuth_Handler,
		},
		{
			MethodName: "PagingAccountLog",
			Handler:    _MemberService_PagingAccountLog_Handler,
		},
		{
			MethodName: "GetWalletLog",
			Handler:    _MemberService_GetWalletLog_Handler,
		},
		{
			MethodName: "RemoveFavorite",
			Handler:    _MemberService_RemoveFavorite_Handler,
		},
		{
			MethodName: "Favorite",
			Handler:    _MemberService_Favorite_Handler,
		},
		{
			MethodName: "IsFavored",
			Handler:    _MemberService_IsFavored_Handler,
		},
		{
			MethodName: "QueryCoupons",
			Handler:    _MemberService_QueryCoupons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "member_service.proto",
}

func init() {
	proto.RegisterFile("member_service.proto", fileDescriptor_member_service_225f9284372c9226)
}

var fileDescriptor_member_service_225f9284372c9226 = []byte{
	// 1471 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0x6d, 0x53, 0xdb, 0x48,
	0x12, 0x36, 0x90, 0x00, 0x6e, 0xfc, 0x3a, 0x60, 0x5e, 0x9c, 0xaa, 0x0b, 0xe7, 0xbb, 0x4b, 0xc8,
	0x0b, 0x93, 0x04, 0x48, 0xb8, 0xba, 0xfb, 0x70, 0x67, 0x20, 0xb8, 0xa8, 0x22, 0x75, 0x8e, 0x04,
	0x49, 0xd5, 0x7d, 0xb9, 0x1b, 0x50, 0x63, 0x6b, 0xb1, 0x25, 0xaf, 0x34, 0x32, 0xab, 0xfd, 0x39,
	0xfb, 0x87, 0xf6, 0x2f, 0x6d, 0x69, 0x46, 0x23, 0x8d, 0xcc, 0xb0, 0xc9, 0x7e, 0xf2, 0xf4, 0xd3,
	0x4f, 0xf7, 0xb4, 0x7a, 0x7a, 0x7a, 0xda, 0xb0, 0x36, 0xc6, 0xf1, 0x15, 0x06, 0xff, 0x0b, 0x31,
	0x98, 0xba, 0xd7, 0x48, 0x27, 0x81, 0xcf, 0xfd, 0x76, 0x65, 0x30, 0xf2, 0xaf, 0xd8, 0x28, 0x95,
	0xc8, 0x18, 0xc3, 0x90, 0x0d, 0xf0, 0xcd, 0x15, 0xf3, 0x6e, 0x53, 0x6c, 0x4d, 0x61, 0xd2, 0x3e,
	0x45, 0x5b, 0x0a, 0x9d, 0xb0, 0x78, 0x8c, 0x1e, 0x97, 0x70, 0xe7, 0x67, 0xa8, 0x9f, 0xb2, 0xa9,
	0x1f, 0xb8, 0x1c, 0x2d, 0xfc, 0x31, 0xc2, 0x90, 0x93, 0x36, 0x2c, 0x7f, 0x12, 0x96, 0x67, 0xce,
	0xe6, 0xdc, 0xf6, 0xdc, 0x0e, 0xb1, 0x32, 0x99, 0xbc, 0x83, 0x8a, 0xa2, 0x5f, 0xc4, 0x13, 0xdc,
	0x9c, 0xdf, 0x9e, 0xdb, 0xa9, 0xed, 0x55, 0xa9, 0x0e, 0x5a, 0x05, 0x0a, 0xd9, 0x84, 0x25, 0x0b,
	0x6f, 0x84, 0xb7, 0x05, 0xe1, 0x4d, 0x89, 0x9d, 0x7f, 0x43, 0xe5, 0x04, 0x27, 0x7c, 0xa8, 0x6d,
	0x3c, 0x9e, 0xd9, 0x58, 0xc9, 0x64, 0x0d, 0x1e, 0x3b, 0x09, 0x57, 0xec, 0xd8, 0xb4, 0xa4, 0xd0,
	0xd9, 0x85, 0xd6, 0x99, 0x37, 0x75, 0x79, 0x42, 0x39, 0x77, 0x43, 0x6e, 0x61, 0x38, 0xf1, 0xbd,
	0x10, 0x13, 0xfa, 0x17, 0x36, 0x8a, 0x70, 0x73, 0x6e, 0x7b, 0x61, 0x87, 0x58, 0x52, 0xe8, 0xfc,
	0x32, 0xa7, 0xf8, 0x9f, 0x23, 0xe6, 0x71, 0x97, 0xc7, 0xdf, 0xb3, 0xf5, 0x01, 0x3c, 0x72, 0x18,
	0x67, 0x9b, 0xf3, 0xdb, 0x0b, 0x3b, 0x2b, 0x7b, 0xdb, 0xd4, 0xe8, 0x81, 0x9e, 0x30, 0xce, 0x3e,
	0x7a, 0x3c, 0x88, 0x2d, 0xc1, 0x6e, 0x1f, 0x42, 0x39, 0x83, 0x48, 0x03, 0x16, 0x6e, 0x31, 0x16,
	0x9e, 0xcb, 0x56, 0xb2, 0x4c, 0x02, 0x9c, 0x8a, 0x00, 0xe7, 0x05, 0x26, 0x85, 0x7f, 0xcc, 0xff,
	0x7d, 0xae, 0xf3, 0x1a, 0xd6, 0x54, 0xba, 0xbf, 0xfd, 0x49, 0x2f, 0xdf, 0x14, 0x0f, 0x84, 0x00,
	0x2c, 0x5e, 0x7a, 0x51, 0x88, 0x4e, 0xa3, 0x44, 0x96, 0xe1, 0x91, 0x3d, 0xf4, 0x27, 0x8d, 0x39,
	0x52, 0x86, 0xc7, 0x3d, 0xdf, 0x77, 0xc2, 0xc6, 0xfc, 0xde, 0xaf, 0x4f, 0xa0, 0x2a, 0xfd, 0xdb,
	0xb2, 0xae, 0xc8, 0x7b, 0x68, 0x58, 0x38, 0x70, 0x43, 0x8e, 0x81, 0x54, 0x7c, 0xd9, 0x23, 0xeb,
	0xb4, 0x08, 0xa5, 0x5f, 0xd9, 0x5e, 0xa2, 0x16, 0x86, 0xd1, 0x88, 0x77, 0x4a, 0xe4, 0x19, 0xc0,
	0xf1, 0x10, 0xaf, 0x6f, 0xcf, 0xfd, 0x81, 0xeb, 0x91, 0x2a, 0x15, 0xbf, 0x06, 0xde, 0x1e, 0xd4,
	0xbe, 0x60, 0xe0, 0xde, 0xc4, 0x17, 0x01, 0x73, 0xb0, 0x7f, 0xe7, 0x90, 0x16, 0x15, 0x86, 0x4a,
	0x36, 0xd8, 0xbc, 0x86, 0x8a, 0x7d, 0xc7, 0x26, 0x59, 0xd9, 0x11, 0x9a, 0x8b, 0x8a, 0xbe, 0x48,
	0xcf, 0x3c, 0xfe, 0xe1, 0xa0, 0x53, 0x22, 0x6f, 0xa1, 0xdc, 0x43, 0x7e, 0x8e, 0x53, 0x1c, 0x85,
	0x64, 0x91, 0x7e, 0x1c, 0x4f, 0x78, 0xdc, 0xde, 0xa2, 0xb6, 0xe4, 0x0b, 0x5c, 0xcf, 0x64, 0xa7,
	0x44, 0x9e, 0x43, 0xa5, 0x87, 0xfc, 0x22, 0x88, 0x42, 0x7e, 0xe6, 0xdd, 0xf8, 0x24, 0xf5, 0xd5,
	0xae, 0x52, 0x5b, 0x80, 0xe8, 0x24, 0x70, 0xa7, 0x44, 0xde, 0x43, 0xdd, 0x8e, 0xae, 0xc6, 0xae,
	0xc6, 0xdd, 0xa0, 0x33, 0x88, 0x21, 0xfe, 0x43, 0x68, 0x5a, 0x38, 0x75, 0xf1, 0x4e, 0xf3, 0x46,
	0x36, 0xa8, 0x86, 0x3d, 0x60, 0xf8, 0x02, 0x6a, 0x3d, 0xe4, 0x5a, 0xe0, 0x32, 0xb4, 0xfd, 0xbd,
	0x24, 0x34, 0x0d, 0xee, 0x94, 0xc8, 0x2b, 0xa8, 0xdb, 0x6c, 0x8a, 0x3a, 0xb7, 0xc8, 0xd1, 0xfd,
	0xbe, 0x14, 0x7e, 0x05, 0x7c, 0x14, 0xdb, 0xee, 0xc0, 0x23, 0x4b, 0xd4, 0xe6, 0x81, 0xeb, 0x0d,
	0xee, 0x3b, 0x7e, 0x06, 0xcd, 0x13, 0x1c, 0x21, 0xc7, 0x7b, 0x61, 0x7c, 0x38, 0xd0, 0x7d, 0x3e,
	0x15, 0x69, 0x97, 0xa4, 0x4c, 0xbf, 0xac, 0xbc, 0x09, 0x47, 0xf5, 0x8c, 0x70, 0x14, 0x5f, 0x86,
	0x18, 0xe4, 0xbb, 0xea, 0xbc, 0x3f, 0x03, 0xf4, 0x90, 0xf7, 0x03, 0xff, 0xc6, 0x1d, 0x61, 0xe6,
	0xa9, 0x4c, 0xed, 0x14, 0xea, 0x94, 0xc8, 0x5f, 0x60, 0x25, 0xf9, 0x58, 0xc5, 0xc9, 0x75, 0x7a,
	0x40, 0x6f, 0x61, 0xa5, 0x87, 0xdc, 0xc2, 0x11, 0xe3, 0xae, 0xef, 0x65, 0x8e, 0x36, 0xa8, 0x2a,
	0x1c, 0xa9, 0xd0, 0xea, 0xe0, 0x8d, 0xa8, 0x83, 0x23, 0xe6, 0xdd, 0x1e, 0xb3, 0xc0, 0x09, 0x33,
	0x93, 0x16, 0x55, 0xd8, 0x4c, 0xe1, 0xec, 0xc2, 0x4a, 0xd7, 0x71, 0x94, 0x92, 0xac, 0x66, 0xbc,
	0xae, 0x63, 0xaa, 0xe3, 0x7d, 0xa8, 0x59, 0x38, 0xf6, 0xa7, 0x98, 0x59, 0xac, 0x67, 0x16, 0x49,
	0x3e, 0xce, 0x4c, 0x46, 0x4f, 0x60, 0xb1, 0x7b, 0xcd, 0xdd, 0x29, 0x9a, 0x93, 0xfe, 0xe8, 0xdc,
	0xbf, 0xbe, 0x25, 0x15, 0x9a, 0xfc, 0x98, 0xad, 0x2f, 0xbd, 0x51, 0x42, 0x31, 0x58, 0xbf, 0x80,
	0x72, 0x2f, 0x60, 0x1e, 0x3f, 0x1d, 0xb1, 0x01, 0x69, 0xd2, 0x6c, 0x6d, 0xf0, 0xf3, 0x57, 0x58,
	0x3a, 0xf6, 0xc7, 0x93, 0x11, 0xfe, 0x94, 0x39, 0xaa, 0x53, 0x3b, 0x85, 0xb2, 0xa3, 0x7b, 0x0e,
	0xcb, 0x36, 0x7a, 0xce, 0xb1, 0xef, 0x20, 0x69, 0x50, 0xb5, 0x34, 0xb8, 0xdb, 0x85, 0x95, 0xc4,
	0x96, 0x05, 0x28, 0xb8, 0xab, 0x54, 0x93, 0x0c, 0xf4, 0xf7, 0x50, 0xb5, 0xf0, 0x1a, 0xdd, 0x09,
	0x0f, 0x13, 0x46, 0x7e, 0x32, 0x6d, 0x6a, 0xeb, 0x8a, 0x99, 0xe3, 0x39, 0x84, 0x46, 0x52, 0x26,
	0x3a, 0x83, 0x6c, 0x52, 0x5d, 0x94, 0xea, 0x7b, 0xfb, 0xbd, 0x85, 0x9a, 0x8d, 0xbc, 0xcf, 0xe2,
	0x7e, 0xe0, 0x26, 0xcd, 0x34, 0x26, 0xab, 0x54, 0x93, 0x8c, 0x37, 0x75, 0x4d, 0x74, 0xb1, 0xb4,
	0x0e, 0x65, 0x62, 0xb8, 0xf1, 0xcc, 0x28, 0xd4, 0xb5, 0xab, 0x54, 0x68, 0x38, 0xcd, 0xc2, 0xe5,
	0x4b, 0x9b, 0xce, 0x2e, 0xac, 0x5c, 0x4e, 0x1c, 0xc6, 0x51, 0x5e, 0xbd, 0x55, 0xaa, 0x49, 0x0f,
	0xa4, 0x76, 0xc8, 0xbc, 0x01, 0xf6, 0x87, 0xbe, 0x27, 0x52, 0x9b, 0x4b, 0x06, 0xfa, 0xab, 0xa4,
	0x6f, 0x27, 0x04, 0x71, 0x21, 0x09, 0xcd, 0x05, 0xe3, 0x57, 0x56, 0xa4, 0xbe, 0x3b, 0x65, 0x9c,
	0x05, 0xa4, 0x46, 0xe5, 0xc2, 0x48, 0x2d, 0x7f, 0xf2, 0x1d, 0xf7, 0x26, 0x4e, 0x5a, 0x7c, 0x93,
	0x66, 0x6b, 0x03, 0x95, 0x42, 0x4d, 0xaa, 0xb3, 0x27, 0xe1, 0xf7, 0xf9, 0x3b, 0xd0, 0x32, 0xe5,
	0xda, 0xc9, 0xd2, 0xf8, 0x98, 0x1e, 0xf9, 0xfe, 0x48, 0x5c, 0xb8, 0xba, 0x8c, 0x37, 0x1b, 0x0b,
	0xc4, 0x6b, 0xa3, 0x21, 0xc6, 0x62, 0xab, 0xfd, 0x27, 0x70, 0x30, 0x08, 0xd5, 0x9b, 0x9e, 0xf9,
	0xdd, 0xa2, 0x42, 0xa1, 0xf0, 0x4f, 0x6c, 0xa2, 0x15, 0xdb, 0xdf, 0x60, 0xa9, 0x1f, 0xe0, 0xd8,
	0x8d, 0xc6, 0xa4, 0x4e, 0xd3, 0x95, 0xc1, 0xfb, 0x73, 0x58, 0x4e, 0xde, 0x1a, 0xff, 0x16, 0x3d,
	0xd2, 0xa0, 0x6a, 0x99, 0x13, 0x65, 0x43, 0x14, 0x09, 0x94, 0x0f, 0xaa, 0xa4, 0x12, 0x9a, 0x0b,
	0x8a, 0x9c, 0x7d, 0xe6, 0x53, 0x58, 0x91, 0x7d, 0x45, 0x72, 0x55, 0xb8, 0xe9, 0xdb, 0x27, 0xeb,
	0xb9, 0x87, 0xbc, 0xeb, 0x38, 0x01, 0x86, 0x61, 0x72, 0x49, 0x32, 0xce, 0x1a, 0xd5, 0xd0, 0x62,
	0x67, 0x4b, 0xee, 0x46, 0xaa, 0x24, 0xab, 0x54, 0x93, 0x8c, 0x45, 0x07, 0xf9, 0x06, 0x84, 0xd0,
	0x5c, 0x50, 0xe4, 0x32, 0xb5, 0x53, 0x44, 0xd0, 0xab, 0xf2, 0x4d, 0x51, 0x16, 0x4d, 0x15, 0x86,
	0xb1, 0x05, 0xca, 0x17, 0xa1, 0x7b, 0x7d, 0xed, 0x47, 0x1e, 0xd7, 0x5f, 0x84, 0x14, 0x12, 0x1e,
	0x2b, 0x67, 0xa1, 0x38, 0x53, 0xd9, 0xed, 0xd7, 0xa8, 0x2e, 0xde, 0xcb, 0xd8, 0x21, 0x54, 0xd2,
	0x02, 0xe8, 0x06, 0x01, 0x8b, 0x49, 0x95, 0xea, 0xa3, 0x67, 0x7b, 0x9d, 0x1a, 0xe7, 0x48, 0x91,
	0xc9, 0x74, 0x64, 0x94, 0xf7, 0x34, 0xaf, 0x91, 0x19, 0x0f, 0xe9, 0x3b, 0x2d, 0xb6, 0x5a, 0xfd,
	0x1c, 0x61, 0x10, 0x17, 0xe7, 0x44, 0xb2, 0x6e, 0x1e, 0x1c, 0xb5, 0x39, 0xe6, 0x18, 0x1a, 0x9a,
	0xa1, 0x8c, 0xf3, 0x21, 0xab, 0x16, 0x35, 0x0d, 0x89, 0x9d, 0x12, 0xf9, 0x3f, 0x3c, 0x49, 0x1e,
	0xdd, 0xb8, 0xcf, 0x06, 0xc9, 0xdc, 0xa1, 0x12, 0x92, 0x46, 0x4f, 0xfe, 0xa4, 0xec, 0x32, 0x4d,
	0x9f, 0x0d, 0x5c, 0x2f, 0x7b, 0x01, 0x9e, 0x3e, 0xa8, 0xcf, 0x76, 0x78, 0x07, 0xd5, 0xf4, 0x18,
	0x8e, 0x87, 0x2c, 0x18, 0x20, 0x69, 0xd1, 0x5c, 0xf6, 0x06, 0x68, 0x9e, 0x01, 0x15, 0xc5, 0xf7,
	0xc2, 0x68, 0xfc, 0x3d, 0x36, 0xfb, 0x50, 0x4f, 0x29, 0x27, 0x6e, 0x28, 0x0b, 0xe1, 0xdb, 0x46,
	0x79, 0x6c, 0x16, 0xde, 0x44, 0x9e, 0xf3, 0x87, 0x4c, 0xba, 0xce, 0x0f, 0x51, 0xa8, 0xed, 0x22,
	0x65, 0x63, 0xc3, 0x50, 0xa1, 0x5d, 0x04, 0xcc, 0x0b, 0x6f, 0x30, 0x20, 0x1b, 0x74, 0x06, 0x31,
	0x7e, 0xd1, 0xf2, 0x57, 0x97, 0x0f, 0x9d, 0x80, 0xdd, 0x91, 0x06, 0x55, 0x4b, 0x45, 0x5c, 0xcd,
	0x10, 0x36, 0x2a, 0x3e, 0x69, 0x72, 0x6c, 0xcc, 0xb5, 0xe2, 0x49, 0x2b, 0x42, 0xc6, 0x19, 0xb4,
	0x71, 0xea, 0x7a, 0x6e, 0x38, 0x2c, 0x18, 0xce, 0x42, 0x06, 0xc3, 0x53, 0x20, 0xa2, 0x0c, 0x73,
	0xd2, 0xb9, 0x3f, 0x20, 0x2d, 0x5a, 0x90, 0x95, 0xdd, 0x46, 0x11, 0x0e, 0x8b, 0xfd, 0xf1, 0xe8,
	0xe0, 0x63, 0x37, 0xe2, 0x43, 0x52, 0xa7, 0xe9, 0xca, 0xb0, 0xdd, 0xbf, 0xa0, 0x21, 0x4b, 0x2c,
	0x4d, 0x60, 0xb2, 0xd9, 0x16, 0x2d, 0x40, 0xfa, 0xb0, 0x5c, 0xa3, 0x76, 0x56, 0x91, 0xea, 0x34,
	0x92, 0x21, 0xee, 0x2b, 0x1b, 0x8d, 0x50, 0x18, 0x37, 0x69, 0xb6, 0x56, 0x46, 0x44, 0x87, 0xd2,
	0xff, 0x53, 0xbb, 0x6a, 0x36, 0x53, 0xff, 0x9f, 0x48, 0x83, 0xce, 0xfc, 0x15, 0x9e, 0x69, 0xe3,
	0xdf, 0x47, 0x7c, 0x06, 0xe5, 0xb3, 0x50, 0xe8, 0xd1, 0x31, 0x30, 0xb3, 0x8e, 0xd4, 0x83, 0x8a,
	0x48, 0xf3, 0xb1, 0x1f, 0x25, 0x01, 0x91, 0x76, 0x7a, 0xf3, 0xa4, 0x5c, 0xbc, 0x95, 0x5b, 0x05,
	0x5d, 0xf1, 0xc6, 0x1f, 0x95, 0xff, 0xbb, 0x44, 0xff, 0x29, 0xfe, 0xcd, 0x5f, 0x2d, 0x8a, 0x9f,
	0xfd, 0xdf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x25, 0x70, 0xb1, 0xce, 0x3b, 0x10, 0x00, 0x00,
}
