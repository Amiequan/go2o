// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: member_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LevelUpReviewRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId   int64  `protobuf:"varint,1,opt,name=MemberId,proto3" json:"MemberId"`
	RequestId  int64  `protobuf:"varint,2,opt,name=RequestId,proto3" json:"RequestId"`
	ReviewPass bool   `protobuf:"varint,3,opt,name=ReviewPass,proto3" json:"ReviewPass"`
	Remark     string `protobuf:"bytes,4,opt,name=Remark,proto3" json:"Remark"`
}

func (x *LevelUpReviewRequest) Reset() {
	*x = LevelUpReviewRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelUpReviewRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelUpReviewRequest) ProtoMessage() {}

func (x *LevelUpReviewRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelUpReviewRequest.ProtoReflect.Descriptor instead.
func (*LevelUpReviewRequest) Descriptor() ([]byte, []int) {
	return file_member_service_proto_rawDescGZIP(), []int{0}
}

func (x *LevelUpReviewRequest) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *LevelUpReviewRequest) GetRequestId() int64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

func (x *LevelUpReviewRequest) GetReviewPass() bool {
	if x != nil {
		return x.ReviewPass
	}
	return false
}

func (x *LevelUpReviewRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

type LevelUpConfirmRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MemberId  int64 `protobuf:"varint,1,opt,name=MemberId,proto3" json:"MemberId"`
	RequestId int64 `protobuf:"varint,2,opt,name=RequestId,proto3" json:"RequestId"`
}

func (x *LevelUpConfirmRequest) Reset() {
	*x = LevelUpConfirmRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_member_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LevelUpConfirmRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LevelUpConfirmRequest) ProtoMessage() {}

func (x *LevelUpConfirmRequest) ProtoReflect() protoreflect.Message {
	mi := &file_member_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LevelUpConfirmRequest.ProtoReflect.Descriptor instead.
func (*LevelUpConfirmRequest) Descriptor() ([]byte, []int) {
	return file_member_service_proto_rawDescGZIP(), []int{1}
}

func (x *LevelUpConfirmRequest) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *LevelUpConfirmRequest) GetRequestId() int64 {
	if x != nil {
		return x.RequestId
	}
	return 0
}

var File_member_service_proto protoreflect.FileDescriptor

var file_member_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x64, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x88, 0x01, 0x0a, 0x14, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61,
	0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x50, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x51, 0x0a, 0x15,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x32,
	0xa0, 0x1c, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x37, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x0a, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0d, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x50, 0x77, 0x64, 0x12, 0x11, 0x2e, 0x50, 0x77, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x30, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x12,
	0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x53, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x0d, 0x2e, 0x53,
	0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x35, 0x0a,
	0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x17, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x75, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x11, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x72,
	0x75, 0x73, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x52, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x54, 0x72, 0x75, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x29, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x06, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x1a, 0x0d, 0x2e, 0x53, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0d, 0x2e, 0x53, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x42, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0x0d, 0x2e, 0x53, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x00, 0x12, 0x26, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x07,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1f, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x08,
	0x2e, 0x53, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0a, 0x46, 0x69,
	0x6e, 0x64, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x06, 0x2e, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x09, 0x2e, 0x53,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x0b, 0x53, 0x61, 0x76,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x09, 0x2e, 0x53, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x30,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x17, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x2f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x73,
	0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x15, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x43,
	0x61, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x2d, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x13, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x41, 0x64, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x2d, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61,
	0x72, 0x64, 0x12, 0x10, 0x2e, 0x42, 0x61, 0x6e, 0x6b, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x1b, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1f, 0x0a, 0x04,
	0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x0c, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x1b, 0x0a,
	0x06, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a,
	0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x09, 0x47, 0x72,
	0x61, 0x6e, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x11, 0x2e, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x46,
	0x6c, 0x61, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x0f, 0x2e, 0x53, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x08, 0x53,
	0x65, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x13, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x1a, 0x2e, 0x53,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x10, 0x53, 0x61,
	0x76, 0x65, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x53, 0x61, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x50, 0x61, 0x79, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x13, 0x2e, 0x50, 0x61, 0x79, 0x50, 0x72, 0x69, 0x6f, 0x72,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x06, 0x2e,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x2e, 0x0a, 0x0f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x11, 0x2e, 0x53, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00,
	0x12, 0x2d, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x13, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55,
	0x70, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x15, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55, 0x70, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x13, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x68, 0x6f,
	0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x12, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x29, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x76, 0x61, 0x74, 0x61,
	0x72, 0x12, 0x0e, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x09,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x77, 0x64, 0x12, 0x11, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x50, 0x77, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x77, 0x64, 0x12, 0x11, 0x2e, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x50, 0x77, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x05, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22,
	0x00, 0x12, 0x33, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x15, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x1a, 0x19, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x25, 0x0a,
	0x07, 0x50, 0x72, 0x65, 0x6d, 0x69, 0x75, 0x6d, 0x12, 0x0f, 0x2e, 0x50, 0x72, 0x65, 0x6d, 0x69,
	0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x10, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x29, 0x0a,
	0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x12, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x05, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x1f, 0x0a, 0x0b, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a,
	0x06, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x06, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x1a, 0x14, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x53,
	0x61, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x13, 0x2e, 0x53, 0x61, 0x76,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x53, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x11, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x09, 0x2e, 0x53, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0c, 0x49, 0x73, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x49, 0x73, 0x49, 0x6e, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x05,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x0d, 0x2e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x30, 0x0a, 0x15, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0d, 0x2e, 0x44, 0x65, 0x70, 0x74,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x22, 0x00, 0x12, 0x37, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74,
	0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x2e, 0x49, 0x6e, 0x76, 0x69,
	0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x10, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12,
	0x16, 0x2e, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x60, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x79, 0x50, 0x61, 0x67, 0x65, 0x64, 0x49, 0x6e,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x31, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x12, 0x15, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x15, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0f, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x31,
	0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12,
	0x15, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x31, 0x0a, 0x0d, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x12, 0x15, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x17, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x08, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x10, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x10, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x12, 0x18, 0x2e, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x10, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x18, 0x2e,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x46, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x12, 0x15, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x07, 0x42, 0x34,
	0x45, 0x41, 0x75, 0x74, 0x68, 0x12, 0x0f, 0x2e, 0x42, 0x34, 0x45, 0x41, 0x75, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x10, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x19, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0e, 0x2e, 0x53, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x00, 0x12, 0x35, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c,
	0x6f, 0x67, 0x12, 0x11, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x0e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x46, 0x61,
	0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x08, 0x46, 0x61, 0x76, 0x6f,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x10, 0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0x00, 0x12, 0x26, 0x0a, 0x09, 0x49, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x65, 0x64, 0x12, 0x10,
	0x2e, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x05, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x2e, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x42, 0x1f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x67, 0x6f, 0x32, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x5a, 0x08, 0x2e, 0x2f, 0x3b, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_member_service_proto_rawDescOnce sync.Once
	file_member_service_proto_rawDescData = file_member_service_proto_rawDesc
)

func file_member_service_proto_rawDescGZIP() []byte {
	file_member_service_proto_rawDescOnce.Do(func() {
		file_member_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_member_service_proto_rawDescData)
	})
	return file_member_service_proto_rawDescData
}

var file_member_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_member_service_proto_goTypes = []interface{}{
	(*LevelUpReviewRequest)(nil),           // 0: LevelUpReviewRequest
	(*LevelUpConfirmRequest)(nil),          // 1: LevelUpConfirmRequest
	(*RegisterMemberRequest)(nil),          // 2: RegisterMemberRequest
	(*LoginRequest)(nil),                   // 3: LoginRequest
	(*PwdVerifyRequest)(nil),               // 4: PwdVerifyRequest
	(*Empty)(nil),                          // 5: Empty
	(*Int64)(nil),                          // 6: Int64
	(*SubmitTrustInfoRequest)(nil),         // 7: SubmitTrustInfoRequest
	(*ReviewTrustInfoRequest)(nil),         // 8: ReviewTrustInfoRequest
	(*Int32)(nil),                          // 9: Int32
	(*SMemberLevel)(nil),                   // 10: SMemberLevel
	(*String)(nil),                         // 11: String
	(*FindMemberRequest)(nil),              // 12: FindMemberRequest
	(*SProfile)(nil),                       // 13: SProfile
	(*BankCardAddRequest)(nil),             // 14: BankCardAddRequest
	(*BankCardRequest)(nil),                // 15: BankCardRequest
	(*LockRequest)(nil),                    // 16: LockRequest
	(*GrantFlagRequest)(nil),               // 17: GrantFlagRequest
	(*SendCodeRequest)(nil),                // 18: SendCodeRequest
	(*CompareCodeRequest)(nil),             // 19: CompareCodeRequest
	(*ReceiptsCodeSaveRequest)(nil),        // 20: ReceiptsCodeSaveRequest
	(*PayPriorityRequest)(nil),             // 21: PayPriorityRequest
	(*UpdateLevelRequest)(nil),             // 22: UpdateLevelRequest
	(*ChangePhoneRequest)(nil),             // 23: ChangePhoneRequest
	(*ChangeUserRequest)(nil),              // 24: ChangeUserRequest
	(*AvatarRequest)(nil),                  // 25: AvatarRequest
	(*ModifyPwdRequest)(nil),               // 26: ModifyPwdRequest
	(*ChangeInviterRequest)(nil),           // 27: ChangeInviterRequest
	(*PremiumRequest)(nil),                 // 28: PremiumRequest
	(*GetTokenRequest)(nil),                // 29: GetTokenRequest
	(*CheckTokenRequest)(nil),              // 30: CheckTokenRequest
	(*SaveAddressRequest)(nil),             // 31: SaveAddressRequest
	(*GetAddressRequest)(nil),              // 32: GetAddressRequest
	(*AddressIdRequest)(nil),               // 33: AddressIdRequest
	(*IsInvitationRequest)(nil),            // 34: IsInvitationRequest
	(*DepthRequest)(nil),                   // 35: DepthRequest
	(*InviteQuantityRequest)(nil),          // 36: InviteQuantityRequest
	(*MemberInvitationPagingRequest)(nil),  // 37: MemberInvitationPagingRequest
	(*AccountChangeRequest)(nil),           // 38: AccountChangeRequest
	(*AccountAdjustRequest)(nil),           // 39: AccountAdjustRequest
	(*AccountTransferRequest)(nil),         // 40: AccountTransferRequest
	(*WithdrawRequest)(nil),                // 41: WithdrawRequest
	(*ReviewWithdrawalRequest)(nil),        // 42: ReviewWithdrawalRequest
	(*FinishWithdrawalRequest)(nil),        // 43: FinishWithdrawalRequest
	(*WithdrawalLogRequest)(nil),           // 44: WithdrawalLogRequest
	(*B4EAuthRequest)(nil),                 // 45: B4EAuthRequest
	(*PagingAccountInfoRequest)(nil),       // 46: PagingAccountInfoRequest
	(*WalletLogRequest)(nil),               // 47: WalletLogRequest
	(*FavoriteRequest)(nil),                // 48: FavoriteRequest
	(*MemberCouponPagingRequest)(nil),      // 49: MemberCouponPagingRequest
	(*RegisterResponse)(nil),               // 50: RegisterResponse
	(*Result)(nil),                         // 51: Result
	(*SMemberLevelListResponse)(nil),       // 52: SMemberLevelListResponse
	(*STrustedInfo)(nil),                   // 53: STrustedInfo
	(*SMember)(nil),                        // 54: SMember
	(*MemberRelationResponse)(nil),         // 55: MemberRelationResponse
	(*BankCardListResponse)(nil),           // 56: BankCardListResponse
	(*SComplexMember)(nil),                 // 57: SComplexMember
	(*SReceiptsCodeListResponse)(nil),      // 58: SReceiptsCodeListResponse
	(*SMemberLevelInfo)(nil),               // 59: SMemberLevelInfo
	(*Bool)(nil),                           // 60: Bool
	(*OrderQuantityMapResponse)(nil),       // 61: OrderQuantityMapResponse
	(*AddressListResponse)(nil),            // 62: AddressListResponse
	(*SaveAddressResponse)(nil),            // 63: SaveAddressResponse
	(*SAddress)(nil),                       // 64: SAddress
	(*SAccount)(nil),                       // 65: SAccount
	(*InviterIdListResponse)(nil),          // 66: InviterIdListResponse
	(*MemberIdListResponse)(nil),           // 67: MemberIdListResponse
	(*MemberInvitationPagingResponse)(nil), // 68: MemberInvitationPagingResponse
	(*WithdrawalResponse)(nil),             // 69: WithdrawalResponse
	(*WithdrawalLogsResponse)(nil),         // 70: WithdrawalLogsResponse
	(*SPagingResult)(nil),                  // 71: SPagingResult
	(*WalletLogResponse)(nil),              // 72: WalletLogResponse
	(*MemberCouponListResponse)(nil),       // 73: MemberCouponListResponse
}
var file_member_service_proto_depIdxs = []int32{
	2,  // 0: MemberService.Register:input_type -> RegisterMemberRequest
	3,  // 1: MemberService.CheckLogin:input_type -> LoginRequest
	4,  // 2: MemberService.VerifyTradePwd:input_type -> PwdVerifyRequest
	5,  // 3: MemberService.GetLevels:input_type -> Empty
	6,  // 4: MemberService.GetTrustInfo:input_type -> Int64
	7,  // 5: MemberService.SubmitTrustInfo:input_type -> SubmitTrustInfoRequest
	8,  // 6: MemberService.ReviewTrustedInfo:input_type -> ReviewTrustInfoRequest
	9,  // 7: MemberService.GetMemberLevel:input_type -> Int32
	10, // 8: MemberService.SaveMemberLevel:input_type -> SMemberLevel
	11, // 9: MemberService.GetLevelBySign:input_type -> String
	6,  // 10: MemberService.DeleteMemberLevel:input_type -> Int64
	6,  // 11: MemberService.GetMember:input_type -> Int64
	12, // 12: MemberService.FindMember:input_type -> FindMemberRequest
	6,  // 13: MemberService.GetProfile:input_type -> Int64
	13, // 14: MemberService.SaveProfile:input_type -> SProfile
	6,  // 15: MemberService.GetRelation:input_type -> Int64
	6,  // 16: MemberService.GetBankCards:input_type -> Int64
	14, // 17: MemberService.AddBankCard:input_type -> BankCardAddRequest
	15, // 18: MemberService.RemoveBankCard:input_type -> BankCardRequest
	6,  // 19: MemberService.Active:input_type -> Int64
	16, // 20: MemberService.Lock:input_type -> LockRequest
	6,  // 21: MemberService.Unlock:input_type -> Int64
	17, // 22: MemberService.GrantFlag:input_type -> GrantFlagRequest
	6,  // 23: MemberService.Complex:input_type -> Int64
	18, // 24: MemberService.SendCode:input_type -> SendCodeRequest
	19, // 25: MemberService.CompareCode:input_type -> CompareCodeRequest
	6,  // 26: MemberService.ReceiptsCodes:input_type -> Int64
	20, // 27: MemberService.SaveReceiptsCode:input_type -> ReceiptsCodeSaveRequest
	21, // 28: MemberService.SetPayPriority:input_type -> PayPriorityRequest
	6,  // 29: MemberService.CheckProfileComplete:input_type -> Int64
	6,  // 30: MemberService.MemberLevelInfo:input_type -> Int64
	22, // 31: MemberService.UpdateLevel:input_type -> UpdateLevelRequest
	0,  // 32: MemberService.ReviewLevelUpRequest:input_type -> LevelUpReviewRequest
	1,  // 33: MemberService.ConfirmLevelUpRequest:input_type -> LevelUpConfirmRequest
	23, // 34: MemberService.ChangePhone:input_type -> ChangePhoneRequest
	24, // 35: MemberService.ChangeUser:input_type -> ChangeUserRequest
	25, // 36: MemberService.ChangeAvatar:input_type -> AvatarRequest
	26, // 37: MemberService.ModifyPwd:input_type -> ModifyPwdRequest
	26, // 38: MemberService.ModifyTradePwd:input_type -> ModifyPwdRequest
	6,  // 39: MemberService.CheckProfileCompleted:input_type -> Int64
	27, // 40: MemberService.ChangeInviterId:input_type -> ChangeInviterRequest
	6,  // 41: MemberService.OrdersQuantity:input_type -> Int64
	28, // 42: MemberService.Premium:input_type -> PremiumRequest
	29, // 43: MemberService.GetToken:input_type -> GetTokenRequest
	30, // 44: MemberService.CheckToken:input_type -> CheckTokenRequest
	6,  // 45: MemberService.RemoveToken:input_type -> Int64
	6,  // 46: MemberService.GetAddressList:input_type -> Int64
	31, // 47: MemberService.SaveAddress:input_type -> SaveAddressRequest
	32, // 48: MemberService.GetAddress:input_type -> GetAddressRequest
	33, // 49: MemberService.DeleteAddress:input_type -> AddressIdRequest
	6,  // 50: MemberService.GetAccount:input_type -> Int64
	34, // 51: MemberService.IsInvitation:input_type -> IsInvitationRequest
	35, // 52: MemberService.InviterArray:input_type -> DepthRequest
	35, // 53: MemberService.InviteMembersQuantity:input_type -> DepthRequest
	36, // 54: MemberService.QueryInviteQuantity:input_type -> InviteQuantityRequest
	36, // 55: MemberService.QueryInviteArray:input_type -> InviteQuantityRequest
	37, // 56: MemberService.GetMyPagedInvitationMembers:input_type -> MemberInvitationPagingRequest
	38, // 57: MemberService.AccountCharge:input_type -> AccountChangeRequest
	38, // 58: MemberService.AccountConsume:input_type -> AccountChangeRequest
	38, // 59: MemberService.AccountDiscount:input_type -> AccountChangeRequest
	38, // 60: MemberService.AccountRefund:input_type -> AccountChangeRequest
	39, // 61: MemberService.AccountAdjust:input_type -> AccountAdjustRequest
	40, // 62: MemberService.AccountTransfer:input_type -> AccountTransferRequest
	41, // 63: MemberService.Withdraw:input_type -> WithdrawRequest
	42, // 64: MemberService.ReviewWithdrawal:input_type -> ReviewWithdrawalRequest
	43, // 65: MemberService.FinishWithdrawal:input_type -> FinishWithdrawalRequest
	44, // 66: MemberService.QueryWithdrawalLog:input_type -> WithdrawalLogRequest
	45, // 67: MemberService.B4EAuth:input_type -> B4EAuthRequest
	46, // 68: MemberService.PagingAccountLog:input_type -> PagingAccountInfoRequest
	47, // 69: MemberService.GetWalletLog:input_type -> WalletLogRequest
	48, // 70: MemberService.RemoveFavorite:input_type -> FavoriteRequest
	48, // 71: MemberService.Favorite:input_type -> FavoriteRequest
	48, // 72: MemberService.IsFavored:input_type -> FavoriteRequest
	49, // 73: MemberService.QueryCoupons:input_type -> MemberCouponPagingRequest
	50, // 74: MemberService.Register:output_type -> RegisterResponse
	51, // 75: MemberService.CheckLogin:output_type -> Result
	51, // 76: MemberService.VerifyTradePwd:output_type -> Result
	52, // 77: MemberService.GetLevels:output_type -> SMemberLevelListResponse
	53, // 78: MemberService.GetTrustInfo:output_type -> STrustedInfo
	51, // 79: MemberService.SubmitTrustInfo:output_type -> Result
	51, // 80: MemberService.ReviewTrustedInfo:output_type -> Result
	10, // 81: MemberService.GetMemberLevel:output_type -> SMemberLevel
	51, // 82: MemberService.SaveMemberLevel:output_type -> Result
	10, // 83: MemberService.GetLevelBySign:output_type -> SMemberLevel
	51, // 84: MemberService.DeleteMemberLevel:output_type -> Result
	54, // 85: MemberService.GetMember:output_type -> SMember
	6,  // 86: MemberService.FindMember:output_type -> Int64
	13, // 87: MemberService.GetProfile:output_type -> SProfile
	51, // 88: MemberService.SaveProfile:output_type -> Result
	55, // 89: MemberService.GetRelation:output_type -> MemberRelationResponse
	56, // 90: MemberService.GetBankCards:output_type -> BankCardListResponse
	51, // 91: MemberService.AddBankCard:output_type -> Result
	51, // 92: MemberService.RemoveBankCard:output_type -> Result
	51, // 93: MemberService.Active:output_type -> Result
	51, // 94: MemberService.Lock:output_type -> Result
	51, // 95: MemberService.Unlock:output_type -> Result
	51, // 96: MemberService.GrantFlag:output_type -> Result
	57, // 97: MemberService.Complex:output_type -> SComplexMember
	51, // 98: MemberService.SendCode:output_type -> Result
	51, // 99: MemberService.CompareCode:output_type -> Result
	58, // 100: MemberService.ReceiptsCodes:output_type -> SReceiptsCodeListResponse
	51, // 101: MemberService.SaveReceiptsCode:output_type -> Result
	51, // 102: MemberService.SetPayPriority:output_type -> Result
	51, // 103: MemberService.CheckProfileComplete:output_type -> Result
	59, // 104: MemberService.MemberLevelInfo:output_type -> SMemberLevelInfo
	51, // 105: MemberService.UpdateLevel:output_type -> Result
	51, // 106: MemberService.ReviewLevelUpRequest:output_type -> Result
	51, // 107: MemberService.ConfirmLevelUpRequest:output_type -> Result
	51, // 108: MemberService.ChangePhone:output_type -> Result
	51, // 109: MemberService.ChangeUser:output_type -> Result
	51, // 110: MemberService.ChangeAvatar:output_type -> Result
	51, // 111: MemberService.ModifyPwd:output_type -> Result
	51, // 112: MemberService.ModifyTradePwd:output_type -> Result
	60, // 113: MemberService.CheckProfileCompleted:output_type -> Bool
	51, // 114: MemberService.ChangeInviterId:output_type -> Result
	61, // 115: MemberService.OrdersQuantity:output_type -> OrderQuantityMapResponse
	51, // 116: MemberService.Premium:output_type -> Result
	11, // 117: MemberService.GetToken:output_type -> String
	60, // 118: MemberService.CheckToken:output_type -> Bool
	5,  // 119: MemberService.RemoveToken:output_type -> Empty
	62, // 120: MemberService.GetAddressList:output_type -> AddressListResponse
	63, // 121: MemberService.SaveAddress:output_type -> SaveAddressResponse
	64, // 122: MemberService.GetAddress:output_type -> SAddress
	51, // 123: MemberService.DeleteAddress:output_type -> Result
	65, // 124: MemberService.GetAccount:output_type -> SAccount
	60, // 125: MemberService.IsInvitation:output_type -> Bool
	66, // 126: MemberService.InviterArray:output_type -> InviterIdListResponse
	9,  // 127: MemberService.InviteMembersQuantity:output_type -> Int32
	6,  // 128: MemberService.QueryInviteQuantity:output_type -> Int64
	67, // 129: MemberService.QueryInviteArray:output_type -> MemberIdListResponse
	68, // 130: MemberService.GetMyPagedInvitationMembers:output_type -> MemberInvitationPagingResponse
	51, // 131: MemberService.AccountCharge:output_type -> Result
	51, // 132: MemberService.AccountConsume:output_type -> Result
	51, // 133: MemberService.AccountDiscount:output_type -> Result
	51, // 134: MemberService.AccountRefund:output_type -> Result
	51, // 135: MemberService.AccountAdjust:output_type -> Result
	51, // 136: MemberService.AccountTransfer:output_type -> Result
	69, // 137: MemberService.Withdraw:output_type -> WithdrawalResponse
	51, // 138: MemberService.ReviewWithdrawal:output_type -> Result
	51, // 139: MemberService.FinishWithdrawal:output_type -> Result
	70, // 140: MemberService.QueryWithdrawalLog:output_type -> WithdrawalLogsResponse
	51, // 141: MemberService.B4EAuth:output_type -> Result
	71, // 142: MemberService.PagingAccountLog:output_type -> SPagingResult
	72, // 143: MemberService.GetWalletLog:output_type -> WalletLogResponse
	51, // 144: MemberService.RemoveFavorite:output_type -> Result
	51, // 145: MemberService.Favorite:output_type -> Result
	60, // 146: MemberService.IsFavored:output_type -> Bool
	73, // 147: MemberService.QueryCoupons:output_type -> MemberCouponListResponse
	74, // [74:148] is the sub-list for method output_type
	0,  // [0:74] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_member_service_proto_init() }
func file_member_service_proto_init() {
	if File_member_service_proto != nil {
		return
	}
	file_global_proto_init()
	file_message_bank_dto_proto_init()
	file_message_member_dto_proto_init()
	file_message_payment_dto_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_member_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelUpReviewRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_member_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LevelUpConfirmRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_member_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_member_service_proto_goTypes,
		DependencyIndexes: file_member_service_proto_depIdxs,
		MessageInfos:      file_member_service_proto_msgTypes,
	}.Build()
	File_member_service_proto = out.File
	file_member_service_proto_rawDesc = nil
	file_member_service_proto_goTypes = nil
	file_member_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MemberServiceClient is the client API for MemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MemberServiceClient interface {
	//*
	// 注册会员
	// @param user 登陆用户名
	// @param pwd 登陆密码,md5运算后的字符串
	// @param flag 用户自定义标志
	// @param phone 手机号码
	// @param email 邮箱
	// @param avatar 头像
	// @param extend 扩展数据
	// @return 注册结果，返回user_code
	Register(ctx context.Context, in *RegisterMemberRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// 登录，返回结果(Result)和会员编号(Id);
	// Result值为：-1:会员不存在; -2:账号密码不正确; -3:账号被停用
	CheckLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Result, error)
	//* 验证交易密码
	VerifyTradePwd(ctx context.Context, in *PwdVerifyRequest, opts ...grpc.CallOption) (*Result, error)
	//* 等级列表
	GetLevels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SMemberLevelListResponse, error)
	// 获取实名信息,memberId
	GetTrustInfo(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*STrustedInfo, error)
	//* 提交实名信息
	SubmitTrustInfo(ctx context.Context, in *SubmitTrustInfoRequest, opts ...grpc.CallOption) (*Result, error)
	//* 审核实名认证,若重复审核将返回错误 *
	ReviewTrustedInfo(ctx context.Context, in *ReviewTrustInfoRequest, opts ...grpc.CallOption) (*Result, error)
	//* 获取会员等级信息,id
	GetMemberLevel(ctx context.Context, in *Int32, opts ...grpc.CallOption) (*SMemberLevel, error)
	//* 保存等级
	SaveMemberLevel(ctx context.Context, in *SMemberLevel, opts ...grpc.CallOption) (*Result, error)
	// 根据SIGN获取等级,sign
	GetLevelBySign(ctx context.Context, in *String, opts ...grpc.CallOption) (*SMemberLevel, error)
	// 删除会员等级
	DeleteMemberLevel(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	// 根据会员编号获取会员信息
	GetMember(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SMember, error)
	//* 查找交换会员编号
	FindMember(ctx context.Context, in *FindMemberRequest, opts ...grpc.CallOption) (*Int64, error)
	// 根据会员编号获取会员资料
	GetProfile(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SProfile, error)
	// 保存资料
	SaveProfile(ctx context.Context, in *SProfile, opts ...grpc.CallOption) (*Result, error)
	// 获取会员邀请关系
	GetRelation(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*MemberRelationResponse, error)
	// 获取会员绑定银行卡信息
	GetBankCards(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*BankCardListResponse, error)
	// 添加银行卡
	AddBankCard(ctx context.Context, in *BankCardAddRequest, opts ...grpc.CallOption) (*Result, error)
	// 移除绑定的银行卡
	RemoveBankCard(ctx context.Context, in *BankCardRequest, opts ...grpc.CallOption) (*Result, error)
	//* 激活会员,memberId
	Active(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	//* 锁定,minutes锁定分钟数,默认:-1永久锁定
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*Result, error)
	//* 解锁会员
	Unlock(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	//* 标志赋值, 如果flag小于零, 则异或运算
	GrantFlag(ctx context.Context, in *GrantFlagRequest, opts ...grpc.CallOption) (*Result, error)
	//* 获取会员汇总信息,memberId
	Complex(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SComplexMember, error)
	//* 发送会员验证码消息, 并返回验证码, 验证码通过data.code获取
	SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*Result, error)
	//* 比较验证码是否正确
	CompareCode(ctx context.Context, in *CompareCodeRequest, opts ...grpc.CallOption) (*Result, error)
	//* 获取收款码
	ReceiptsCodes(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SReceiptsCodeListResponse, error)
	//* 保存收款码
	SaveReceiptsCode(ctx context.Context, in *ReceiptsCodeSaveRequest, opts ...grpc.CallOption) (*Result, error)
	//设置余额优先支付
	SetPayPriority(ctx context.Context, in *PayPriorityRequest, opts ...grpc.CallOption) (*Result, error)
	// 检查资料是否完成
	CheckProfileComplete(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	//* 获取会员等级信息
	MemberLevelInfo(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SMemberLevelInfo, error)
	// 更改会员等级
	UpdateLevel(ctx context.Context, in *UpdateLevelRequest, opts ...grpc.CallOption) (*Result, error)
	// 审核升级申请
	ReviewLevelUpRequest(ctx context.Context, in *LevelUpReviewRequest, opts ...grpc.CallOption) (*Result, error)
	// 确认升级申请
	ConfirmLevelUpRequest(ctx context.Context, in *LevelUpConfirmRequest, opts ...grpc.CallOption) (*Result, error)
	// 更改手机号码，不验证手机格式
	ChangePhone(ctx context.Context, in *ChangePhoneRequest, opts ...grpc.CallOption) (*Result, error)
	// 更改用户名
	ChangeUser(ctx context.Context, in *ChangeUserRequest, opts ...grpc.CallOption) (*Result, error)
	// 上传会员头像
	ChangeAvatar(ctx context.Context, in *AvatarRequest, opts ...grpc.CallOption) (*Result, error)
	//* 更改密码
	ModifyPwd(ctx context.Context, in *ModifyPwdRequest, opts ...grpc.CallOption) (*Result, error)
	//* 更改交易密码
	ModifyTradePwd(ctx context.Context, in *ModifyPwdRequest, opts ...grpc.CallOption) (*Result, error)
	// 检查资料是否完善
	CheckProfileCompleted(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Bool, error)
	//* 更改邀请人
	ChangeInviterId(ctx context.Context, in *ChangeInviterRequest, opts ...grpc.CallOption) (*Result, error)
	//* 获取会员的订单状态及其数量
	OrdersQuantity(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*OrderQuantityMapResponse, error)
	// 升级为高级会员
	Premium(ctx context.Context, in *PremiumRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取会员的会员Token,reset表示是否重置token
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*String, error)
	// 检查会员的会话Token是否正确，如正确返回: 1
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*Bool, error)
	// 移除会员的Token,memberId
	RemoveToken(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Empty, error)
	// 获取会员的收货地址,memberId
	GetAddressList(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*AddressListResponse, error)
	// 保存会员的收货地址
	SaveAddress(ctx context.Context, in *SaveAddressRequest, opts ...grpc.CallOption) (*SaveAddressResponse, error)
	// 获取地址，如果addrId为0，则返回默认地址
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*SAddress, error)
	//删除配送地址
	DeleteAddress(ctx context.Context, in *AddressIdRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取会员账户信息,memberId
	GetAccount(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SAccount, error)
	//判断会员是否由指定会员邀请推荐的
	IsInvitation(ctx context.Context, in *IsInvitationRequest, opts ...grpc.CallOption) (*Bool, error)
	// 获取自己的邀请人会员编号数组
	InviterArray(ctx context.Context, in *DepthRequest, opts ...grpc.CallOption) (*InviterIdListResponse, error)
	// 获取邀请会员的数量
	InviteMembersQuantity(ctx context.Context, in *DepthRequest, opts ...grpc.CallOption) (*Int32, error)
	// 按条件获取荐指定等级会员的数量
	QueryInviteQuantity(ctx context.Context, in *InviteQuantityRequest, opts ...grpc.CallOption) (*Int64, error)
	// 按条件获取荐指定等级会员的列表
	QueryInviteArray(ctx context.Context, in *InviteQuantityRequest, opts ...grpc.CallOption) (*MemberIdListResponse, error)
	// 获取我邀请的会员及会员邀请的人数
	GetMyPagedInvitationMembers(ctx context.Context, in *MemberInvitationPagingRequest, opts ...grpc.CallOption) (*MemberInvitationPagingResponse, error)
	// 账户充值,amount精确到分
	AccountCharge(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*Result, error)
	// 账户消耗,amount精确到分
	AccountConsume(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*Result, error)
	// 账户抵扣,amount精确到分
	AccountDiscount(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*Result, error)
	// 账户退款,amount精确到分
	AccountRefund(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*Result, error)
	// 账户人工调整
	AccountAdjust(ctx context.Context, in *AccountAdjustRequest, opts ...grpc.CallOption) (*Result, error)
	// 转账转账
	AccountTransfer(ctx context.Context, in *AccountTransferRequest, opts ...grpc.CallOption) (*Result, error)
	// 提现并返回提现编号,交易号以及错误信息
	Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error)
	// 确认提现
	ReviewWithdrawal(ctx context.Context, in *ReviewWithdrawalRequest, opts ...grpc.CallOption) (*Result, error)
	// 收到款项,完成提现
	FinishWithdrawal(ctx context.Context, in *FinishWithdrawalRequest, opts ...grpc.CallOption) (*Result, error)
	// 查询提现记录
	QueryWithdrawalLog(ctx context.Context, in *WithdrawalLogRequest, opts ...grpc.CallOption) (*WithdrawalLogsResponse, error)
	// !银行四要素认证
	B4EAuth(ctx context.Context, in *B4EAuthRequest, opts ...grpc.CallOption) (*Result, error)
	//* 获取指定账户的流水记录
	PagingAccountLog(ctx context.Context, in *PagingAccountInfoRequest, opts ...grpc.CallOption) (*SPagingResult, error)
	// 获取钱包流水记录
	GetWalletLog(ctx context.Context, in *WalletLogRequest, opts ...grpc.CallOption) (*WalletLogResponse, error)
	// 取消收藏
	RemoveFavorite(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Result, error)
	// 收藏商品
	Favorite(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Result, error)
	// 是否已收藏
	IsFavored(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Bool, error)
	// 查询优惠券
	QueryCoupons(ctx context.Context, in *MemberCouponPagingRequest, opts ...grpc.CallOption) (*MemberCouponListResponse, error)
}

type memberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberServiceClient(cc grpc.ClientConnInterface) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) Register(ctx context.Context, in *RegisterMemberRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/MemberService/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CheckLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/CheckLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) VerifyTradePwd(ctx context.Context, in *PwdVerifyRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/VerifyTradePwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetLevels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SMemberLevelListResponse, error) {
	out := new(SMemberLevelListResponse)
	err := c.cc.Invoke(ctx, "/MemberService/GetLevels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetTrustInfo(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*STrustedInfo, error) {
	out := new(STrustedInfo)
	err := c.cc.Invoke(ctx, "/MemberService/GetTrustInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SubmitTrustInfo(ctx context.Context, in *SubmitTrustInfoRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/SubmitTrustInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ReviewTrustedInfo(ctx context.Context, in *ReviewTrustInfoRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ReviewTrustedInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetMemberLevel(ctx context.Context, in *Int32, opts ...grpc.CallOption) (*SMemberLevel, error) {
	out := new(SMemberLevel)
	err := c.cc.Invoke(ctx, "/MemberService/GetMemberLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SaveMemberLevel(ctx context.Context, in *SMemberLevel, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/SaveMemberLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetLevelBySign(ctx context.Context, in *String, opts ...grpc.CallOption) (*SMemberLevel, error) {
	out := new(SMemberLevel)
	err := c.cc.Invoke(ctx, "/MemberService/GetLevelBySign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DeleteMemberLevel(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/DeleteMemberLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetMember(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SMember, error) {
	out := new(SMember)
	err := c.cc.Invoke(ctx, "/MemberService/GetMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) FindMember(ctx context.Context, in *FindMemberRequest, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/MemberService/FindMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetProfile(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SProfile, error) {
	out := new(SProfile)
	err := c.cc.Invoke(ctx, "/MemberService/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SaveProfile(ctx context.Context, in *SProfile, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/SaveProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetRelation(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*MemberRelationResponse, error) {
	out := new(MemberRelationResponse)
	err := c.cc.Invoke(ctx, "/MemberService/GetRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetBankCards(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*BankCardListResponse, error) {
	out := new(BankCardListResponse)
	err := c.cc.Invoke(ctx, "/MemberService/GetBankCards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AddBankCard(ctx context.Context, in *BankCardAddRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/AddBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) RemoveBankCard(ctx context.Context, in *BankCardRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/RemoveBankCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Active(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/Active", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Unlock(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/Unlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GrantFlag(ctx context.Context, in *GrantFlagRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/GrantFlag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Complex(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SComplexMember, error) {
	out := new(SComplexMember)
	err := c.cc.Invoke(ctx, "/MemberService/Complex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/SendCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CompareCode(ctx context.Context, in *CompareCodeRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/CompareCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ReceiptsCodes(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SReceiptsCodeListResponse, error) {
	out := new(SReceiptsCodeListResponse)
	err := c.cc.Invoke(ctx, "/MemberService/ReceiptsCodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SaveReceiptsCode(ctx context.Context, in *ReceiptsCodeSaveRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/SaveReceiptsCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SetPayPriority(ctx context.Context, in *PayPriorityRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/SetPayPriority", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CheckProfileComplete(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/CheckProfileComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberLevelInfo(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SMemberLevelInfo, error) {
	out := new(SMemberLevelInfo)
	err := c.cc.Invoke(ctx, "/MemberService/MemberLevelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UpdateLevel(ctx context.Context, in *UpdateLevelRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/UpdateLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ReviewLevelUpRequest(ctx context.Context, in *LevelUpReviewRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ReviewLevelUpRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ConfirmLevelUpRequest(ctx context.Context, in *LevelUpConfirmRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ConfirmLevelUpRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangePhone(ctx context.Context, in *ChangePhoneRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ChangePhone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangeUser(ctx context.Context, in *ChangeUserRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ChangeUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangeAvatar(ctx context.Context, in *AvatarRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ChangeAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ModifyPwd(ctx context.Context, in *ModifyPwdRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ModifyPwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ModifyTradePwd(ctx context.Context, in *ModifyPwdRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ModifyTradePwd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CheckProfileCompleted(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/MemberService/CheckProfileCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangeInviterId(ctx context.Context, in *ChangeInviterRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ChangeInviterId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) OrdersQuantity(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*OrderQuantityMapResponse, error) {
	out := new(OrderQuantityMapResponse)
	err := c.cc.Invoke(ctx, "/MemberService/OrdersQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Premium(ctx context.Context, in *PremiumRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/Premium", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/MemberService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/MemberService/CheckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) RemoveToken(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/MemberService/RemoveToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetAddressList(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*AddressListResponse, error) {
	out := new(AddressListResponse)
	err := c.cc.Invoke(ctx, "/MemberService/GetAddressList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SaveAddress(ctx context.Context, in *SaveAddressRequest, opts ...grpc.CallOption) (*SaveAddressResponse, error) {
	out := new(SaveAddressResponse)
	err := c.cc.Invoke(ctx, "/MemberService/SaveAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*SAddress, error) {
	out := new(SAddress)
	err := c.cc.Invoke(ctx, "/MemberService/GetAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DeleteAddress(ctx context.Context, in *AddressIdRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/DeleteAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetAccount(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SAccount, error) {
	out := new(SAccount)
	err := c.cc.Invoke(ctx, "/MemberService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) IsInvitation(ctx context.Context, in *IsInvitationRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/MemberService/IsInvitation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) InviterArray(ctx context.Context, in *DepthRequest, opts ...grpc.CallOption) (*InviterIdListResponse, error) {
	out := new(InviterIdListResponse)
	err := c.cc.Invoke(ctx, "/MemberService/InviterArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) InviteMembersQuantity(ctx context.Context, in *DepthRequest, opts ...grpc.CallOption) (*Int32, error) {
	out := new(Int32)
	err := c.cc.Invoke(ctx, "/MemberService/InviteMembersQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) QueryInviteQuantity(ctx context.Context, in *InviteQuantityRequest, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/MemberService/QueryInviteQuantity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) QueryInviteArray(ctx context.Context, in *InviteQuantityRequest, opts ...grpc.CallOption) (*MemberIdListResponse, error) {
	out := new(MemberIdListResponse)
	err := c.cc.Invoke(ctx, "/MemberService/QueryInviteArray", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetMyPagedInvitationMembers(ctx context.Context, in *MemberInvitationPagingRequest, opts ...grpc.CallOption) (*MemberInvitationPagingResponse, error) {
	out := new(MemberInvitationPagingResponse)
	err := c.cc.Invoke(ctx, "/MemberService/GetMyPagedInvitationMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountCharge(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/AccountCharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountConsume(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/AccountConsume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountDiscount(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/AccountDiscount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountRefund(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/AccountRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountAdjust(ctx context.Context, in *AccountAdjustRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/AccountAdjust", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountTransfer(ctx context.Context, in *AccountTransferRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/AccountTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Withdraw(ctx context.Context, in *WithdrawRequest, opts ...grpc.CallOption) (*WithdrawalResponse, error) {
	out := new(WithdrawalResponse)
	err := c.cc.Invoke(ctx, "/MemberService/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ReviewWithdrawal(ctx context.Context, in *ReviewWithdrawalRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/ReviewWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) FinishWithdrawal(ctx context.Context, in *FinishWithdrawalRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/FinishWithdrawal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) QueryWithdrawalLog(ctx context.Context, in *WithdrawalLogRequest, opts ...grpc.CallOption) (*WithdrawalLogsResponse, error) {
	out := new(WithdrawalLogsResponse)
	err := c.cc.Invoke(ctx, "/MemberService/QueryWithdrawalLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) B4EAuth(ctx context.Context, in *B4EAuthRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/B4EAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) PagingAccountLog(ctx context.Context, in *PagingAccountInfoRequest, opts ...grpc.CallOption) (*SPagingResult, error) {
	out := new(SPagingResult)
	err := c.cc.Invoke(ctx, "/MemberService/PagingAccountLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetWalletLog(ctx context.Context, in *WalletLogRequest, opts ...grpc.CallOption) (*WalletLogResponse, error) {
	out := new(WalletLogResponse)
	err := c.cc.Invoke(ctx, "/MemberService/GetWalletLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) RemoveFavorite(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/RemoveFavorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Favorite(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MemberService/Favorite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) IsFavored(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Bool, error) {
	out := new(Bool)
	err := c.cc.Invoke(ctx, "/MemberService/IsFavored", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) QueryCoupons(ctx context.Context, in *MemberCouponPagingRequest, opts ...grpc.CallOption) (*MemberCouponListResponse, error) {
	out := new(MemberCouponListResponse)
	err := c.cc.Invoke(ctx, "/MemberService/QueryCoupons", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServiceServer is the server API for MemberService service.
type MemberServiceServer interface {
	//*
	// 注册会员
	// @param user 登陆用户名
	// @param pwd 登陆密码,md5运算后的字符串
	// @param flag 用户自定义标志
	// @param phone 手机号码
	// @param email 邮箱
	// @param avatar 头像
	// @param extend 扩展数据
	// @return 注册结果，返回user_code
	Register(context.Context, *RegisterMemberRequest) (*RegisterResponse, error)
	// 登录，返回结果(Result)和会员编号(Id);
	// Result值为：-1:会员不存在; -2:账号密码不正确; -3:账号被停用
	CheckLogin(context.Context, *LoginRequest) (*Result, error)
	//* 验证交易密码
	VerifyTradePwd(context.Context, *PwdVerifyRequest) (*Result, error)
	//* 等级列表
	GetLevels(context.Context, *Empty) (*SMemberLevelListResponse, error)
	// 获取实名信息,memberId
	GetTrustInfo(context.Context, *Int64) (*STrustedInfo, error)
	//* 提交实名信息
	SubmitTrustInfo(context.Context, *SubmitTrustInfoRequest) (*Result, error)
	//* 审核实名认证,若重复审核将返回错误 *
	ReviewTrustedInfo(context.Context, *ReviewTrustInfoRequest) (*Result, error)
	//* 获取会员等级信息,id
	GetMemberLevel(context.Context, *Int32) (*SMemberLevel, error)
	//* 保存等级
	SaveMemberLevel(context.Context, *SMemberLevel) (*Result, error)
	// 根据SIGN获取等级,sign
	GetLevelBySign(context.Context, *String) (*SMemberLevel, error)
	// 删除会员等级
	DeleteMemberLevel(context.Context, *Int64) (*Result, error)
	// 根据会员编号获取会员信息
	GetMember(context.Context, *Int64) (*SMember, error)
	//* 查找交换会员编号
	FindMember(context.Context, *FindMemberRequest) (*Int64, error)
	// 根据会员编号获取会员资料
	GetProfile(context.Context, *Int64) (*SProfile, error)
	// 保存资料
	SaveProfile(context.Context, *SProfile) (*Result, error)
	// 获取会员邀请关系
	GetRelation(context.Context, *Int64) (*MemberRelationResponse, error)
	// 获取会员绑定银行卡信息
	GetBankCards(context.Context, *Int64) (*BankCardListResponse, error)
	// 添加银行卡
	AddBankCard(context.Context, *BankCardAddRequest) (*Result, error)
	// 移除绑定的银行卡
	RemoveBankCard(context.Context, *BankCardRequest) (*Result, error)
	//* 激活会员,memberId
	Active(context.Context, *Int64) (*Result, error)
	//* 锁定,minutes锁定分钟数,默认:-1永久锁定
	Lock(context.Context, *LockRequest) (*Result, error)
	//* 解锁会员
	Unlock(context.Context, *Int64) (*Result, error)
	//* 标志赋值, 如果flag小于零, 则异或运算
	GrantFlag(context.Context, *GrantFlagRequest) (*Result, error)
	//* 获取会员汇总信息,memberId
	Complex(context.Context, *Int64) (*SComplexMember, error)
	//* 发送会员验证码消息, 并返回验证码, 验证码通过data.code获取
	SendCode(context.Context, *SendCodeRequest) (*Result, error)
	//* 比较验证码是否正确
	CompareCode(context.Context, *CompareCodeRequest) (*Result, error)
	//* 获取收款码
	ReceiptsCodes(context.Context, *Int64) (*SReceiptsCodeListResponse, error)
	//* 保存收款码
	SaveReceiptsCode(context.Context, *ReceiptsCodeSaveRequest) (*Result, error)
	//设置余额优先支付
	SetPayPriority(context.Context, *PayPriorityRequest) (*Result, error)
	// 检查资料是否完成
	CheckProfileComplete(context.Context, *Int64) (*Result, error)
	//* 获取会员等级信息
	MemberLevelInfo(context.Context, *Int64) (*SMemberLevelInfo, error)
	// 更改会员等级
	UpdateLevel(context.Context, *UpdateLevelRequest) (*Result, error)
	// 审核升级申请
	ReviewLevelUpRequest(context.Context, *LevelUpReviewRequest) (*Result, error)
	// 确认升级申请
	ConfirmLevelUpRequest(context.Context, *LevelUpConfirmRequest) (*Result, error)
	// 更改手机号码，不验证手机格式
	ChangePhone(context.Context, *ChangePhoneRequest) (*Result, error)
	// 更改用户名
	ChangeUser(context.Context, *ChangeUserRequest) (*Result, error)
	// 上传会员头像
	ChangeAvatar(context.Context, *AvatarRequest) (*Result, error)
	//* 更改密码
	ModifyPwd(context.Context, *ModifyPwdRequest) (*Result, error)
	//* 更改交易密码
	ModifyTradePwd(context.Context, *ModifyPwdRequest) (*Result, error)
	// 检查资料是否完善
	CheckProfileCompleted(context.Context, *Int64) (*Bool, error)
	//* 更改邀请人
	ChangeInviterId(context.Context, *ChangeInviterRequest) (*Result, error)
	//* 获取会员的订单状态及其数量
	OrdersQuantity(context.Context, *Int64) (*OrderQuantityMapResponse, error)
	// 升级为高级会员
	Premium(context.Context, *PremiumRequest) (*Result, error)
	// 获取会员的会员Token,reset表示是否重置token
	GetToken(context.Context, *GetTokenRequest) (*String, error)
	// 检查会员的会话Token是否正确，如正确返回: 1
	CheckToken(context.Context, *CheckTokenRequest) (*Bool, error)
	// 移除会员的Token,memberId
	RemoveToken(context.Context, *Int64) (*Empty, error)
	// 获取会员的收货地址,memberId
	GetAddressList(context.Context, *Int64) (*AddressListResponse, error)
	// 保存会员的收货地址
	SaveAddress(context.Context, *SaveAddressRequest) (*SaveAddressResponse, error)
	// 获取地址，如果addrId为0，则返回默认地址
	GetAddress(context.Context, *GetAddressRequest) (*SAddress, error)
	//删除配送地址
	DeleteAddress(context.Context, *AddressIdRequest) (*Result, error)
	// 获取会员账户信息,memberId
	GetAccount(context.Context, *Int64) (*SAccount, error)
	//判断会员是否由指定会员邀请推荐的
	IsInvitation(context.Context, *IsInvitationRequest) (*Bool, error)
	// 获取自己的邀请人会员编号数组
	InviterArray(context.Context, *DepthRequest) (*InviterIdListResponse, error)
	// 获取邀请会员的数量
	InviteMembersQuantity(context.Context, *DepthRequest) (*Int32, error)
	// 按条件获取荐指定等级会员的数量
	QueryInviteQuantity(context.Context, *InviteQuantityRequest) (*Int64, error)
	// 按条件获取荐指定等级会员的列表
	QueryInviteArray(context.Context, *InviteQuantityRequest) (*MemberIdListResponse, error)
	// 获取我邀请的会员及会员邀请的人数
	GetMyPagedInvitationMembers(context.Context, *MemberInvitationPagingRequest) (*MemberInvitationPagingResponse, error)
	// 账户充值,amount精确到分
	AccountCharge(context.Context, *AccountChangeRequest) (*Result, error)
	// 账户消耗,amount精确到分
	AccountConsume(context.Context, *AccountChangeRequest) (*Result, error)
	// 账户抵扣,amount精确到分
	AccountDiscount(context.Context, *AccountChangeRequest) (*Result, error)
	// 账户退款,amount精确到分
	AccountRefund(context.Context, *AccountChangeRequest) (*Result, error)
	// 账户人工调整
	AccountAdjust(context.Context, *AccountAdjustRequest) (*Result, error)
	// 转账转账
	AccountTransfer(context.Context, *AccountTransferRequest) (*Result, error)
	// 提现并返回提现编号,交易号以及错误信息
	Withdraw(context.Context, *WithdrawRequest) (*WithdrawalResponse, error)
	// 确认提现
	ReviewWithdrawal(context.Context, *ReviewWithdrawalRequest) (*Result, error)
	// 收到款项,完成提现
	FinishWithdrawal(context.Context, *FinishWithdrawalRequest) (*Result, error)
	// 查询提现记录
	QueryWithdrawalLog(context.Context, *WithdrawalLogRequest) (*WithdrawalLogsResponse, error)
	// !银行四要素认证
	B4EAuth(context.Context, *B4EAuthRequest) (*Result, error)
	//* 获取指定账户的流水记录
	PagingAccountLog(context.Context, *PagingAccountInfoRequest) (*SPagingResult, error)
	// 获取钱包流水记录
	GetWalletLog(context.Context, *WalletLogRequest) (*WalletLogResponse, error)
	// 取消收藏
	RemoveFavorite(context.Context, *FavoriteRequest) (*Result, error)
	// 收藏商品
	Favorite(context.Context, *FavoriteRequest) (*Result, error)
	// 是否已收藏
	IsFavored(context.Context, *FavoriteRequest) (*Bool, error)
	// 查询优惠券
	QueryCoupons(context.Context, *MemberCouponPagingRequest) (*MemberCouponListResponse, error)
}

// UnimplementedMemberServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMemberServiceServer struct {
}

func (*UnimplementedMemberServiceServer) Register(context.Context, *RegisterMemberRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedMemberServiceServer) CheckLogin(context.Context, *LoginRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLogin not implemented")
}
func (*UnimplementedMemberServiceServer) VerifyTradePwd(context.Context, *PwdVerifyRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTradePwd not implemented")
}
func (*UnimplementedMemberServiceServer) GetLevels(context.Context, *Empty) (*SMemberLevelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLevels not implemented")
}
func (*UnimplementedMemberServiceServer) GetTrustInfo(context.Context, *Int64) (*STrustedInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrustInfo not implemented")
}
func (*UnimplementedMemberServiceServer) SubmitTrustInfo(context.Context, *SubmitTrustInfoRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTrustInfo not implemented")
}
func (*UnimplementedMemberServiceServer) ReviewTrustedInfo(context.Context, *ReviewTrustInfoRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewTrustedInfo not implemented")
}
func (*UnimplementedMemberServiceServer) GetMemberLevel(context.Context, *Int32) (*SMemberLevel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberLevel not implemented")
}
func (*UnimplementedMemberServiceServer) SaveMemberLevel(context.Context, *SMemberLevel) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMemberLevel not implemented")
}
func (*UnimplementedMemberServiceServer) GetLevelBySign(context.Context, *String) (*SMemberLevel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLevelBySign not implemented")
}
func (*UnimplementedMemberServiceServer) DeleteMemberLevel(context.Context, *Int64) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberLevel not implemented")
}
func (*UnimplementedMemberServiceServer) GetMember(context.Context, *Int64) (*SMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (*UnimplementedMemberServiceServer) FindMember(context.Context, *FindMemberRequest) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMember not implemented")
}
func (*UnimplementedMemberServiceServer) GetProfile(context.Context, *Int64) (*SProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (*UnimplementedMemberServiceServer) SaveProfile(context.Context, *SProfile) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProfile not implemented")
}
func (*UnimplementedMemberServiceServer) GetRelation(context.Context, *Int64) (*MemberRelationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelation not implemented")
}
func (*UnimplementedMemberServiceServer) GetBankCards(context.Context, *Int64) (*BankCardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankCards not implemented")
}
func (*UnimplementedMemberServiceServer) AddBankCard(context.Context, *BankCardAddRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBankCard not implemented")
}
func (*UnimplementedMemberServiceServer) RemoveBankCard(context.Context, *BankCardRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBankCard not implemented")
}
func (*UnimplementedMemberServiceServer) Active(context.Context, *Int64) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (*UnimplementedMemberServiceServer) Lock(context.Context, *LockRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (*UnimplementedMemberServiceServer) Unlock(context.Context, *Int64) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (*UnimplementedMemberServiceServer) GrantFlag(context.Context, *GrantFlagRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantFlag not implemented")
}
func (*UnimplementedMemberServiceServer) Complex(context.Context, *Int64) (*SComplexMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complex not implemented")
}
func (*UnimplementedMemberServiceServer) SendCode(context.Context, *SendCodeRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCode not implemented")
}
func (*UnimplementedMemberServiceServer) CompareCode(context.Context, *CompareCodeRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareCode not implemented")
}
func (*UnimplementedMemberServiceServer) ReceiptsCodes(context.Context, *Int64) (*SReceiptsCodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiptsCodes not implemented")
}
func (*UnimplementedMemberServiceServer) SaveReceiptsCode(context.Context, *ReceiptsCodeSaveRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveReceiptsCode not implemented")
}
func (*UnimplementedMemberServiceServer) SetPayPriority(context.Context, *PayPriorityRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPayPriority not implemented")
}
func (*UnimplementedMemberServiceServer) CheckProfileComplete(context.Context, *Int64) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProfileComplete not implemented")
}
func (*UnimplementedMemberServiceServer) MemberLevelInfo(context.Context, *Int64) (*SMemberLevelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberLevelInfo not implemented")
}
func (*UnimplementedMemberServiceServer) UpdateLevel(context.Context, *UpdateLevelRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLevel not implemented")
}
func (*UnimplementedMemberServiceServer) ReviewLevelUpRequest(context.Context, *LevelUpReviewRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewLevelUpRequest not implemented")
}
func (*UnimplementedMemberServiceServer) ConfirmLevelUpRequest(context.Context, *LevelUpConfirmRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmLevelUpRequest not implemented")
}
func (*UnimplementedMemberServiceServer) ChangePhone(context.Context, *ChangePhoneRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePhone not implemented")
}
func (*UnimplementedMemberServiceServer) ChangeUser(context.Context, *ChangeUserRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUser not implemented")
}
func (*UnimplementedMemberServiceServer) ChangeAvatar(context.Context, *AvatarRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAvatar not implemented")
}
func (*UnimplementedMemberServiceServer) ModifyPwd(context.Context, *ModifyPwdRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPwd not implemented")
}
func (*UnimplementedMemberServiceServer) ModifyTradePwd(context.Context, *ModifyPwdRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyTradePwd not implemented")
}
func (*UnimplementedMemberServiceServer) CheckProfileCompleted(context.Context, *Int64) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProfileCompleted not implemented")
}
func (*UnimplementedMemberServiceServer) ChangeInviterId(context.Context, *ChangeInviterRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeInviterId not implemented")
}
func (*UnimplementedMemberServiceServer) OrdersQuantity(context.Context, *Int64) (*OrderQuantityMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrdersQuantity not implemented")
}
func (*UnimplementedMemberServiceServer) Premium(context.Context, *PremiumRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Premium not implemented")
}
func (*UnimplementedMemberServiceServer) GetToken(context.Context, *GetTokenRequest) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (*UnimplementedMemberServiceServer) CheckToken(context.Context, *CheckTokenRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (*UnimplementedMemberServiceServer) RemoveToken(context.Context, *Int64) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveToken not implemented")
}
func (*UnimplementedMemberServiceServer) GetAddressList(context.Context, *Int64) (*AddressListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressList not implemented")
}
func (*UnimplementedMemberServiceServer) SaveAddress(context.Context, *SaveAddressRequest) (*SaveAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAddress not implemented")
}
func (*UnimplementedMemberServiceServer) GetAddress(context.Context, *GetAddressRequest) (*SAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (*UnimplementedMemberServiceServer) DeleteAddress(context.Context, *AddressIdRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddress not implemented")
}
func (*UnimplementedMemberServiceServer) GetAccount(context.Context, *Int64) (*SAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedMemberServiceServer) IsInvitation(context.Context, *IsInvitationRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInvitation not implemented")
}
func (*UnimplementedMemberServiceServer) InviterArray(context.Context, *DepthRequest) (*InviterIdListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviterArray not implemented")
}
func (*UnimplementedMemberServiceServer) InviteMembersQuantity(context.Context, *DepthRequest) (*Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteMembersQuantity not implemented")
}
func (*UnimplementedMemberServiceServer) QueryInviteQuantity(context.Context, *InviteQuantityRequest) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInviteQuantity not implemented")
}
func (*UnimplementedMemberServiceServer) QueryInviteArray(context.Context, *InviteQuantityRequest) (*MemberIdListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInviteArray not implemented")
}
func (*UnimplementedMemberServiceServer) GetMyPagedInvitationMembers(context.Context, *MemberInvitationPagingRequest) (*MemberInvitationPagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyPagedInvitationMembers not implemented")
}
func (*UnimplementedMemberServiceServer) AccountCharge(context.Context, *AccountChangeRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCharge not implemented")
}
func (*UnimplementedMemberServiceServer) AccountConsume(context.Context, *AccountChangeRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountConsume not implemented")
}
func (*UnimplementedMemberServiceServer) AccountDiscount(context.Context, *AccountChangeRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDiscount not implemented")
}
func (*UnimplementedMemberServiceServer) AccountRefund(context.Context, *AccountChangeRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountRefund not implemented")
}
func (*UnimplementedMemberServiceServer) AccountAdjust(context.Context, *AccountAdjustRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAdjust not implemented")
}
func (*UnimplementedMemberServiceServer) AccountTransfer(context.Context, *AccountTransferRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountTransfer not implemented")
}
func (*UnimplementedMemberServiceServer) Withdraw(context.Context, *WithdrawRequest) (*WithdrawalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (*UnimplementedMemberServiceServer) ReviewWithdrawal(context.Context, *ReviewWithdrawalRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewWithdrawal not implemented")
}
func (*UnimplementedMemberServiceServer) FinishWithdrawal(context.Context, *FinishWithdrawalRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishWithdrawal not implemented")
}
func (*UnimplementedMemberServiceServer) QueryWithdrawalLog(context.Context, *WithdrawalLogRequest) (*WithdrawalLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWithdrawalLog not implemented")
}
func (*UnimplementedMemberServiceServer) B4EAuth(context.Context, *B4EAuthRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method B4EAuth not implemented")
}
func (*UnimplementedMemberServiceServer) PagingAccountLog(context.Context, *PagingAccountInfoRequest) (*SPagingResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagingAccountLog not implemented")
}
func (*UnimplementedMemberServiceServer) GetWalletLog(context.Context, *WalletLogRequest) (*WalletLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletLog not implemented")
}
func (*UnimplementedMemberServiceServer) RemoveFavorite(context.Context, *FavoriteRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFavorite not implemented")
}
func (*UnimplementedMemberServiceServer) Favorite(context.Context, *FavoriteRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Favorite not implemented")
}
func (*UnimplementedMemberServiceServer) IsFavored(context.Context, *FavoriteRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFavored not implemented")
}
func (*UnimplementedMemberServiceServer) QueryCoupons(context.Context, *MemberCouponPagingRequest) (*MemberCouponListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCoupons not implemented")
}

func RegisterMemberServiceServer(s *grpc.Server, srv MemberServiceServer) {
	s.RegisterService(&_MemberService_serviceDesc, srv)
}

func _MemberService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Register(ctx, req.(*RegisterMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/CheckLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CheckLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_VerifyTradePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PwdVerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).VerifyTradePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/VerifyTradePwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).VerifyTradePwd(ctx, req.(*PwdVerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetLevels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetLevels(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetTrustInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetTrustInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetTrustInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetTrustInfo(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SubmitTrustInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTrustInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SubmitTrustInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/SubmitTrustInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SubmitTrustInfo(ctx, req.(*SubmitTrustInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ReviewTrustedInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewTrustInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ReviewTrustedInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ReviewTrustedInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ReviewTrustedInfo(ctx, req.(*ReviewTrustInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int32)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetMemberLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetMemberLevel(ctx, req.(*Int32))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SaveMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMemberLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SaveMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/SaveMemberLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SaveMemberLevel(ctx, req.(*SMemberLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetLevelBySign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetLevelBySign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetLevelBySign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetLevelBySign(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DeleteMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DeleteMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/DeleteMemberLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DeleteMemberLevel(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetMember(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_FindMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).FindMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/FindMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).FindMember(ctx, req.(*FindMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetProfile(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SaveProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SaveProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/SaveProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SaveProfile(ctx, req.(*SProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetRelation(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetBankCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetBankCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetBankCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetBankCards(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AddBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AddBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/AddBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AddBankCard(ctx, req.(*BankCardAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_RemoveBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).RemoveBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/RemoveBankCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).RemoveBankCard(ctx, req.(*BankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Active_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Active(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Active",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Active(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Unlock(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GrantFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GrantFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GrantFlag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GrantFlag(ctx, req.(*GrantFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Complex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Complex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Complex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Complex(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/SendCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SendCode(ctx, req.(*SendCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CompareCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CompareCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/CompareCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CompareCode(ctx, req.(*CompareCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ReceiptsCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ReceiptsCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ReceiptsCodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ReceiptsCodes(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SaveReceiptsCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiptsCodeSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SaveReceiptsCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/SaveReceiptsCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SaveReceiptsCode(ctx, req.(*ReceiptsCodeSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SetPayPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayPriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SetPayPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/SetPayPriority",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SetPayPriority(ctx, req.(*PayPriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CheckProfileComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CheckProfileComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/CheckProfileComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CheckProfileComplete(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberLevelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberLevelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/MemberLevelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberLevelInfo(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UpdateLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UpdateLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/UpdateLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UpdateLevel(ctx, req.(*UpdateLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ReviewLevelUpRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LevelUpReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ReviewLevelUpRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ReviewLevelUpRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ReviewLevelUpRequest(ctx, req.(*LevelUpReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ConfirmLevelUpRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LevelUpConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ConfirmLevelUpRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ConfirmLevelUpRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ConfirmLevelUpRequest(ctx, req.(*LevelUpConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ChangePhone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangePhone(ctx, req.(*ChangePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangeUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangeUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ChangeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangeUser(ctx, req.(*ChangeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangeAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangeAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ChangeAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangeAvatar(ctx, req.(*AvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ModifyPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ModifyPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ModifyPwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ModifyPwd(ctx, req.(*ModifyPwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ModifyTradePwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPwdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ModifyTradePwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ModifyTradePwd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ModifyTradePwd(ctx, req.(*ModifyPwdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CheckProfileCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CheckProfileCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/CheckProfileCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CheckProfileCompleted(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangeInviterId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeInviterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangeInviterId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ChangeInviterId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangeInviterId(ctx, req.(*ChangeInviterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_OrdersQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).OrdersQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/OrdersQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).OrdersQuantity(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Premium_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PremiumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Premium(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Premium",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Premium(ctx, req.(*PremiumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/CheckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_RemoveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).RemoveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/RemoveToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).RemoveToken(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetAddressList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetAddressList(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SaveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SaveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/SaveAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SaveAddress(ctx, req.(*SaveAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/DeleteAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DeleteAddress(ctx, req.(*AddressIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetAccount(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_IsInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).IsInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/IsInvitation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).IsInvitation(ctx, req.(*IsInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_InviterArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).InviterArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/InviterArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).InviterArray(ctx, req.(*DepthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_InviteMembersQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).InviteMembersQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/InviteMembersQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).InviteMembersQuantity(ctx, req.(*DepthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_QueryInviteQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).QueryInviteQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/QueryInviteQuantity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).QueryInviteQuantity(ctx, req.(*InviteQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_QueryInviteArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).QueryInviteArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/QueryInviteArray",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).QueryInviteArray(ctx, req.(*InviteQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetMyPagedInvitationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberInvitationPagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetMyPagedInvitationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetMyPagedInvitationMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetMyPagedInvitationMembers(ctx, req.(*MemberInvitationPagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/AccountCharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountCharge(ctx, req.(*AccountChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountConsume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountConsume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/AccountConsume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountConsume(ctx, req.(*AccountChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/AccountDiscount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountDiscount(ctx, req.(*AccountChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/AccountRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountRefund(ctx, req.(*AccountChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountAdjust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountAdjustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountAdjust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/AccountAdjust",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountAdjust(ctx, req.(*AccountAdjustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/AccountTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountTransfer(ctx, req.(*AccountTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Withdraw(ctx, req.(*WithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ReviewWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ReviewWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/ReviewWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ReviewWithdrawal(ctx, req.(*ReviewWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_FinishWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).FinishWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/FinishWithdrawal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).FinishWithdrawal(ctx, req.(*FinishWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_QueryWithdrawalLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).QueryWithdrawalLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/QueryWithdrawalLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).QueryWithdrawalLog(ctx, req.(*WithdrawalLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_B4EAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(B4EAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).B4EAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/B4EAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).B4EAuth(ctx, req.(*B4EAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_PagingAccountLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PagingAccountInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).PagingAccountLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/PagingAccountLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).PagingAccountLog(ctx, req.(*PagingAccountInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetWalletLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WalletLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetWalletLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/GetWalletLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetWalletLog(ctx, req.(*WalletLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_RemoveFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).RemoveFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/RemoveFavorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).RemoveFavorite(ctx, req.(*FavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Favorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Favorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/Favorite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Favorite(ctx, req.(*FavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_IsFavored_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).IsFavored(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/IsFavored",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).IsFavored(ctx, req.(*FavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_QueryCoupons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberCouponPagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).QueryCoupons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MemberService/QueryCoupons",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).QueryCoupons(ctx, req.(*MemberCouponPagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MemberService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _MemberService_Register_Handler,
		},
		{
			MethodName: "CheckLogin",
			Handler:    _MemberService_CheckLogin_Handler,
		},
		{
			MethodName: "VerifyTradePwd",
			Handler:    _MemberService_VerifyTradePwd_Handler,
		},
		{
			MethodName: "GetLevels",
			Handler:    _MemberService_GetLevels_Handler,
		},
		{
			MethodName: "GetTrustInfo",
			Handler:    _MemberService_GetTrustInfo_Handler,
		},
		{
			MethodName: "SubmitTrustInfo",
			Handler:    _MemberService_SubmitTrustInfo_Handler,
		},
		{
			MethodName: "ReviewTrustedInfo",
			Handler:    _MemberService_ReviewTrustedInfo_Handler,
		},
		{
			MethodName: "GetMemberLevel",
			Handler:    _MemberService_GetMemberLevel_Handler,
		},
		{
			MethodName: "SaveMemberLevel",
			Handler:    _MemberService_SaveMemberLevel_Handler,
		},
		{
			MethodName: "GetLevelBySign",
			Handler:    _MemberService_GetLevelBySign_Handler,
		},
		{
			MethodName: "DeleteMemberLevel",
			Handler:    _MemberService_DeleteMemberLevel_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _MemberService_GetMember_Handler,
		},
		{
			MethodName: "FindMember",
			Handler:    _MemberService_FindMember_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _MemberService_GetProfile_Handler,
		},
		{
			MethodName: "SaveProfile",
			Handler:    _MemberService_SaveProfile_Handler,
		},
		{
			MethodName: "GetRelation",
			Handler:    _MemberService_GetRelation_Handler,
		},
		{
			MethodName: "GetBankCards",
			Handler:    _MemberService_GetBankCards_Handler,
		},
		{
			MethodName: "AddBankCard",
			Handler:    _MemberService_AddBankCard_Handler,
		},
		{
			MethodName: "RemoveBankCard",
			Handler:    _MemberService_RemoveBankCard_Handler,
		},
		{
			MethodName: "Active",
			Handler:    _MemberService_Active_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _MemberService_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _MemberService_Unlock_Handler,
		},
		{
			MethodName: "GrantFlag",
			Handler:    _MemberService_GrantFlag_Handler,
		},
		{
			MethodName: "Complex",
			Handler:    _MemberService_Complex_Handler,
		},
		{
			MethodName: "SendCode",
			Handler:    _MemberService_SendCode_Handler,
		},
		{
			MethodName: "CompareCode",
			Handler:    _MemberService_CompareCode_Handler,
		},
		{
			MethodName: "ReceiptsCodes",
			Handler:    _MemberService_ReceiptsCodes_Handler,
		},
		{
			MethodName: "SaveReceiptsCode",
			Handler:    _MemberService_SaveReceiptsCode_Handler,
		},
		{
			MethodName: "SetPayPriority",
			Handler:    _MemberService_SetPayPriority_Handler,
		},
		{
			MethodName: "CheckProfileComplete",
			Handler:    _MemberService_CheckProfileComplete_Handler,
		},
		{
			MethodName: "MemberLevelInfo",
			Handler:    _MemberService_MemberLevelInfo_Handler,
		},
		{
			MethodName: "UpdateLevel",
			Handler:    _MemberService_UpdateLevel_Handler,
		},
		{
			MethodName: "ReviewLevelUpRequest",
			Handler:    _MemberService_ReviewLevelUpRequest_Handler,
		},
		{
			MethodName: "ConfirmLevelUpRequest",
			Handler:    _MemberService_ConfirmLevelUpRequest_Handler,
		},
		{
			MethodName: "ChangePhone",
			Handler:    _MemberService_ChangePhone_Handler,
		},
		{
			MethodName: "ChangeUser",
			Handler:    _MemberService_ChangeUser_Handler,
		},
		{
			MethodName: "ChangeAvatar",
			Handler:    _MemberService_ChangeAvatar_Handler,
		},
		{
			MethodName: "ModifyPwd",
			Handler:    _MemberService_ModifyPwd_Handler,
		},
		{
			MethodName: "ModifyTradePwd",
			Handler:    _MemberService_ModifyTradePwd_Handler,
		},
		{
			MethodName: "CheckProfileCompleted",
			Handler:    _MemberService_CheckProfileCompleted_Handler,
		},
		{
			MethodName: "ChangeInviterId",
			Handler:    _MemberService_ChangeInviterId_Handler,
		},
		{
			MethodName: "OrdersQuantity",
			Handler:    _MemberService_OrdersQuantity_Handler,
		},
		{
			MethodName: "Premium",
			Handler:    _MemberService_Premium_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _MemberService_GetToken_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _MemberService_CheckToken_Handler,
		},
		{
			MethodName: "RemoveToken",
			Handler:    _MemberService_RemoveToken_Handler,
		},
		{
			MethodName: "GetAddressList",
			Handler:    _MemberService_GetAddressList_Handler,
		},
		{
			MethodName: "SaveAddress",
			Handler:    _MemberService_SaveAddress_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _MemberService_GetAddress_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _MemberService_DeleteAddress_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _MemberService_GetAccount_Handler,
		},
		{
			MethodName: "IsInvitation",
			Handler:    _MemberService_IsInvitation_Handler,
		},
		{
			MethodName: "InviterArray",
			Handler:    _MemberService_InviterArray_Handler,
		},
		{
			MethodName: "InviteMembersQuantity",
			Handler:    _MemberService_InviteMembersQuantity_Handler,
		},
		{
			MethodName: "QueryInviteQuantity",
			Handler:    _MemberService_QueryInviteQuantity_Handler,
		},
		{
			MethodName: "QueryInviteArray",
			Handler:    _MemberService_QueryInviteArray_Handler,
		},
		{
			MethodName: "GetMyPagedInvitationMembers",
			Handler:    _MemberService_GetMyPagedInvitationMembers_Handler,
		},
		{
			MethodName: "AccountCharge",
			Handler:    _MemberService_AccountCharge_Handler,
		},
		{
			MethodName: "AccountConsume",
			Handler:    _MemberService_AccountConsume_Handler,
		},
		{
			MethodName: "AccountDiscount",
			Handler:    _MemberService_AccountDiscount_Handler,
		},
		{
			MethodName: "AccountRefund",
			Handler:    _MemberService_AccountRefund_Handler,
		},
		{
			MethodName: "AccountAdjust",
			Handler:    _MemberService_AccountAdjust_Handler,
		},
		{
			MethodName: "AccountTransfer",
			Handler:    _MemberService_AccountTransfer_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _MemberService_Withdraw_Handler,
		},
		{
			MethodName: "ReviewWithdrawal",
			Handler:    _MemberService_ReviewWithdrawal_Handler,
		},
		{
			MethodName: "FinishWithdrawal",
			Handler:    _MemberService_FinishWithdrawal_Handler,
		},
		{
			MethodName: "QueryWithdrawalLog",
			Handler:    _MemberService_QueryWithdrawalLog_Handler,
		},
		{
			MethodName: "B4EAuth",
			Handler:    _MemberService_B4EAuth_Handler,
		},
		{
			MethodName: "PagingAccountLog",
			Handler:    _MemberService_PagingAccountLog_Handler,
		},
		{
			MethodName: "GetWalletLog",
			Handler:    _MemberService_GetWalletLog_Handler,
		},
		{
			MethodName: "RemoveFavorite",
			Handler:    _MemberService_RemoveFavorite_Handler,
		},
		{
			MethodName: "Favorite",
			Handler:    _MemberService_Favorite_Handler,
		},
		{
			MethodName: "IsFavored",
			Handler:    _MemberService_IsFavored_Handler,
		},
		{
			MethodName: "QueryCoupons",
			Handler:    _MemberService_QueryCoupons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "member_service.proto",
}
