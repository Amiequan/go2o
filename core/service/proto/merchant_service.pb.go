// Code generated by protoc-gen-go. DO NOT EDIT.
// source: merchant_service.proto

package proto // import "."

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MerchantOrderRequest struct {
	// 　商户编号
	MerchantId int64 `protobuf:"varint,1,opt,name=MerchantId,proto3" json:"MerchantId,omitempty"`
	// 是否分页
	Pagination bool `protobuf:"varint,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
	// 　分页参数
	Params               *SPagingParams `protobuf:"bytes,3,opt,name=Params,proto3" json:"Params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MerchantOrderRequest) Reset()         { *m = MerchantOrderRequest{} }
func (m *MerchantOrderRequest) String() string { return proto.CompactTextString(m) }
func (*MerchantOrderRequest) ProtoMessage()    {}
func (*MerchantOrderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_merchant_service_ac4c0edaa62b3b4c, []int{0}
}
func (m *MerchantOrderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MerchantOrderRequest.Unmarshal(m, b)
}
func (m *MerchantOrderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MerchantOrderRequest.Marshal(b, m, deterministic)
}
func (dst *MerchantOrderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MerchantOrderRequest.Merge(dst, src)
}
func (m *MerchantOrderRequest) XXX_Size() int {
	return xxx_messageInfo_MerchantOrderRequest.Size(m)
}
func (m *MerchantOrderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MerchantOrderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MerchantOrderRequest proto.InternalMessageInfo

func (m *MerchantOrderRequest) GetMerchantId() int64 {
	if m != nil {
		return m.MerchantId
	}
	return 0
}

func (m *MerchantOrderRequest) GetPagination() bool {
	if m != nil {
		return m.Pagination
	}
	return false
}

func (m *MerchantOrderRequest) GetParams() *SPagingParams {
	if m != nil {
		return m.Params
	}
	return nil
}

type PagingMerchantOrderListResponse struct {
	Total                int64             `protobuf:"varint,1,opt,name=Total,proto3" json:"Total,omitempty"`
	Value                []*SMerchantOrder `protobuf:"bytes,2,rep,name=Value,proto3" json:"Value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PagingMerchantOrderListResponse) Reset()         { *m = PagingMerchantOrderListResponse{} }
func (m *PagingMerchantOrderListResponse) String() string { return proto.CompactTextString(m) }
func (*PagingMerchantOrderListResponse) ProtoMessage()    {}
func (*PagingMerchantOrderListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_merchant_service_ac4c0edaa62b3b4c, []int{1}
}
func (m *PagingMerchantOrderListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PagingMerchantOrderListResponse.Unmarshal(m, b)
}
func (m *PagingMerchantOrderListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PagingMerchantOrderListResponse.Marshal(b, m, deterministic)
}
func (dst *PagingMerchantOrderListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PagingMerchantOrderListResponse.Merge(dst, src)
}
func (m *PagingMerchantOrderListResponse) XXX_Size() int {
	return xxx_messageInfo_PagingMerchantOrderListResponse.Size(m)
}
func (m *PagingMerchantOrderListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PagingMerchantOrderListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PagingMerchantOrderListResponse proto.InternalMessageInfo

func (m *PagingMerchantOrderListResponse) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PagingMerchantOrderListResponse) GetValue() []*SMerchantOrder {
	if m != nil {
		return m.Value
	}
	return nil
}

type SMerchantOrder struct {
	OrderId              int64             `protobuf:"varint,1,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
	OrderNo              string            `protobuf:"bytes,2,opt,name=OrderNo,proto3" json:"OrderNo,omitempty"`
	ParentNo             string            `protobuf:"bytes,3,opt,name=ParentNo,proto3" json:"ParentNo,omitempty"`
	BuyerId              int64             `protobuf:"varint,4,opt,name=BuyerId,proto3" json:"BuyerId,omitempty"`
	BuyerName            string            `protobuf:"bytes,5,opt,name=BuyerName,proto3" json:"BuyerName,omitempty"`
	ItemAmount           float64           `protobuf:"fixed64,6,opt,name=ItemAmount,proto3" json:"ItemAmount,omitempty"`
	DiscountAmount       float64           `protobuf:"fixed64,7,opt,name=DiscountAmount,proto3" json:"DiscountAmount,omitempty"`
	ExpressFee           float64           `protobuf:"fixed64,8,opt,name=ExpressFee,proto3" json:"ExpressFee,omitempty"`
	PackageFee           float64           `protobuf:"fixed64,9,opt,name=PackageFee,proto3" json:"PackageFee,omitempty"`
	IsPaid               bool              `protobuf:"varint,10,opt,name=IsPaid,proto3" json:"IsPaid,omitempty"`
	FinalAmount          float64           `protobuf:"fixed64,11,opt,name=FinalAmount,proto3" json:"FinalAmount,omitempty"`
	State                int32             `protobuf:"varint,12,opt,name=State,proto3" json:"State,omitempty"`
	StateText            string            `protobuf:"bytes,13,opt,name=StateText,proto3" json:"StateText,omitempty"`
	CreateTime           int64             `protobuf:"varint,14,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	Items                []*SOrderItem     `protobuf:"bytes,15,rep,name=Items,proto3" json:"Items,omitempty"`
	Data                 map[string]string `protobuf:"bytes,16,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SMerchantOrder) Reset()         { *m = SMerchantOrder{} }
func (m *SMerchantOrder) String() string { return proto.CompactTextString(m) }
func (*SMerchantOrder) ProtoMessage()    {}
func (*SMerchantOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_merchant_service_ac4c0edaa62b3b4c, []int{2}
}
func (m *SMerchantOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SMerchantOrder.Unmarshal(m, b)
}
func (m *SMerchantOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SMerchantOrder.Marshal(b, m, deterministic)
}
func (dst *SMerchantOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SMerchantOrder.Merge(dst, src)
}
func (m *SMerchantOrder) XXX_Size() int {
	return xxx_messageInfo_SMerchantOrder.Size(m)
}
func (m *SMerchantOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_SMerchantOrder.DiscardUnknown(m)
}

var xxx_messageInfo_SMerchantOrder proto.InternalMessageInfo

func (m *SMerchantOrder) GetOrderId() int64 {
	if m != nil {
		return m.OrderId
	}
	return 0
}

func (m *SMerchantOrder) GetOrderNo() string {
	if m != nil {
		return m.OrderNo
	}
	return ""
}

func (m *SMerchantOrder) GetParentNo() string {
	if m != nil {
		return m.ParentNo
	}
	return ""
}

func (m *SMerchantOrder) GetBuyerId() int64 {
	if m != nil {
		return m.BuyerId
	}
	return 0
}

func (m *SMerchantOrder) GetBuyerName() string {
	if m != nil {
		return m.BuyerName
	}
	return ""
}

func (m *SMerchantOrder) GetItemAmount() float64 {
	if m != nil {
		return m.ItemAmount
	}
	return 0
}

func (m *SMerchantOrder) GetDiscountAmount() float64 {
	if m != nil {
		return m.DiscountAmount
	}
	return 0
}

func (m *SMerchantOrder) GetExpressFee() float64 {
	if m != nil {
		return m.ExpressFee
	}
	return 0
}

func (m *SMerchantOrder) GetPackageFee() float64 {
	if m != nil {
		return m.PackageFee
	}
	return 0
}

func (m *SMerchantOrder) GetIsPaid() bool {
	if m != nil {
		return m.IsPaid
	}
	return false
}

func (m *SMerchantOrder) GetFinalAmount() float64 {
	if m != nil {
		return m.FinalAmount
	}
	return 0
}

func (m *SMerchantOrder) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SMerchantOrder) GetStateText() string {
	if m != nil {
		return m.StateText
	}
	return ""
}

func (m *SMerchantOrder) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *SMerchantOrder) GetItems() []*SOrderItem {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *SMerchantOrder) GetData() map[string]string {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*MerchantOrderRequest)(nil), "MerchantOrderRequest")
	proto.RegisterType((*PagingMerchantOrderListResponse)(nil), "PagingMerchantOrderListResponse")
	proto.RegisterType((*SMerchantOrder)(nil), "SMerchantOrder")
	proto.RegisterMapType((map[string]string)(nil), "SMerchantOrder.DataEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MerchantServiceClient is the client API for MerchantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MerchantServiceClient interface {
	// 获取商家的信息,mchId
	GetMerchant(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SMerchant, error)
	// 注册商户并开店
	CreateMerchant(ctx context.Context, in *MerchantCreateRequest, opts ...grpc.CallOption) (*Result, error)
	// 验证用户密码,并返回编号。可传入商户或会员的账号密码
	CheckLogin(ctx context.Context, in *MchUserPwd, opts ...grpc.CallOption) (*Result, error)
	// 验证商户状态,mchId
	Stat(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	// 同步批发商品,mchId
	SyncWholesaleItem(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SyncWSItemsResponse, error)
	// 获取所有的交易设置,mchId
	GetAllTradeConf(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*STradeConfListResponse, error)
	// 根据交易类型获取交易设置
	GetTradeConf(ctx context.Context, in *TradeConfRequest, opts ...grpc.CallOption) (*STradeConf_, error)
	// 保存交易设置
	SaveTradeConf(ctx context.Context, in *TradeConfSaveRequest, opts ...grpc.CallOption) (*Result, error)
	// 创建会员申请商户密钥
	CreateSignUpToken(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*String, error)
	// 根据商户申请密钥获取会员编号
	GetMemberFromSignUpToken(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error)
	// 提交注册信息
	SignUp(ctx context.Context, in *SMchSignUp, opts ...grpc.CallOption) (*Result, error)
	// 获取会员商户申请信息
	GetMchSignUpId(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*Int64, error)
	// 根据ID获取商户申请信息
	GetSignUp(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SMchSignUp, error)
	// 审核商户申请信息
	ReviewSignUp(ctx context.Context, in *MchReviewRequest, opts ...grpc.CallOption) (*Result, error)
	// 删除会员的商户申请资料
	RemoveMerchantSignUp(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*Result, error)
	// 根据会员号获取商户编号
	GetMerchantIdByMember(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*Int64, error)
	// 获取企业信息,并返回是否为提交的信息
	GetEnterpriseInfo(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SEnterpriseInfo, error)
	// 保存企业信息
	SaveEnterpriseInfo(ctx context.Context, in *SaveEnterpriseRequest, opts ...grpc.CallOption) (*Result, error)
	// 审核企业信息
	ReviewEnterpriseInfo(ctx context.Context, in *MchReviewRequest, opts ...grpc.CallOption) (*Result, error)
	GetAccount(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantAccount, error)
	// rpc SaveMerchant_(mchId int64, v *merchant.Merchant) (int64, error)
	// 设置商户启用或停用
	SetEnabled(ctx context.Context, in *MerchantDisableRequest, opts ...grpc.CallOption) (*Result, error)
	// 根据主机查询商户编号
	GetMerchantIdByHost(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error)
	// 获取商户的域名
	GetMerchantMajorHost(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*String, error)
	SaveSaleConf(ctx context.Context, in *SaveMerchantSaleConfRequest, opts ...grpc.CallOption) (*Result, error)
	GetSaleConf(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantSaleConf, error)
	GetShopId(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*Int64, error)
	// 修改密码
	ModifyPassword(ctx context.Context, in *ModifyMerchantPasswordRequest, opts ...grpc.CallOption) (*Result, error)
	// 保存API信息
	// rpc SaveApiInfo(mchId int64, d *merchant.ApiInfo) error
	// 获取API接口
	GetApiInfo(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantApiInfo, error)
	// 启用/停用接口权限
	ToggleApiPerm(ctx context.Context, in *MerchantApiPermRequest, opts ...grpc.CallOption) (*Result, error)
	// 根据API ID获取MerchantId
	GetMerchantIdByApiId(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error)
	// 查询分页订单
	PagedNormalOrderOfVendor(ctx context.Context, in *MerchantOrderRequest, opts ...grpc.CallOption) (*PagingMerchantOrderListResponse, error)
	// 查询分页订单
	PagedWholesaleOrderOfVendor(ctx context.Context, in *MerchantOrderRequest, opts ...grpc.CallOption) (*PagingMerchantOrderListResponse, error)
	// 查询分页订单
	// rpc PagedTradeOrderOfVendor(MerchantOrderRequest) (int32, []*proto.SComplexOrder)
	// 提到会员账户
	WithdrawToMemberAccount(ctx context.Context, in *WithdrawToMemberAccountRequest, opts ...grpc.CallOption) (*Result, error)
	// 账户充值
	ChargeAccount(ctx context.Context, in *MerchantChargeRequest, opts ...grpc.CallOption) (*Result, error)
	GetMchBuyerGroup_(ctx context.Context, in *MerchantBuyerGroupId, opts ...grpc.CallOption) (*SMerchantBuyerGroup, error)
	// 保存
	SaveMchBuyerGroup_(ctx context.Context, in *SaveMerchantBuyerGroupRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取买家分组
	GetBuyerGroups(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*MerchantBuyerGroupListResponse, error)
	// 获取批发返点率
	GetRebateRate(ctx context.Context, in *MerchantBuyerGroupId, opts ...grpc.CallOption) (*WholesaleRebateRateListResponse, error)
	// 保存分组返点率
	SaveGroupRebateRate(ctx context.Context, in *SaveWholesaleRebateRateRequest, opts ...grpc.CallOption) (*Result, error)
}

type merchantServiceClient struct {
	cc *grpc.ClientConn
}

func NewMerchantServiceClient(cc *grpc.ClientConn) MerchantServiceClient {
	return &merchantServiceClient{cc}
}

func (c *merchantServiceClient) GetMerchant(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SMerchant, error) {
	out := new(SMerchant)
	err := c.cc.Invoke(ctx, "/MerchantService/GetMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CreateMerchant(ctx context.Context, in *MerchantCreateRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/CreateMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CheckLogin(ctx context.Context, in *MchUserPwd, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/CheckLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) Stat(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SyncWholesaleItem(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SyncWSItemsResponse, error) {
	out := new(SyncWSItemsResponse)
	err := c.cc.Invoke(ctx, "/MerchantService/SyncWholesaleItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAllTradeConf(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*STradeConfListResponse, error) {
	out := new(STradeConfListResponse)
	err := c.cc.Invoke(ctx, "/MerchantService/GetAllTradeConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetTradeConf(ctx context.Context, in *TradeConfRequest, opts ...grpc.CallOption) (*STradeConf_, error) {
	out := new(STradeConf_)
	err := c.cc.Invoke(ctx, "/MerchantService/GetTradeConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveTradeConf(ctx context.Context, in *TradeConfSaveRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/SaveTradeConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CreateSignUpToken(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/MerchantService/CreateSignUpToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMemberFromSignUpToken(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/MerchantService/GetMemberFromSignUpToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SignUp(ctx context.Context, in *SMchSignUp, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMchSignUpId(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/MerchantService/GetMchSignUpId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetSignUp(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SMchSignUp, error) {
	out := new(SMchSignUp)
	err := c.cc.Invoke(ctx, "/MerchantService/GetSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ReviewSignUp(ctx context.Context, in *MchReviewRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/ReviewSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) RemoveMerchantSignUp(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/RemoveMerchantSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchantIdByMember(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/MerchantService/GetMerchantIdByMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetEnterpriseInfo(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SEnterpriseInfo, error) {
	out := new(SEnterpriseInfo)
	err := c.cc.Invoke(ctx, "/MerchantService/GetEnterpriseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveEnterpriseInfo(ctx context.Context, in *SaveEnterpriseRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/SaveEnterpriseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ReviewEnterpriseInfo(ctx context.Context, in *MchReviewRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/ReviewEnterpriseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAccount(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantAccount, error) {
	out := new(SMerchantAccount)
	err := c.cc.Invoke(ctx, "/MerchantService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SetEnabled(ctx context.Context, in *MerchantDisableRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/SetEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchantIdByHost(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/MerchantService/GetMerchantIdByHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchantMajorHost(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/MerchantService/GetMerchantMajorHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveSaleConf(ctx context.Context, in *SaveMerchantSaleConfRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/SaveSaleConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetSaleConf(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantSaleConf, error) {
	out := new(SMerchantSaleConf)
	err := c.cc.Invoke(ctx, "/MerchantService/GetSaleConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetShopId(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/MerchantService/GetShopId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ModifyPassword(ctx context.Context, in *ModifyMerchantPasswordRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/ModifyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetApiInfo(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantApiInfo, error) {
	out := new(SMerchantApiInfo)
	err := c.cc.Invoke(ctx, "/MerchantService/GetApiInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ToggleApiPerm(ctx context.Context, in *MerchantApiPermRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/ToggleApiPerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchantIdByApiId(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/MerchantService/GetMerchantIdByApiId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) PagedNormalOrderOfVendor(ctx context.Context, in *MerchantOrderRequest, opts ...grpc.CallOption) (*PagingMerchantOrderListResponse, error) {
	out := new(PagingMerchantOrderListResponse)
	err := c.cc.Invoke(ctx, "/MerchantService/PagedNormalOrderOfVendor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) PagedWholesaleOrderOfVendor(ctx context.Context, in *MerchantOrderRequest, opts ...grpc.CallOption) (*PagingMerchantOrderListResponse, error) {
	out := new(PagingMerchantOrderListResponse)
	err := c.cc.Invoke(ctx, "/MerchantService/PagedWholesaleOrderOfVendor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) WithdrawToMemberAccount(ctx context.Context, in *WithdrawToMemberAccountRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/WithdrawToMemberAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ChargeAccount(ctx context.Context, in *MerchantChargeRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/ChargeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMchBuyerGroup_(ctx context.Context, in *MerchantBuyerGroupId, opts ...grpc.CallOption) (*SMerchantBuyerGroup, error) {
	out := new(SMerchantBuyerGroup)
	err := c.cc.Invoke(ctx, "/MerchantService/GetMchBuyerGroup_", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveMchBuyerGroup_(ctx context.Context, in *SaveMerchantBuyerGroupRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/SaveMchBuyerGroup_", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetBuyerGroups(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*MerchantBuyerGroupListResponse, error) {
	out := new(MerchantBuyerGroupListResponse)
	err := c.cc.Invoke(ctx, "/MerchantService/GetBuyerGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetRebateRate(ctx context.Context, in *MerchantBuyerGroupId, opts ...grpc.CallOption) (*WholesaleRebateRateListResponse, error) {
	out := new(WholesaleRebateRateListResponse)
	err := c.cc.Invoke(ctx, "/MerchantService/GetRebateRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveGroupRebateRate(ctx context.Context, in *SaveWholesaleRebateRateRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/SaveGroupRebateRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServiceServer is the server API for MerchantService service.
type MerchantServiceServer interface {
	// 获取商家的信息,mchId
	GetMerchant(context.Context, *Int64) (*SMerchant, error)
	// 注册商户并开店
	CreateMerchant(context.Context, *MerchantCreateRequest) (*Result, error)
	// 验证用户密码,并返回编号。可传入商户或会员的账号密码
	CheckLogin(context.Context, *MchUserPwd) (*Result, error)
	// 验证商户状态,mchId
	Stat(context.Context, *Int64) (*Result, error)
	// 同步批发商品,mchId
	SyncWholesaleItem(context.Context, *Int64) (*SyncWSItemsResponse, error)
	// 获取所有的交易设置,mchId
	GetAllTradeConf(context.Context, *Int64) (*STradeConfListResponse, error)
	// 根据交易类型获取交易设置
	GetTradeConf(context.Context, *TradeConfRequest) (*STradeConf_, error)
	// 保存交易设置
	SaveTradeConf(context.Context, *TradeConfSaveRequest) (*Result, error)
	// 创建会员申请商户密钥
	CreateSignUpToken(context.Context, *MemberId) (*String, error)
	// 根据商户申请密钥获取会员编号
	GetMemberFromSignUpToken(context.Context, *String) (*Int64, error)
	// 提交注册信息
	SignUp(context.Context, *SMchSignUp) (*Result, error)
	// 获取会员商户申请信息
	GetMchSignUpId(context.Context, *MemberId) (*Int64, error)
	// 根据ID获取商户申请信息
	GetSignUp(context.Context, *Int64) (*SMchSignUp, error)
	// 审核商户申请信息
	ReviewSignUp(context.Context, *MchReviewRequest) (*Result, error)
	// 删除会员的商户申请资料
	RemoveMerchantSignUp(context.Context, *MemberId) (*Result, error)
	// 根据会员号获取商户编号
	GetMerchantIdByMember(context.Context, *MemberId) (*Int64, error)
	// 获取企业信息,并返回是否为提交的信息
	GetEnterpriseInfo(context.Context, *MerchantId) (*SEnterpriseInfo, error)
	// 保存企业信息
	SaveEnterpriseInfo(context.Context, *SaveEnterpriseRequest) (*Result, error)
	// 审核企业信息
	ReviewEnterpriseInfo(context.Context, *MchReviewRequest) (*Result, error)
	GetAccount(context.Context, *MerchantId) (*SMerchantAccount, error)
	// rpc SaveMerchant_(mchId int64, v *merchant.Merchant) (int64, error)
	// 设置商户启用或停用
	SetEnabled(context.Context, *MerchantDisableRequest) (*Result, error)
	// 根据主机查询商户编号
	GetMerchantIdByHost(context.Context, *String) (*Int64, error)
	// 获取商户的域名
	GetMerchantMajorHost(context.Context, *MerchantId) (*String, error)
	SaveSaleConf(context.Context, *SaveMerchantSaleConfRequest) (*Result, error)
	GetSaleConf(context.Context, *MerchantId) (*SMerchantSaleConf, error)
	GetShopId(context.Context, *MerchantId) (*Int64, error)
	// 修改密码
	ModifyPassword(context.Context, *ModifyMerchantPasswordRequest) (*Result, error)
	// 保存API信息
	// rpc SaveApiInfo(mchId int64, d *merchant.ApiInfo) error
	// 获取API接口
	GetApiInfo(context.Context, *MerchantId) (*SMerchantApiInfo, error)
	// 启用/停用接口权限
	ToggleApiPerm(context.Context, *MerchantApiPermRequest) (*Result, error)
	// 根据API ID获取MerchantId
	GetMerchantIdByApiId(context.Context, *String) (*Int64, error)
	// 查询分页订单
	PagedNormalOrderOfVendor(context.Context, *MerchantOrderRequest) (*PagingMerchantOrderListResponse, error)
	// 查询分页订单
	PagedWholesaleOrderOfVendor(context.Context, *MerchantOrderRequest) (*PagingMerchantOrderListResponse, error)
	// 查询分页订单
	// rpc PagedTradeOrderOfVendor(MerchantOrderRequest) (int32, []*proto.SComplexOrder)
	// 提到会员账户
	WithdrawToMemberAccount(context.Context, *WithdrawToMemberAccountRequest) (*Result, error)
	// 账户充值
	ChargeAccount(context.Context, *MerchantChargeRequest) (*Result, error)
	GetMchBuyerGroup_(context.Context, *MerchantBuyerGroupId) (*SMerchantBuyerGroup, error)
	// 保存
	SaveMchBuyerGroup_(context.Context, *SaveMerchantBuyerGroupRequest) (*Result, error)
	// 获取买家分组
	GetBuyerGroups(context.Context, *MerchantId) (*MerchantBuyerGroupListResponse, error)
	// 获取批发返点率
	GetRebateRate(context.Context, *MerchantBuyerGroupId) (*WholesaleRebateRateListResponse, error)
	// 保存分组返点率
	SaveGroupRebateRate(context.Context, *SaveWholesaleRebateRateRequest) (*Result, error)
}

func RegisterMerchantServiceServer(s *grpc.Server, srv MerchantServiceServer) {
	s.RegisterService(&_MerchantService_serviceDesc, srv)
}

func _MerchantService_GetMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchant(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CreateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/CreateMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateMerchant(ctx, req.(*MerchantCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MchUserPwd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/CheckLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CheckLogin(ctx, req.(*MchUserPwd))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).Stat(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SyncWholesaleItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SyncWholesaleItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/SyncWholesaleItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SyncWholesaleItem(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAllTradeConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAllTradeConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetAllTradeConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAllTradeConf(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetTradeConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetTradeConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetTradeConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetTradeConf(ctx, req.(*TradeConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveTradeConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeConfSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveTradeConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/SaveTradeConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveTradeConf(ctx, req.(*TradeConfSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CreateSignUpToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateSignUpToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/CreateSignUpToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateSignUpToken(ctx, req.(*MemberId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMemberFromSignUpToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMemberFromSignUpToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetMemberFromSignUpToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMemberFromSignUpToken(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMchSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SignUp(ctx, req.(*SMchSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMchSignUpId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMchSignUpId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetMchSignUpId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMchSignUpId(ctx, req.(*MemberId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetSignUp(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ReviewSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MchReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ReviewSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/ReviewSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ReviewSignUp(ctx, req.(*MchReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_RemoveMerchantSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).RemoveMerchantSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/RemoveMerchantSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).RemoveMerchantSignUp(ctx, req.(*MemberId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchantIdByMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantIdByMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetMerchantIdByMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantIdByMember(ctx, req.(*MemberId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetEnterpriseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetEnterpriseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetEnterpriseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetEnterpriseInfo(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveEnterpriseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveEnterpriseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveEnterpriseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/SaveEnterpriseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveEnterpriseInfo(ctx, req.(*SaveEnterpriseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ReviewEnterpriseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MchReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ReviewEnterpriseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/ReviewEnterpriseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ReviewEnterpriseInfo(ctx, req.(*MchReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAccount(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SetEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantDisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SetEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/SetEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SetEnabled(ctx, req.(*MerchantDisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchantIdByHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantIdByHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetMerchantIdByHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantIdByHost(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchantMajorHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantMajorHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetMerchantMajorHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantMajorHost(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveSaleConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMerchantSaleConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveSaleConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/SaveSaleConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveSaleConf(ctx, req.(*SaveMerchantSaleConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetSaleConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetSaleConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetSaleConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetSaleConf(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetShopId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetShopId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetShopId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetShopId(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ModifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyMerchantPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ModifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/ModifyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ModifyPassword(ctx, req.(*ModifyMerchantPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetApiInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetApiInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetApiInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetApiInfo(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ToggleApiPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantApiPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ToggleApiPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/ToggleApiPerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ToggleApiPerm(ctx, req.(*MerchantApiPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchantIdByApiId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantIdByApiId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetMerchantIdByApiId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantIdByApiId(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_PagedNormalOrderOfVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).PagedNormalOrderOfVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/PagedNormalOrderOfVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).PagedNormalOrderOfVendor(ctx, req.(*MerchantOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_PagedWholesaleOrderOfVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).PagedWholesaleOrderOfVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/PagedWholesaleOrderOfVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).PagedWholesaleOrderOfVendor(ctx, req.(*MerchantOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_WithdrawToMemberAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawToMemberAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).WithdrawToMemberAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/WithdrawToMemberAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).WithdrawToMemberAccount(ctx, req.(*WithdrawToMemberAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ChargeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ChargeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/ChargeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ChargeAccount(ctx, req.(*MerchantChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMchBuyerGroup__Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantBuyerGroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMchBuyerGroup_(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetMchBuyerGroup_",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMchBuyerGroup_(ctx, req.(*MerchantBuyerGroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveMchBuyerGroup__Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMerchantBuyerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveMchBuyerGroup_(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/SaveMchBuyerGroup_",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveMchBuyerGroup_(ctx, req.(*SaveMerchantBuyerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetBuyerGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetBuyerGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetBuyerGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetBuyerGroups(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetRebateRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantBuyerGroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetRebateRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetRebateRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetRebateRate(ctx, req.(*MerchantBuyerGroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveGroupRebateRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveWholesaleRebateRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveGroupRebateRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/SaveGroupRebateRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveGroupRebateRate(ctx, req.(*SaveWholesaleRebateRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MerchantService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MerchantService",
	HandlerType: (*MerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMerchant",
			Handler:    _MerchantService_GetMerchant_Handler,
		},
		{
			MethodName: "CreateMerchant",
			Handler:    _MerchantService_CreateMerchant_Handler,
		},
		{
			MethodName: "CheckLogin",
			Handler:    _MerchantService_CheckLogin_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _MerchantService_Stat_Handler,
		},
		{
			MethodName: "SyncWholesaleItem",
			Handler:    _MerchantService_SyncWholesaleItem_Handler,
		},
		{
			MethodName: "GetAllTradeConf",
			Handler:    _MerchantService_GetAllTradeConf_Handler,
		},
		{
			MethodName: "GetTradeConf",
			Handler:    _MerchantService_GetTradeConf_Handler,
		},
		{
			MethodName: "SaveTradeConf",
			Handler:    _MerchantService_SaveTradeConf_Handler,
		},
		{
			MethodName: "CreateSignUpToken",
			Handler:    _MerchantService_CreateSignUpToken_Handler,
		},
		{
			MethodName: "GetMemberFromSignUpToken",
			Handler:    _MerchantService_GetMemberFromSignUpToken_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _MerchantService_SignUp_Handler,
		},
		{
			MethodName: "GetMchSignUpId",
			Handler:    _MerchantService_GetMchSignUpId_Handler,
		},
		{
			MethodName: "GetSignUp",
			Handler:    _MerchantService_GetSignUp_Handler,
		},
		{
			MethodName: "ReviewSignUp",
			Handler:    _MerchantService_ReviewSignUp_Handler,
		},
		{
			MethodName: "RemoveMerchantSignUp",
			Handler:    _MerchantService_RemoveMerchantSignUp_Handler,
		},
		{
			MethodName: "GetMerchantIdByMember",
			Handler:    _MerchantService_GetMerchantIdByMember_Handler,
		},
		{
			MethodName: "GetEnterpriseInfo",
			Handler:    _MerchantService_GetEnterpriseInfo_Handler,
		},
		{
			MethodName: "SaveEnterpriseInfo",
			Handler:    _MerchantService_SaveEnterpriseInfo_Handler,
		},
		{
			MethodName: "ReviewEnterpriseInfo",
			Handler:    _MerchantService_ReviewEnterpriseInfo_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _MerchantService_GetAccount_Handler,
		},
		{
			MethodName: "SetEnabled",
			Handler:    _MerchantService_SetEnabled_Handler,
		},
		{
			MethodName: "GetMerchantIdByHost",
			Handler:    _MerchantService_GetMerchantIdByHost_Handler,
		},
		{
			MethodName: "GetMerchantMajorHost",
			Handler:    _MerchantService_GetMerchantMajorHost_Handler,
		},
		{
			MethodName: "SaveSaleConf",
			Handler:    _MerchantService_SaveSaleConf_Handler,
		},
		{
			MethodName: "GetSaleConf",
			Handler:    _MerchantService_GetSaleConf_Handler,
		},
		{
			MethodName: "GetShopId",
			Handler:    _MerchantService_GetShopId_Handler,
		},
		{
			MethodName: "ModifyPassword",
			Handler:    _MerchantService_ModifyPassword_Handler,
		},
		{
			MethodName: "GetApiInfo",
			Handler:    _MerchantService_GetApiInfo_Handler,
		},
		{
			MethodName: "ToggleApiPerm",
			Handler:    _MerchantService_ToggleApiPerm_Handler,
		},
		{
			MethodName: "GetMerchantIdByApiId",
			Handler:    _MerchantService_GetMerchantIdByApiId_Handler,
		},
		{
			MethodName: "PagedNormalOrderOfVendor",
			Handler:    _MerchantService_PagedNormalOrderOfVendor_Handler,
		},
		{
			MethodName: "PagedWholesaleOrderOfVendor",
			Handler:    _MerchantService_PagedWholesaleOrderOfVendor_Handler,
		},
		{
			MethodName: "WithdrawToMemberAccount",
			Handler:    _MerchantService_WithdrawToMemberAccount_Handler,
		},
		{
			MethodName: "ChargeAccount",
			Handler:    _MerchantService_ChargeAccount_Handler,
		},
		{
			MethodName: "GetMchBuyerGroup_",
			Handler:    _MerchantService_GetMchBuyerGroup__Handler,
		},
		{
			MethodName: "SaveMchBuyerGroup_",
			Handler:    _MerchantService_SaveMchBuyerGroup__Handler,
		},
		{
			MethodName: "GetBuyerGroups",
			Handler:    _MerchantService_GetBuyerGroups_Handler,
		},
		{
			MethodName: "GetRebateRate",
			Handler:    _MerchantService_GetRebateRate_Handler,
		},
		{
			MethodName: "SaveGroupRebateRate",
			Handler:    _MerchantService_SaveGroupRebateRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant_service.proto",
}

func init() {
	proto.RegisterFile("merchant_service.proto", fileDescriptor_merchant_service_ac4c0edaa62b3b4c)
}

var fileDescriptor_merchant_service_ac4c0edaa62b3b4c = []byte{
	// 1171 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xdd, 0x72, 0xd3, 0x46,
	0x14, 0xb6, 0xc9, 0x1f, 0x3e, 0x4e, 0x9c, 0x64, 0x09, 0x41, 0xb8, 0x0c, 0x71, 0xd5, 0xc2, 0xb8,
	0x33, 0xb0, 0xa5, 0x21, 0x53, 0x3a, 0xe5, 0xa2, 0x4d, 0x42, 0x70, 0xdd, 0xc1, 0xc1, 0x23, 0x05,
	0xe8, 0xf4, 0xa2, 0xcc, 0xc6, 0x3a, 0x91, 0xd5, 0x48, 0x5a, 0x77, 0xb5, 0x49, 0xc8, 0x4d, 0xdf,
	0xa0, 0x0f, 0xd4, 0xb7, 0xeb, 0xec, 0xae, 0x7e, 0x8d, 0x68, 0x6f, 0x7a, 0xe5, 0x3d, 0xdf, 0xf7,
	0x9d, 0xa3, 0xf3, 0xb7, 0xb2, 0x60, 0x3b, 0x42, 0x31, 0x99, 0xb2, 0x58, 0xbe, 0x4f, 0x50, 0x5c,
	0x06, 0x13, 0xa4, 0x33, 0xc1, 0x25, 0xef, 0xae, 0xfa, 0x21, 0x3f, 0x65, 0x61, 0x6a, 0x6d, 0x47,
	0x98, 0x24, 0xcc, 0xc7, 0xaf, 0x33, 0x75, 0x8a, 0xdf, 0xca, 0x70, 0x2e, 0x3c, 0x14, 0x06, 0xb4,
	0xff, 0x84, 0xad, 0x51, 0x2a, 0x7b, 0xad, 0x60, 0x07, 0xff, 0xb8, 0xc0, 0x44, 0x92, 0xfb, 0x00,
	0x19, 0x3e, 0xf4, 0xac, 0x66, 0xaf, 0xd9, 0x5f, 0x70, 0x4a, 0x88, 0xe2, 0xc7, 0xcc, 0x0f, 0x62,
	0x26, 0x03, 0x1e, 0x5b, 0x37, 0x7a, 0xcd, 0xfe, 0x4d, 0xa7, 0x84, 0x90, 0x87, 0xb0, 0x3c, 0x66,
	0x82, 0x45, 0x89, 0xb5, 0xd0, 0x6b, 0xf6, 0xdb, 0xbb, 0x1d, 0xea, 0x6a, 0xd6, 0x37, 0xa8, 0x93,
	0xb2, 0xf6, 0x6f, 0xb0, 0x63, 0xf0, 0x4a, 0x16, 0xaf, 0x82, 0x44, 0x3a, 0x98, 0xcc, 0x78, 0x9c,
	0x20, 0xd9, 0x82, 0xa5, 0x13, 0x2e, 0x59, 0x98, 0x66, 0x61, 0x0c, 0xf2, 0x00, 0x96, 0xde, 0xb2,
	0xf0, 0x02, 0xad, 0x1b, 0xbd, 0x85, 0x7e, 0x7b, 0x77, 0x9d, 0xba, 0xd5, 0x3a, 0x0c, 0x6b, 0xff,
	0xbd, 0x08, 0x9d, 0x2a, 0x43, 0x2c, 0x58, 0xd1, 0x87, 0xbc, 0xae, 0xcc, 0xcc, 0x99, 0x63, 0xae,
	0x2b, 0x6a, 0x39, 0x99, 0x49, 0xba, 0x70, 0x73, 0xcc, 0x04, 0xc6, 0xf2, 0x98, 0xeb, 0x82, 0x5a,
	0x4e, 0x6e, 0x2b, 0xaf, 0x83, 0x8b, 0x6b, 0x1d, 0x6f, 0xd1, 0xc4, 0x4b, 0x4d, 0x72, 0x0f, 0x5a,
	0xfa, 0x78, 0xcc, 0x22, 0xb4, 0x96, 0xb4, 0x5b, 0x01, 0xa8, 0x16, 0x0e, 0x25, 0x46, 0xfb, 0x11,
	0xbf, 0x88, 0xa5, 0xb5, 0xdc, 0x6b, 0xf6, 0x9b, 0x4e, 0x09, 0x21, 0x0f, 0xa1, 0xf3, 0x22, 0x48,
	0x26, 0xea, 0x9c, 0x6a, 0x56, 0xb4, 0x66, 0x0e, 0x55, 0x71, 0x8e, 0x3e, 0xcc, 0x04, 0x26, 0xc9,
	0x4b, 0x44, 0xeb, 0xa6, 0x89, 0x53, 0x20, 0x66, 0x54, 0x93, 0x73, 0xe6, 0xa3, 0xe2, 0x5b, 0x86,
	0x2f, 0x10, 0xb2, 0x0d, 0xcb, 0xc3, 0x64, 0xcc, 0x02, 0xcf, 0x02, 0x3d, 0xc6, 0xd4, 0x22, 0x3d,
	0x68, 0xbf, 0x0c, 0x62, 0x16, 0xa6, 0x0f, 0x6f, 0x6b, 0xc7, 0x32, 0xa4, 0x26, 0xe3, 0x4a, 0x26,
	0xd1, 0x5a, 0xed, 0x35, 0xfb, 0x4b, 0x8e, 0x31, 0x54, 0xd5, 0xfa, 0x70, 0x82, 0x1f, 0xa4, 0xb5,
	0x66, 0xaa, 0xce, 0x01, 0x95, 0xcd, 0xa1, 0x40, 0x65, 0x05, 0x11, 0x5a, 0x1d, 0xb3, 0x58, 0x05,
	0x42, 0x3e, 0x87, 0x25, 0xd5, 0x83, 0xc4, 0x5a, 0xd7, 0x73, 0x6d, 0x53, 0xd7, 0x4c, 0x47, 0x62,
	0xe4, 0x18, 0x86, 0x3c, 0x86, 0xc5, 0x17, 0x4c, 0x32, 0x6b, 0x43, 0x2b, 0xee, 0xce, 0x4d, 0x9e,
	0x2a, 0xee, 0x28, 0x96, 0xe2, 0xda, 0xd1, 0xb2, 0xee, 0x33, 0x68, 0xe5, 0x10, 0xd9, 0x80, 0x85,
	0x73, 0xbc, 0xd6, 0x83, 0x6f, 0x39, 0xea, 0xa8, 0x8a, 0xb8, 0x4c, 0x17, 0x49, 0x61, 0xc6, 0xf8,
	0xfe, 0xc6, 0x77, 0xcd, 0xdd, 0xbf, 0x36, 0x60, 0x3d, 0x0b, 0xed, 0x9a, 0x0b, 0x47, 0xbe, 0x80,
	0xf6, 0x00, 0x65, 0x86, 0x92, 0x65, 0x3a, 0x8c, 0xe5, 0xb7, 0x7b, 0x5d, 0x28, 0x92, 0xb0, 0x1b,
	0xe4, 0x29, 0x74, 0x4c, 0x45, 0xb9, 0x6e, 0x9b, 0x66, 0x47, 0x43, 0xa4, 0xd7, 0xac, 0xbb, 0x42,
	0x1d, 0x4c, 0x2e, 0x42, 0xe5, 0xf4, 0x25, 0xc0, 0xe1, 0x14, 0x27, 0xe7, 0xaf, 0xb8, 0x1f, 0xc4,
	0xa4, 0x4d, 0x47, 0x93, 0xe9, 0x9b, 0x04, 0xc5, 0xf8, 0xca, 0x2b, 0xab, 0xee, 0xc2, 0xa2, 0xea,
	0x65, 0xfe, 0xe0, 0x12, 0xf5, 0x14, 0x36, 0xdd, 0xeb, 0x78, 0xf2, 0x6e, 0xca, 0x43, 0x4c, 0x58,
	0x88, 0xaa, 0x59, 0xb9, 0x6e, 0x8b, 0x6a, 0xce, 0xd5, 0x1d, 0xcc, 0xae, 0x96, 0xdd, 0x20, 0x7b,
	0xb0, 0x3e, 0x40, 0xb9, 0x1f, 0x86, 0x27, 0x82, 0x79, 0x78, 0xc8, 0xe3, 0xb3, 0xdc, 0xe5, 0x0e,
	0x75, 0x73, 0xb0, 0x7c, 0x21, 0xed, 0x06, 0xf9, 0x06, 0x56, 0x07, 0x28, 0x0b, 0x97, 0x4d, 0x9a,
	0x9f, 0xb3, 0xca, 0x56, 0x4b, 0xde, 0xef, 0xb5, 0xcb, 0x9a, 0xcb, 0x2e, 0xb1, 0xf0, 0xb9, 0x5d,
	0xf8, 0x28, 0xa2, 0xa6, 0x23, 0x5f, 0xc1, 0xa6, 0xe9, 0x96, 0x1b, 0xf8, 0xf1, 0x9b, 0xd9, 0x09,
	0x3f, 0xc7, 0x98, 0xb4, 0xe8, 0x08, 0xa3, 0x53, 0x75, 0xbd, 0xba, 0x2b, 0xd4, 0x95, 0x22, 0x88,
	0x7d, 0xbb, 0x41, 0x1e, 0x83, 0xa5, 0xc7, 0xa2, 0x98, 0x97, 0x82, 0x47, 0x65, 0x8f, 0x4c, 0xd6,
	0x4d, 0x0b, 0xb3, 0x1b, 0xa4, 0x07, 0xcb, 0x46, 0x41, 0xda, 0xd4, 0x1d, 0x4d, 0xa6, 0xc6, 0x28,
	0x3f, 0xfb, 0x01, 0x74, 0x54, 0xc0, 0x8c, 0x1a, 0x7a, 0xe5, 0x07, 0x17, 0x81, 0x6c, 0x68, 0x0d,
	0x50, 0xa6, 0xb1, 0xb2, 0xc6, 0x95, 0x63, 0xda, 0x0d, 0xf2, 0x08, 0x56, 0x1d, 0xbc, 0x0c, 0xf0,
	0x2a, 0x95, 0x6d, 0xaa, 0xd1, 0x1a, 0xa4, 0xa6, 0xe8, 0x47, 0xb0, 0xe5, 0x60, 0xc4, 0x2f, 0xf3,
	0xdd, 0x49, 0xbd, 0x2a, 0x75, 0x97, 0xd4, 0xb7, 0x4b, 0xeb, 0x38, 0xf4, 0x0e, 0xae, 0x8d, 0xaa,
	0x3e, 0xdb, 0x3d, 0xd8, 0x1c, 0xa0, 0x3c, 0x8a, 0x25, 0x8a, 0x99, 0x08, 0x12, 0x1c, 0xc6, 0x67,
	0x5c, 0x6d, 0x5a, 0xee, 0xde, 0xdd, 0xa0, 0x6e, 0x95, 0xb6, 0x1b, 0xe4, 0x19, 0x10, 0x35, 0xa0,
	0x39, 0xb7, 0x6d, 0x5a, 0x05, 0x6b, 0x4a, 0xd9, 0x53, 0xa5, 0xa8, 0x32, 0xe7, 0x5c, 0xff, 0xbd,
	0x01, 0x14, 0x40, 0x6d, 0xe4, 0x44, 0xbf, 0xe2, 0xaa, 0xd9, 0x6d, 0x16, 0xb7, 0x2c, 0xe5, 0xed,
	0x06, 0x79, 0x02, 0xe0, 0xaa, 0xa2, 0xd8, 0x69, 0x88, 0x1e, 0xb9, 0x93, 0xeb, 0x5f, 0x04, 0x89,
	0x82, 0x6a, 0x9e, 0xd0, 0x87, 0x5b, 0x73, 0x4d, 0xfb, 0x89, 0x27, 0xb2, 0x6e, 0x4f, 0x28, 0x6c,
	0x95, 0x94, 0x23, 0xf6, 0x3b, 0x17, 0x5a, 0x5a, 0xc9, 0xaa, 0xb4, 0x86, 0xcf, 0x60, 0x55, 0x75,
	0xc5, 0x65, 0xa1, 0xd9, 0xf1, 0x7b, 0xba, 0x49, 0xf9, 0x24, 0x53, 0xb8, 0x26, 0xa5, 0x27, 0xfa,
	0xb5, 0x92, 0xfb, 0x55, 0xe2, 0x93, 0xa2, 0xea, 0x4c, 0x50, 0x6c, 0xde, 0x94, 0xab, 0xdd, 0xac,
	0xe8, 0x8b, 0xf4, 0x9f, 0x43, 0x67, 0xc4, 0xbd, 0xe0, 0xec, 0x7a, 0xcc, 0x92, 0xe4, 0x8a, 0x0b,
	0x8f, 0xdc, 0xa7, 0x06, 0xc8, 0xe4, 0x19, 0xf1, 0xe9, 0x39, 0xcc, 0x82, 0x8f, 0xb7, 0xa4, 0x3c,
	0x07, 0xc3, 0xeb, 0xd7, 0xcf, 0xda, 0x09, 0xf7, 0xfd, 0x10, 0xf7, 0x67, 0xc1, 0x18, 0x45, 0x54,
	0x1a, 0x45, 0x8a, 0xd4, 0x5e, 0xf1, 0xad, 0xb9, 0x51, 0xa8, 0x80, 0x5e, 0xdd, 0x2c, 0xde, 0x80,
	0x35, 0x66, 0x3e, 0x7a, 0xc7, 0x5c, 0x44, 0x2c, 0xd4, 0xaf, 0xfa, 0xd7, 0x67, 0x6f, 0x31, 0xf6,
	0xb8, 0x20, 0xb7, 0x69, 0xdd, 0x47, 0x4c, 0xb7, 0x47, 0xff, 0xe3, 0xdb, 0xc2, 0x6e, 0x90, 0x5f,
	0xe0, 0x33, 0x1d, 0x36, 0x7f, 0x6d, 0xfe, 0x6f, 0x91, 0x8f, 0xe0, 0xce, 0xbb, 0x40, 0x4e, 0x3d,
	0xc1, 0xae, 0x4e, 0xb8, 0xb9, 0x8d, 0xd9, 0x56, 0xef, 0xd0, 0x4f, 0x30, 0x35, 0x2d, 0xda, 0x85,
	0xb5, 0xc3, 0x29, 0x13, 0x3e, 0x66, 0xce, 0xa5, 0xff, 0x12, 0x8d, 0xd7, 0xf8, 0x1c, 0xe8, 0x8b,
	0x3e, 0x9a, 0x4c, 0xf5, 0xd7, 0xc6, 0x40, 0xf0, 0x8b, 0xd9, 0xfb, 0x52, 0x29, 0x05, 0x3a, 0xf4,
	0xd4, 0x3f, 0xc3, 0xc7, 0xb8, 0xdd, 0x20, 0x3f, 0x98, 0x6b, 0x3f, 0x17, 0xe4, 0x7e, 0x65, 0xa3,
	0x0b, 0xa6, 0x26, 0x89, 0x1f, 0xf5, 0x2b, 0xb4, 0x90, 0x24, 0xd5, 0x25, 0xda, 0xa9, 0x49, 0x67,
	0xae, 0x83, 0x3f, 0xc3, 0xda, 0x00, 0xa5, 0x83, 0xa7, 0xea, 0x1f, 0x53, 0x7d, 0x5a, 0x7c, 0xa2,
	0x84, 0x1e, 0xcd, 0xa7, 0x57, 0x88, 0xe7, 0x62, 0xed, 0xc3, 0x2d, 0x95, 0x79, 0x9a, 0x6c, 0x1e,
	0x71, 0x47, 0xd7, 0x53, 0xe3, 0xfe, 0x71, 0x41, 0x07, 0xad, 0x5f, 0x57, 0xe8, 0x73, 0xfd, 0xd9,
	0x7c, 0xba, 0xac, 0x7f, 0x9e, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x5a, 0xf2, 0x69, 0x92,
	0x0b, 0x00, 0x00,
}
