// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: merchant_service.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type MerchantOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//　商户编号
	MerchantId int64 `protobuf:"varint,1,opt,name=MerchantId,proto3" json:"MerchantId"`
	// 是否分页
	Pagination bool `protobuf:"varint,2,opt,name=Pagination,proto3" json:"Pagination"`
	//　分页参数
	Params *SPagingParams `protobuf:"bytes,3,opt,name=Params,proto3" json:"Params"`
}

func (x *MerchantOrderRequest) Reset() {
	*x = MerchantOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merchant_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerchantOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerchantOrderRequest) ProtoMessage() {}

func (x *MerchantOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerchantOrderRequest.ProtoReflect.Descriptor instead.
func (*MerchantOrderRequest) Descriptor() ([]byte, []int) {
	return file_merchant_service_proto_rawDescGZIP(), []int{0}
}

func (x *MerchantOrderRequest) GetMerchantId() int64 {
	if x != nil {
		return x.MerchantId
	}
	return 0
}

func (x *MerchantOrderRequest) GetPagination() bool {
	if x != nil {
		return x.Pagination
	}
	return false
}

func (x *MerchantOrderRequest) GetParams() *SPagingParams {
	if x != nil {
		return x.Params
	}
	return nil
}

type PagingMerchantOrderListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64             `protobuf:"varint,1,opt,name=Total,proto3" json:"Total"`
	Data  []*SMerchantOrder `protobuf:"bytes,2,rep,name=Data,proto3" json:"Data"`
}

func (x *PagingMerchantOrderListResponse) Reset() {
	*x = PagingMerchantOrderListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merchant_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PagingMerchantOrderListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PagingMerchantOrderListResponse) ProtoMessage() {}

func (x *PagingMerchantOrderListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PagingMerchantOrderListResponse.ProtoReflect.Descriptor instead.
func (*PagingMerchantOrderListResponse) Descriptor() ([]byte, []int) {
	return file_merchant_service_proto_rawDescGZIP(), []int{1}
}

func (x *PagingMerchantOrderListResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *PagingMerchantOrderListResponse) GetData() []*SMerchantOrder {
	if x != nil {
		return x.Data
	}
	return nil
}

type SMerchantOrder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId   int64  `protobuf:"varint,1,opt,name=OrderId,proto3" json:"OrderId"`
	OrderNo   string `protobuf:"bytes,2,opt,name=OrderNo,proto3" json:"OrderNo"`
	ParentNo  string `protobuf:"bytes,3,opt,name=ParentNo,proto3" json:"ParentNo"`
	BuyerId   int64  `protobuf:"varint,4,opt,name=BuyerId,proto3" json:"BuyerId"`
	BuyerName string `protobuf:"bytes,5,opt,name=BuyerName,proto3" json:"BuyerName"`
	// 订单详情,主要描述订单的内容
	Details        string            `protobuf:"bytes,6,opt,name=Details,proto3" json:"Details"`
	ItemAmount     float64           `protobuf:"fixed64,7,opt,name=ItemAmount,proto3" json:"ItemAmount"`
	DiscountAmount float64           `protobuf:"fixed64,8,opt,name=DiscountAmount,proto3" json:"DiscountAmount"`
	ExpressFee     float64           `protobuf:"fixed64,9,opt,name=ExpressFee,proto3" json:"ExpressFee"`
	PackageFee     float64           `protobuf:"fixed64,10,opt,name=PackageFee,proto3" json:"PackageFee"`
	IsPaid         bool              `protobuf:"varint,11,opt,name=IsPaid,proto3" json:"IsPaid"`
	FinalAmount    float64           `protobuf:"fixed64,12,opt,name=FinalAmount,proto3" json:"FinalAmount"`
	State          int32             `protobuf:"varint,13,opt,name=State,proto3" json:"State"`
	StateText      string            `protobuf:"bytes,14,opt,name=StateText,proto3" json:"StateText"`
	CreateTime     int64             `protobuf:"varint,15,opt,name=CreateTime,proto3" json:"CreateTime"`
	Items          []*SOrderItem     `protobuf:"bytes,16,rep,name=Items,proto3" json:"Items"`
	Data           map[string]string `protobuf:"bytes,17,rep,name=Data,proto3" json:"Data" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SMerchantOrder) Reset() {
	*x = SMerchantOrder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_merchant_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMerchantOrder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMerchantOrder) ProtoMessage() {}

func (x *SMerchantOrder) ProtoReflect() protoreflect.Message {
	mi := &file_merchant_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMerchantOrder.ProtoReflect.Descriptor instead.
func (*SMerchantOrder) Descriptor() ([]byte, []int) {
	return file_merchant_service_proto_rawDescGZIP(), []int{2}
}

func (x *SMerchantOrder) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *SMerchantOrder) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *SMerchantOrder) GetParentNo() string {
	if x != nil {
		return x.ParentNo
	}
	return ""
}

func (x *SMerchantOrder) GetBuyerId() int64 {
	if x != nil {
		return x.BuyerId
	}
	return 0
}

func (x *SMerchantOrder) GetBuyerName() string {
	if x != nil {
		return x.BuyerName
	}
	return ""
}

func (x *SMerchantOrder) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

func (x *SMerchantOrder) GetItemAmount() float64 {
	if x != nil {
		return x.ItemAmount
	}
	return 0
}

func (x *SMerchantOrder) GetDiscountAmount() float64 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *SMerchantOrder) GetExpressFee() float64 {
	if x != nil {
		return x.ExpressFee
	}
	return 0
}

func (x *SMerchantOrder) GetPackageFee() float64 {
	if x != nil {
		return x.PackageFee
	}
	return 0
}

func (x *SMerchantOrder) GetIsPaid() bool {
	if x != nil {
		return x.IsPaid
	}
	return false
}

func (x *SMerchantOrder) GetFinalAmount() float64 {
	if x != nil {
		return x.FinalAmount
	}
	return 0
}

func (x *SMerchantOrder) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SMerchantOrder) GetStateText() string {
	if x != nil {
		return x.StateText
	}
	return ""
}

func (x *SMerchantOrder) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SMerchantOrder) GetItems() []*SOrderItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *SMerchantOrder) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_merchant_service_proto protoreflect.FileDescriptor

var file_merchant_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f,
	0x6d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7e, 0x0a, 0x14, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x53, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x52, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x5c, 0x0a, 0x1f, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x53, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x22, 0xd3, 0x04, 0x0a, 0x0e, 0x53, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x42, 0x75, 0x79, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x42,
	0x75, 0x79, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x75, 0x79, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x75, 0x79, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x46, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x46, 0x65, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x46, 0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x46, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x50, 0x61, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x50, 0x61, 0x69, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54,
	0x65, 0x78, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x10, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x53, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32,
	0xe3, 0x10, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x0a, 0x2e, 0x53, 0x4d, 0x65,
	0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x24, 0x0a,
	0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0b, 0x2e, 0x4d, 0x63,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x50, 0x77, 0x64, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x19, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x06, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x33,
	0x0a, 0x11, 0x53, 0x79, 0x6e, 0x63, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x14, 0x2e, 0x53, 0x79,
	0x6e, 0x63, 0x57, 0x53, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x5f, 0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a,
	0x17, 0x2e, 0x53, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x11, 0x2e, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e,
	0x53, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x5f, 0x22, 0x00, 0x12, 0x31, 0x0a,
	0x0d, 0x53, 0x61, 0x76, 0x65, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x15,
	0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x53, 0x61, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x29, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x09, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64,
	0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x46, 0x72, 0x6f, 0x6d, 0x53, 0x69, 0x67, 0x6e,
	0x55, 0x70, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x1a, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x00, 0x12, 0x20, 0x0a, 0x06, 0x53, 0x69,
	0x67, 0x6e, 0x55, 0x70, 0x12, 0x0b, 0x2e, 0x53, 0x4d, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x4d, 0x63, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x49, 0x64, 0x12, 0x09,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x12, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x0b, 0x2e, 0x53, 0x4d, 0x63, 0x68, 0x53,
	0x69, 0x67, 0x6e, 0x55, 0x70, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0c, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x11, 0x2e, 0x4d, 0x63, 0x68, 0x52, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x09, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x42, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x09, 0x2e, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x1a, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22,
	0x00, 0x12, 0x34, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0b, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x1a, 0x10, 0x2e, 0x53, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x12, 0x53, 0x61, 0x76, 0x65, 0x45,
	0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70, 0x72, 0x69, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x34, 0x0a, 0x14, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x45, 0x6e, 0x74, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x4d, 0x63, 0x68, 0x52, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0b, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x1a, 0x11, 0x2e, 0x53, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x12,
	0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x22, 0x00, 0x12, 0x2e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x0b, 0x2e, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x07, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0x00, 0x12, 0x37, 0x0a, 0x0c, 0x53, 0x61, 0x76, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x12, 0x1c, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x12, 0x0b, 0x2e, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x53, 0x4d, 0x65, 0x72, 0x63, 0x68,
	0x61, 0x6e, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x22, 0x00, 0x12, 0x22, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x53, 0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x0b, 0x2e, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22,
	0x00, 0x12, 0x3b, 0x0a, 0x0e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x4d, 0x65, 0x72, 0x63,
	0x68, 0x61, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x2e,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x70, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0b, 0x2e, 0x4d,
	0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x1a, 0x11, 0x2e, 0x53, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x33,
	0x0a, 0x0d, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x70, 0x69, 0x50, 0x65, 0x72, 0x6d, 0x12,
	0x17, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x50, 0x65, 0x72,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x42, 0x79, 0x41, 0x70, 0x69, 0x49, 0x64, 0x12, 0x07, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x1a, 0x06, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x18, 0x50, 0x61, 0x67, 0x65, 0x64, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4f, 0x66, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x15, 0x2e, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x1b, 0x50, 0x61, 0x67, 0x65, 0x64, 0x57, 0x68,
	0x6f, 0x6c, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4f, 0x66, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x12, 0x15, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x54, 0x0a, 0x17, 0x50, 0x61, 0x67, 0x65, 0x64, 0x54, 0x72, 0x61, 0x64, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4f, 0x66, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x15, 0x2e, 0x4d, 0x65, 0x72,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x17, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x54, 0x6f, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x54, 0x6f, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0d,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00,
	0x12, 0x42, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x63, 0x68, 0x42, 0x75, 0x79, 0x65, 0x72, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x5f, 0x12, 0x15, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x42, 0x75, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x1a, 0x14, 0x2e, 0x53,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x75, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x11, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x63, 0x68, 0x42,
	0x75, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x75, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x79, 0x65, 0x72,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x0b, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x1a, 0x1f, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x42, 0x75,
	0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x62,
	0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x4d, 0x65, 0x72, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x42, 0x75, 0x79, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x1a, 0x20,
	0x2e, 0x57, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x41, 0x0a, 0x13, 0x53, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52,
	0x65, 0x62, 0x61, 0x74, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x53, 0x61, 0x76, 0x65,
	0x57, 0x68, 0x6f, 0x6c, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x07, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x42, 0x1e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x67, 0x6f, 0x32, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x5a, 0x07, 0x2e, 0x3b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_merchant_service_proto_rawDescOnce sync.Once
	file_merchant_service_proto_rawDescData = file_merchant_service_proto_rawDesc
)

func file_merchant_service_proto_rawDescGZIP() []byte {
	file_merchant_service_proto_rawDescOnce.Do(func() {
		file_merchant_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_merchant_service_proto_rawDescData)
	})
	return file_merchant_service_proto_rawDescData
}

var file_merchant_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_merchant_service_proto_goTypes = []interface{}{
	(*MerchantOrderRequest)(nil),            // 0: MerchantOrderRequest
	(*PagingMerchantOrderListResponse)(nil), // 1: PagingMerchantOrderListResponse
	(*SMerchantOrder)(nil),                  // 2: SMerchantOrder
	nil,                                     // 3: SMerchantOrder.DataEntry
	(*SPagingParams)(nil),                   // 4: SPagingParams
	(*SOrderItem)(nil),                      // 5: SOrderItem
	(*Int64)(nil),                           // 6: Int64
	(*MerchantCreateRequest)(nil),           // 7: MerchantCreateRequest
	(*MchUserPwd)(nil),                      // 8: MchUserPwd
	(*TradeConfRequest)(nil),                // 9: TradeConfRequest
	(*TradeConfSaveRequest)(nil),            // 10: TradeConfSaveRequest
	(*MemberId)(nil),                        // 11: MemberId
	(*String)(nil),                          // 12: String
	(*SMchSignUp)(nil),                      // 13: SMchSignUp
	(*MchReviewRequest)(nil),                // 14: MchReviewRequest
	(*MerchantId)(nil),                      // 15: MerchantId
	(*SaveEnterpriseRequest)(nil),           // 16: SaveEnterpriseRequest
	(*MerchantDisableRequest)(nil),          // 17: MerchantDisableRequest
	(*SaveMerchantSaleConfRequest)(nil),     // 18: SaveMerchantSaleConfRequest
	(*ModifyMerchantPasswordRequest)(nil),   // 19: ModifyMerchantPasswordRequest
	(*MerchantApiPermRequest)(nil),          // 20: MerchantApiPermRequest
	(*WithdrawToMemberAccountRequest)(nil),  // 21: WithdrawToMemberAccountRequest
	(*MerchantChargeRequest)(nil),           // 22: MerchantChargeRequest
	(*MerchantBuyerGroupId)(nil),            // 23: MerchantBuyerGroupId
	(*SaveMerchantBuyerGroupRequest)(nil),   // 24: SaveMerchantBuyerGroupRequest
	(*SaveWholesaleRebateRateRequest)(nil),  // 25: SaveWholesaleRebateRateRequest
	(*SMerchant)(nil),                       // 26: SMerchant
	(*Result)(nil),                          // 27: Result
	(*SyncWSItemsResponse)(nil),             // 28: SyncWSItemsResponse
	(*STradeConfListResponse)(nil),          // 29: STradeConfListResponse
	(*STradeConf_)(nil),                     // 30: STradeConf_
	(*SEnterpriseInfo)(nil),                 // 31: SEnterpriseInfo
	(*SMerchantAccount)(nil),                // 32: SMerchantAccount
	(*SMerchantSaleConf)(nil),               // 33: SMerchantSaleConf
	(*SMerchantApiInfo)(nil),                // 34: SMerchantApiInfo
	(*SMerchantBuyerGroup)(nil),             // 35: SMerchantBuyerGroup
	(*MerchantBuyerGroupListResponse)(nil),  // 36: MerchantBuyerGroupListResponse
	(*WholesaleRebateRateListResponse)(nil), // 37: WholesaleRebateRateListResponse
}
var file_merchant_service_proto_depIdxs = []int32{
	4,  // 0: MerchantOrderRequest.Params:type_name -> SPagingParams
	2,  // 1: PagingMerchantOrderListResponse.Data:type_name -> SMerchantOrder
	5,  // 2: SMerchantOrder.Items:type_name -> SOrderItem
	3,  // 3: SMerchantOrder.Data:type_name -> SMerchantOrder.DataEntry
	6,  // 4: MerchantService.GetMerchant:input_type -> Int64
	7,  // 5: MerchantService.CreateMerchant:input_type -> MerchantCreateRequest
	8,  // 6: MerchantService.CheckLogin:input_type -> MchUserPwd
	6,  // 7: MerchantService.Stat:input_type -> Int64
	6,  // 8: MerchantService.SyncWholesaleItem:input_type -> Int64
	6,  // 9: MerchantService.GetAllTradeConf_:input_type -> Int64
	9,  // 10: MerchantService.GetTradeConf:input_type -> TradeConfRequest
	10, // 11: MerchantService.SaveTradeConf:input_type -> TradeConfSaveRequest
	11, // 12: MerchantService.CreateSignUpToken:input_type -> MemberId
	12, // 13: MerchantService.GetMemberFromSignUpToken:input_type -> String
	13, // 14: MerchantService.SignUp:input_type -> SMchSignUp
	11, // 15: MerchantService.GetMchSignUpId:input_type -> MemberId
	6,  // 16: MerchantService.GetSignUp:input_type -> Int64
	14, // 17: MerchantService.ReviewSignUp:input_type -> MchReviewRequest
	11, // 18: MerchantService.RemoveMerchantSignUp:input_type -> MemberId
	11, // 19: MerchantService.GetMerchantIdByMember:input_type -> MemberId
	15, // 20: MerchantService.GetEnterpriseInfo:input_type -> MerchantId
	16, // 21: MerchantService.SaveEnterpriseInfo:input_type -> SaveEnterpriseRequest
	14, // 22: MerchantService.ReviewEnterpriseInfo:input_type -> MchReviewRequest
	15, // 23: MerchantService.GetAccount:input_type -> MerchantId
	17, // 24: MerchantService.SetEnabled:input_type -> MerchantDisableRequest
	12, // 25: MerchantService.GetMerchantIdByHost:input_type -> String
	15, // 26: MerchantService.GetMerchantMajorHost:input_type -> MerchantId
	18, // 27: MerchantService.SaveSaleConf:input_type -> SaveMerchantSaleConfRequest
	15, // 28: MerchantService.GetSaleConf:input_type -> MerchantId
	15, // 29: MerchantService.GetShopId:input_type -> MerchantId
	19, // 30: MerchantService.ModifyPassword:input_type -> ModifyMerchantPasswordRequest
	15, // 31: MerchantService.GetApiInfo:input_type -> MerchantId
	20, // 32: MerchantService.ToggleApiPerm:input_type -> MerchantApiPermRequest
	12, // 33: MerchantService.GetMerchantIdByApiId:input_type -> String
	0,  // 34: MerchantService.PagedNormalOrderOfVendor:input_type -> MerchantOrderRequest
	0,  // 35: MerchantService.PagedWholesaleOrderOfVendor:input_type -> MerchantOrderRequest
	0,  // 36: MerchantService.PagedTradeOrderOfVendor:input_type -> MerchantOrderRequest
	21, // 37: MerchantService.WithdrawToMemberAccount:input_type -> WithdrawToMemberAccountRequest
	22, // 38: MerchantService.ChargeAccount:input_type -> MerchantChargeRequest
	23, // 39: MerchantService.GetMchBuyerGroup_:input_type -> MerchantBuyerGroupId
	24, // 40: MerchantService.SaveMchBuyerGroup:input_type -> SaveMerchantBuyerGroupRequest
	15, // 41: MerchantService.GetBuyerGroups:input_type -> MerchantId
	23, // 42: MerchantService.GetRebateRate:input_type -> MerchantBuyerGroupId
	25, // 43: MerchantService.SaveGroupRebateRate:input_type -> SaveWholesaleRebateRateRequest
	26, // 44: MerchantService.GetMerchant:output_type -> SMerchant
	27, // 45: MerchantService.CreateMerchant:output_type -> Result
	27, // 46: MerchantService.CheckLogin:output_type -> Result
	27, // 47: MerchantService.Stat:output_type -> Result
	28, // 48: MerchantService.SyncWholesaleItem:output_type -> SyncWSItemsResponse
	29, // 49: MerchantService.GetAllTradeConf_:output_type -> STradeConfListResponse
	30, // 50: MerchantService.GetTradeConf:output_type -> STradeConf_
	27, // 51: MerchantService.SaveTradeConf:output_type -> Result
	12, // 52: MerchantService.CreateSignUpToken:output_type -> String
	6,  // 53: MerchantService.GetMemberFromSignUpToken:output_type -> Int64
	27, // 54: MerchantService.SignUp:output_type -> Result
	6,  // 55: MerchantService.GetMchSignUpId:output_type -> Int64
	13, // 56: MerchantService.GetSignUp:output_type -> SMchSignUp
	27, // 57: MerchantService.ReviewSignUp:output_type -> Result
	27, // 58: MerchantService.RemoveMerchantSignUp:output_type -> Result
	6,  // 59: MerchantService.GetMerchantIdByMember:output_type -> Int64
	31, // 60: MerchantService.GetEnterpriseInfo:output_type -> SEnterpriseInfo
	27, // 61: MerchantService.SaveEnterpriseInfo:output_type -> Result
	27, // 62: MerchantService.ReviewEnterpriseInfo:output_type -> Result
	32, // 63: MerchantService.GetAccount:output_type -> SMerchantAccount
	27, // 64: MerchantService.SetEnabled:output_type -> Result
	6,  // 65: MerchantService.GetMerchantIdByHost:output_type -> Int64
	12, // 66: MerchantService.GetMerchantMajorHost:output_type -> String
	27, // 67: MerchantService.SaveSaleConf:output_type -> Result
	33, // 68: MerchantService.GetSaleConf:output_type -> SMerchantSaleConf
	6,  // 69: MerchantService.GetShopId:output_type -> Int64
	27, // 70: MerchantService.ModifyPassword:output_type -> Result
	34, // 71: MerchantService.GetApiInfo:output_type -> SMerchantApiInfo
	27, // 72: MerchantService.ToggleApiPerm:output_type -> Result
	6,  // 73: MerchantService.GetMerchantIdByApiId:output_type -> Int64
	1,  // 74: MerchantService.PagedNormalOrderOfVendor:output_type -> PagingMerchantOrderListResponse
	1,  // 75: MerchantService.PagedWholesaleOrderOfVendor:output_type -> PagingMerchantOrderListResponse
	1,  // 76: MerchantService.PagedTradeOrderOfVendor:output_type -> PagingMerchantOrderListResponse
	27, // 77: MerchantService.WithdrawToMemberAccount:output_type -> Result
	27, // 78: MerchantService.ChargeAccount:output_type -> Result
	35, // 79: MerchantService.GetMchBuyerGroup_:output_type -> SMerchantBuyerGroup
	27, // 80: MerchantService.SaveMchBuyerGroup:output_type -> Result
	36, // 81: MerchantService.GetBuyerGroups:output_type -> MerchantBuyerGroupListResponse
	37, // 82: MerchantService.GetRebateRate:output_type -> WholesaleRebateRateListResponse
	27, // 83: MerchantService.SaveGroupRebateRate:output_type -> Result
	44, // [44:84] is the sub-list for method output_type
	4,  // [4:44] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_merchant_service_proto_init() }
func file_merchant_service_proto_init() {
	if File_merchant_service_proto != nil {
		return
	}
	file_global_proto_init()
	file_message_merchant_dto_proto_init()
	file_message_order_dto_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_merchant_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerchantOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_merchant_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PagingMerchantOrderListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_merchant_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMerchantOrder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_merchant_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_merchant_service_proto_goTypes,
		DependencyIndexes: file_merchant_service_proto_depIdxs,
		MessageInfos:      file_merchant_service_proto_msgTypes,
	}.Build()
	File_merchant_service_proto = out.File
	file_merchant_service_proto_rawDesc = nil
	file_merchant_service_proto_goTypes = nil
	file_merchant_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MerchantServiceClient is the client API for MerchantService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MerchantServiceClient interface {
	// 获取商家的信息,mchId
	GetMerchant(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SMerchant, error)
	// 注册商户并开店
	CreateMerchant(ctx context.Context, in *MerchantCreateRequest, opts ...grpc.CallOption) (*Result, error)
	// 验证用户密码,并返回编号。可传入商户或会员的账号密码
	CheckLogin(ctx context.Context, in *MchUserPwd, opts ...grpc.CallOption) (*Result, error)
	// 验证商户状态,mchId
	Stat(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	// 同步批发商品,mchId
	SyncWholesaleItem(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SyncWSItemsResponse, error)
	// 获取所有的交易设置,mchId
	GetAllTradeConf_(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*STradeConfListResponse, error)
	// 根据交易类型获取交易设置
	GetTradeConf(ctx context.Context, in *TradeConfRequest, opts ...grpc.CallOption) (*STradeConf_, error)
	// 保存交易设置
	SaveTradeConf(ctx context.Context, in *TradeConfSaveRequest, opts ...grpc.CallOption) (*Result, error)
	// 创建会员申请商户密钥
	CreateSignUpToken(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*String, error)
	// 根据商户申请密钥获取会员编号
	GetMemberFromSignUpToken(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error)
	// 提交注册信息
	SignUp(ctx context.Context, in *SMchSignUp, opts ...grpc.CallOption) (*Result, error)
	// 获取会员商户申请信息
	GetMchSignUpId(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*Int64, error)
	// 根据ID获取商户申请信息
	GetSignUp(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SMchSignUp, error)
	// 审核商户申请信息
	ReviewSignUp(ctx context.Context, in *MchReviewRequest, opts ...grpc.CallOption) (*Result, error)
	// 删除会员的商户申请资料
	RemoveMerchantSignUp(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*Result, error)
	// 根据会员号获取商户编号
	GetMerchantIdByMember(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*Int64, error)
	// 获取企业信息,并返回是否为提交的信息
	GetEnterpriseInfo(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SEnterpriseInfo, error)
	// 保存企业信息
	SaveEnterpriseInfo(ctx context.Context, in *SaveEnterpriseRequest, opts ...grpc.CallOption) (*Result, error)
	// 审核企业信息
	ReviewEnterpriseInfo(ctx context.Context, in *MchReviewRequest, opts ...grpc.CallOption) (*Result, error)
	GetAccount(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantAccount, error)
	//rpc SaveMerchant_(mchId int64, v *merchant.Merchant) (int64, error)
	// 设置商户启用或停用
	SetEnabled(ctx context.Context, in *MerchantDisableRequest, opts ...grpc.CallOption) (*Result, error)
	// 根据主机查询商户编号
	GetMerchantIdByHost(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error)
	// 获取商户的域名
	GetMerchantMajorHost(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*String, error)
	SaveSaleConf(ctx context.Context, in *SaveMerchantSaleConfRequest, opts ...grpc.CallOption) (*Result, error)
	GetSaleConf(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantSaleConf, error)
	GetShopId(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*Int64, error)
	// 修改密码
	ModifyPassword(ctx context.Context, in *ModifyMerchantPasswordRequest, opts ...grpc.CallOption) (*Result, error)
	// 保存API信息
	//rpc SaveApiInfo(mchId int64, d *merchant.ApiInfo) error
	// 获取API接口
	GetApiInfo(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantApiInfo, error)
	// 启用/停用接口权限
	ToggleApiPerm(ctx context.Context, in *MerchantApiPermRequest, opts ...grpc.CallOption) (*Result, error)
	// 根据API ID获取MerchantId
	GetMerchantIdByApiId(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error)
	// 查询分页订单
	PagedNormalOrderOfVendor(ctx context.Context, in *MerchantOrderRequest, opts ...grpc.CallOption) (*PagingMerchantOrderListResponse, error)
	// 查询分页订单
	PagedWholesaleOrderOfVendor(ctx context.Context, in *MerchantOrderRequest, opts ...grpc.CallOption) (*PagingMerchantOrderListResponse, error)
	// 查询分页订单
	PagedTradeOrderOfVendor(ctx context.Context, in *MerchantOrderRequest, opts ...grpc.CallOption) (*PagingMerchantOrderListResponse, error)
	// 提到会员账户
	WithdrawToMemberAccount(ctx context.Context, in *WithdrawToMemberAccountRequest, opts ...grpc.CallOption) (*Result, error)
	// 账户充值
	ChargeAccount(ctx context.Context, in *MerchantChargeRequest, opts ...grpc.CallOption) (*Result, error)
	GetMchBuyerGroup_(ctx context.Context, in *MerchantBuyerGroupId, opts ...grpc.CallOption) (*SMerchantBuyerGroup, error)
	// 保存
	SaveMchBuyerGroup(ctx context.Context, in *SaveMerchantBuyerGroupRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取买家分组
	GetBuyerGroups(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*MerchantBuyerGroupListResponse, error)
	// 获取批发返点率
	GetRebateRate(ctx context.Context, in *MerchantBuyerGroupId, opts ...grpc.CallOption) (*WholesaleRebateRateListResponse, error)
	// 保存分组返点率
	SaveGroupRebateRate(ctx context.Context, in *SaveWholesaleRebateRateRequest, opts ...grpc.CallOption) (*Result, error)
}

type merchantServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMerchantServiceClient(cc grpc.ClientConnInterface) MerchantServiceClient {
	return &merchantServiceClient{cc}
}

func (c *merchantServiceClient) GetMerchant(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SMerchant, error) {
	out := new(SMerchant)
	err := c.cc.Invoke(ctx, "/MerchantService/GetMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CreateMerchant(ctx context.Context, in *MerchantCreateRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/CreateMerchant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CheckLogin(ctx context.Context, in *MchUserPwd, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/CheckLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) Stat(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/Stat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SyncWholesaleItem(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SyncWSItemsResponse, error) {
	out := new(SyncWSItemsResponse)
	err := c.cc.Invoke(ctx, "/MerchantService/SyncWholesaleItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAllTradeConf_(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*STradeConfListResponse, error) {
	out := new(STradeConfListResponse)
	err := c.cc.Invoke(ctx, "/MerchantService/GetAllTradeConf_", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetTradeConf(ctx context.Context, in *TradeConfRequest, opts ...grpc.CallOption) (*STradeConf_, error) {
	out := new(STradeConf_)
	err := c.cc.Invoke(ctx, "/MerchantService/GetTradeConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveTradeConf(ctx context.Context, in *TradeConfSaveRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/SaveTradeConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) CreateSignUpToken(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/MerchantService/CreateSignUpToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMemberFromSignUpToken(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/MerchantService/GetMemberFromSignUpToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SignUp(ctx context.Context, in *SMchSignUp, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/SignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMchSignUpId(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/MerchantService/GetMchSignUpId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetSignUp(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*SMchSignUp, error) {
	out := new(SMchSignUp)
	err := c.cc.Invoke(ctx, "/MerchantService/GetSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ReviewSignUp(ctx context.Context, in *MchReviewRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/ReviewSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) RemoveMerchantSignUp(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/RemoveMerchantSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchantIdByMember(ctx context.Context, in *MemberId, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/MerchantService/GetMerchantIdByMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetEnterpriseInfo(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SEnterpriseInfo, error) {
	out := new(SEnterpriseInfo)
	err := c.cc.Invoke(ctx, "/MerchantService/GetEnterpriseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveEnterpriseInfo(ctx context.Context, in *SaveEnterpriseRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/SaveEnterpriseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ReviewEnterpriseInfo(ctx context.Context, in *MchReviewRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/ReviewEnterpriseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetAccount(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantAccount, error) {
	out := new(SMerchantAccount)
	err := c.cc.Invoke(ctx, "/MerchantService/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SetEnabled(ctx context.Context, in *MerchantDisableRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/SetEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchantIdByHost(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/MerchantService/GetMerchantIdByHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchantMajorHost(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*String, error) {
	out := new(String)
	err := c.cc.Invoke(ctx, "/MerchantService/GetMerchantMajorHost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveSaleConf(ctx context.Context, in *SaveMerchantSaleConfRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/SaveSaleConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetSaleConf(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantSaleConf, error) {
	out := new(SMerchantSaleConf)
	err := c.cc.Invoke(ctx, "/MerchantService/GetSaleConf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetShopId(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/MerchantService/GetShopId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ModifyPassword(ctx context.Context, in *ModifyMerchantPasswordRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/ModifyPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetApiInfo(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*SMerchantApiInfo, error) {
	out := new(SMerchantApiInfo)
	err := c.cc.Invoke(ctx, "/MerchantService/GetApiInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ToggleApiPerm(ctx context.Context, in *MerchantApiPermRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/ToggleApiPerm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMerchantIdByApiId(ctx context.Context, in *String, opts ...grpc.CallOption) (*Int64, error) {
	out := new(Int64)
	err := c.cc.Invoke(ctx, "/MerchantService/GetMerchantIdByApiId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) PagedNormalOrderOfVendor(ctx context.Context, in *MerchantOrderRequest, opts ...grpc.CallOption) (*PagingMerchantOrderListResponse, error) {
	out := new(PagingMerchantOrderListResponse)
	err := c.cc.Invoke(ctx, "/MerchantService/PagedNormalOrderOfVendor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) PagedWholesaleOrderOfVendor(ctx context.Context, in *MerchantOrderRequest, opts ...grpc.CallOption) (*PagingMerchantOrderListResponse, error) {
	out := new(PagingMerchantOrderListResponse)
	err := c.cc.Invoke(ctx, "/MerchantService/PagedWholesaleOrderOfVendor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) PagedTradeOrderOfVendor(ctx context.Context, in *MerchantOrderRequest, opts ...grpc.CallOption) (*PagingMerchantOrderListResponse, error) {
	out := new(PagingMerchantOrderListResponse)
	err := c.cc.Invoke(ctx, "/MerchantService/PagedTradeOrderOfVendor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) WithdrawToMemberAccount(ctx context.Context, in *WithdrawToMemberAccountRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/WithdrawToMemberAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) ChargeAccount(ctx context.Context, in *MerchantChargeRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/ChargeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetMchBuyerGroup_(ctx context.Context, in *MerchantBuyerGroupId, opts ...grpc.CallOption) (*SMerchantBuyerGroup, error) {
	out := new(SMerchantBuyerGroup)
	err := c.cc.Invoke(ctx, "/MerchantService/GetMchBuyerGroup_", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveMchBuyerGroup(ctx context.Context, in *SaveMerchantBuyerGroupRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/SaveMchBuyerGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetBuyerGroups(ctx context.Context, in *MerchantId, opts ...grpc.CallOption) (*MerchantBuyerGroupListResponse, error) {
	out := new(MerchantBuyerGroupListResponse)
	err := c.cc.Invoke(ctx, "/MerchantService/GetBuyerGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) GetRebateRate(ctx context.Context, in *MerchantBuyerGroupId, opts ...grpc.CallOption) (*WholesaleRebateRateListResponse, error) {
	out := new(WholesaleRebateRateListResponse)
	err := c.cc.Invoke(ctx, "/MerchantService/GetRebateRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *merchantServiceClient) SaveGroupRebateRate(ctx context.Context, in *SaveWholesaleRebateRateRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/MerchantService/SaveGroupRebateRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MerchantServiceServer is the server API for MerchantService service.
type MerchantServiceServer interface {
	// 获取商家的信息,mchId
	GetMerchant(context.Context, *Int64) (*SMerchant, error)
	// 注册商户并开店
	CreateMerchant(context.Context, *MerchantCreateRequest) (*Result, error)
	// 验证用户密码,并返回编号。可传入商户或会员的账号密码
	CheckLogin(context.Context, *MchUserPwd) (*Result, error)
	// 验证商户状态,mchId
	Stat(context.Context, *Int64) (*Result, error)
	// 同步批发商品,mchId
	SyncWholesaleItem(context.Context, *Int64) (*SyncWSItemsResponse, error)
	// 获取所有的交易设置,mchId
	GetAllTradeConf_(context.Context, *Int64) (*STradeConfListResponse, error)
	// 根据交易类型获取交易设置
	GetTradeConf(context.Context, *TradeConfRequest) (*STradeConf_, error)
	// 保存交易设置
	SaveTradeConf(context.Context, *TradeConfSaveRequest) (*Result, error)
	// 创建会员申请商户密钥
	CreateSignUpToken(context.Context, *MemberId) (*String, error)
	// 根据商户申请密钥获取会员编号
	GetMemberFromSignUpToken(context.Context, *String) (*Int64, error)
	// 提交注册信息
	SignUp(context.Context, *SMchSignUp) (*Result, error)
	// 获取会员商户申请信息
	GetMchSignUpId(context.Context, *MemberId) (*Int64, error)
	// 根据ID获取商户申请信息
	GetSignUp(context.Context, *Int64) (*SMchSignUp, error)
	// 审核商户申请信息
	ReviewSignUp(context.Context, *MchReviewRequest) (*Result, error)
	// 删除会员的商户申请资料
	RemoveMerchantSignUp(context.Context, *MemberId) (*Result, error)
	// 根据会员号获取商户编号
	GetMerchantIdByMember(context.Context, *MemberId) (*Int64, error)
	// 获取企业信息,并返回是否为提交的信息
	GetEnterpriseInfo(context.Context, *MerchantId) (*SEnterpriseInfo, error)
	// 保存企业信息
	SaveEnterpriseInfo(context.Context, *SaveEnterpriseRequest) (*Result, error)
	// 审核企业信息
	ReviewEnterpriseInfo(context.Context, *MchReviewRequest) (*Result, error)
	GetAccount(context.Context, *MerchantId) (*SMerchantAccount, error)
	//rpc SaveMerchant_(mchId int64, v *merchant.Merchant) (int64, error)
	// 设置商户启用或停用
	SetEnabled(context.Context, *MerchantDisableRequest) (*Result, error)
	// 根据主机查询商户编号
	GetMerchantIdByHost(context.Context, *String) (*Int64, error)
	// 获取商户的域名
	GetMerchantMajorHost(context.Context, *MerchantId) (*String, error)
	SaveSaleConf(context.Context, *SaveMerchantSaleConfRequest) (*Result, error)
	GetSaleConf(context.Context, *MerchantId) (*SMerchantSaleConf, error)
	GetShopId(context.Context, *MerchantId) (*Int64, error)
	// 修改密码
	ModifyPassword(context.Context, *ModifyMerchantPasswordRequest) (*Result, error)
	// 保存API信息
	//rpc SaveApiInfo(mchId int64, d *merchant.ApiInfo) error
	// 获取API接口
	GetApiInfo(context.Context, *MerchantId) (*SMerchantApiInfo, error)
	// 启用/停用接口权限
	ToggleApiPerm(context.Context, *MerchantApiPermRequest) (*Result, error)
	// 根据API ID获取MerchantId
	GetMerchantIdByApiId(context.Context, *String) (*Int64, error)
	// 查询分页订单
	PagedNormalOrderOfVendor(context.Context, *MerchantOrderRequest) (*PagingMerchantOrderListResponse, error)
	// 查询分页订单
	PagedWholesaleOrderOfVendor(context.Context, *MerchantOrderRequest) (*PagingMerchantOrderListResponse, error)
	// 查询分页订单
	PagedTradeOrderOfVendor(context.Context, *MerchantOrderRequest) (*PagingMerchantOrderListResponse, error)
	// 提到会员账户
	WithdrawToMemberAccount(context.Context, *WithdrawToMemberAccountRequest) (*Result, error)
	// 账户充值
	ChargeAccount(context.Context, *MerchantChargeRequest) (*Result, error)
	GetMchBuyerGroup_(context.Context, *MerchantBuyerGroupId) (*SMerchantBuyerGroup, error)
	// 保存
	SaveMchBuyerGroup(context.Context, *SaveMerchantBuyerGroupRequest) (*Result, error)
	// 获取买家分组
	GetBuyerGroups(context.Context, *MerchantId) (*MerchantBuyerGroupListResponse, error)
	// 获取批发返点率
	GetRebateRate(context.Context, *MerchantBuyerGroupId) (*WholesaleRebateRateListResponse, error)
	// 保存分组返点率
	SaveGroupRebateRate(context.Context, *SaveWholesaleRebateRateRequest) (*Result, error)
}

// UnimplementedMerchantServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMerchantServiceServer struct {
}

func (*UnimplementedMerchantServiceServer) GetMerchant(context.Context, *Int64) (*SMerchant, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchant not implemented")
}
func (*UnimplementedMerchantServiceServer) CreateMerchant(context.Context, *MerchantCreateRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMerchant not implemented")
}
func (*UnimplementedMerchantServiceServer) CheckLogin(context.Context, *MchUserPwd) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLogin not implemented")
}
func (*UnimplementedMerchantServiceServer) Stat(context.Context, *Int64) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stat not implemented")
}
func (*UnimplementedMerchantServiceServer) SyncWholesaleItem(context.Context, *Int64) (*SyncWSItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncWholesaleItem not implemented")
}
func (*UnimplementedMerchantServiceServer) GetAllTradeConf_(context.Context, *Int64) (*STradeConfListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTradeConf_ not implemented")
}
func (*UnimplementedMerchantServiceServer) GetTradeConf(context.Context, *TradeConfRequest) (*STradeConf_, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTradeConf not implemented")
}
func (*UnimplementedMerchantServiceServer) SaveTradeConf(context.Context, *TradeConfSaveRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTradeConf not implemented")
}
func (*UnimplementedMerchantServiceServer) CreateSignUpToken(context.Context, *MemberId) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSignUpToken not implemented")
}
func (*UnimplementedMerchantServiceServer) GetMemberFromSignUpToken(context.Context, *String) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberFromSignUpToken not implemented")
}
func (*UnimplementedMerchantServiceServer) SignUp(context.Context, *SMchSignUp) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (*UnimplementedMerchantServiceServer) GetMchSignUpId(context.Context, *MemberId) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMchSignUpId not implemented")
}
func (*UnimplementedMerchantServiceServer) GetSignUp(context.Context, *Int64) (*SMchSignUp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignUp not implemented")
}
func (*UnimplementedMerchantServiceServer) ReviewSignUp(context.Context, *MchReviewRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewSignUp not implemented")
}
func (*UnimplementedMerchantServiceServer) RemoveMerchantSignUp(context.Context, *MemberId) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMerchantSignUp not implemented")
}
func (*UnimplementedMerchantServiceServer) GetMerchantIdByMember(context.Context, *MemberId) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantIdByMember not implemented")
}
func (*UnimplementedMerchantServiceServer) GetEnterpriseInfo(context.Context, *MerchantId) (*SEnterpriseInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnterpriseInfo not implemented")
}
func (*UnimplementedMerchantServiceServer) SaveEnterpriseInfo(context.Context, *SaveEnterpriseRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveEnterpriseInfo not implemented")
}
func (*UnimplementedMerchantServiceServer) ReviewEnterpriseInfo(context.Context, *MchReviewRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewEnterpriseInfo not implemented")
}
func (*UnimplementedMerchantServiceServer) GetAccount(context.Context, *MerchantId) (*SMerchantAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedMerchantServiceServer) SetEnabled(context.Context, *MerchantDisableRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnabled not implemented")
}
func (*UnimplementedMerchantServiceServer) GetMerchantIdByHost(context.Context, *String) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantIdByHost not implemented")
}
func (*UnimplementedMerchantServiceServer) GetMerchantMajorHost(context.Context, *MerchantId) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantMajorHost not implemented")
}
func (*UnimplementedMerchantServiceServer) SaveSaleConf(context.Context, *SaveMerchantSaleConfRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSaleConf not implemented")
}
func (*UnimplementedMerchantServiceServer) GetSaleConf(context.Context, *MerchantId) (*SMerchantSaleConf, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSaleConf not implemented")
}
func (*UnimplementedMerchantServiceServer) GetShopId(context.Context, *MerchantId) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopId not implemented")
}
func (*UnimplementedMerchantServiceServer) ModifyPassword(context.Context, *ModifyMerchantPasswordRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPassword not implemented")
}
func (*UnimplementedMerchantServiceServer) GetApiInfo(context.Context, *MerchantId) (*SMerchantApiInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApiInfo not implemented")
}
func (*UnimplementedMerchantServiceServer) ToggleApiPerm(context.Context, *MerchantApiPermRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleApiPerm not implemented")
}
func (*UnimplementedMerchantServiceServer) GetMerchantIdByApiId(context.Context, *String) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerchantIdByApiId not implemented")
}
func (*UnimplementedMerchantServiceServer) PagedNormalOrderOfVendor(context.Context, *MerchantOrderRequest) (*PagingMerchantOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagedNormalOrderOfVendor not implemented")
}
func (*UnimplementedMerchantServiceServer) PagedWholesaleOrderOfVendor(context.Context, *MerchantOrderRequest) (*PagingMerchantOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagedWholesaleOrderOfVendor not implemented")
}
func (*UnimplementedMerchantServiceServer) PagedTradeOrderOfVendor(context.Context, *MerchantOrderRequest) (*PagingMerchantOrderListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PagedTradeOrderOfVendor not implemented")
}
func (*UnimplementedMerchantServiceServer) WithdrawToMemberAccount(context.Context, *WithdrawToMemberAccountRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawToMemberAccount not implemented")
}
func (*UnimplementedMerchantServiceServer) ChargeAccount(context.Context, *MerchantChargeRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChargeAccount not implemented")
}
func (*UnimplementedMerchantServiceServer) GetMchBuyerGroup_(context.Context, *MerchantBuyerGroupId) (*SMerchantBuyerGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMchBuyerGroup_ not implemented")
}
func (*UnimplementedMerchantServiceServer) SaveMchBuyerGroup(context.Context, *SaveMerchantBuyerGroupRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMchBuyerGroup not implemented")
}
func (*UnimplementedMerchantServiceServer) GetBuyerGroups(context.Context, *MerchantId) (*MerchantBuyerGroupListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBuyerGroups not implemented")
}
func (*UnimplementedMerchantServiceServer) GetRebateRate(context.Context, *MerchantBuyerGroupId) (*WholesaleRebateRateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRebateRate not implemented")
}
func (*UnimplementedMerchantServiceServer) SaveGroupRebateRate(context.Context, *SaveWholesaleRebateRateRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGroupRebateRate not implemented")
}

func RegisterMerchantServiceServer(s *grpc.Server, srv MerchantServiceServer) {
	s.RegisterService(&_MerchantService_serviceDesc, srv)
}

func _MerchantService_GetMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchant(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CreateMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/CreateMerchant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateMerchant(ctx, req.(*MerchantCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MchUserPwd)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/CheckLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CheckLogin(ctx, req.(*MchUserPwd))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_Stat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).Stat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/Stat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).Stat(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SyncWholesaleItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SyncWholesaleItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/SyncWholesaleItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SyncWholesaleItem(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAllTradeConf__Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAllTradeConf_(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetAllTradeConf_",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAllTradeConf_(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetTradeConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetTradeConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetTradeConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetTradeConf(ctx, req.(*TradeConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveTradeConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeConfSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveTradeConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/SaveTradeConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveTradeConf(ctx, req.(*TradeConfSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_CreateSignUpToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).CreateSignUpToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/CreateSignUpToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).CreateSignUpToken(ctx, req.(*MemberId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMemberFromSignUpToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMemberFromSignUpToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetMemberFromSignUpToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMemberFromSignUpToken(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMchSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SignUp(ctx, req.(*SMchSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMchSignUpId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMchSignUpId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetMchSignUpId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMchSignUpId(ctx, req.(*MemberId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetSignUp(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ReviewSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MchReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ReviewSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/ReviewSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ReviewSignUp(ctx, req.(*MchReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_RemoveMerchantSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).RemoveMerchantSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/RemoveMerchantSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).RemoveMerchantSignUp(ctx, req.(*MemberId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchantIdByMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantIdByMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetMerchantIdByMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantIdByMember(ctx, req.(*MemberId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetEnterpriseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetEnterpriseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetEnterpriseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetEnterpriseInfo(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveEnterpriseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveEnterpriseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveEnterpriseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/SaveEnterpriseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveEnterpriseInfo(ctx, req.(*SaveEnterpriseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ReviewEnterpriseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MchReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ReviewEnterpriseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/ReviewEnterpriseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ReviewEnterpriseInfo(ctx, req.(*MchReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetAccount(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SetEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantDisableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SetEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/SetEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SetEnabled(ctx, req.(*MerchantDisableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchantIdByHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantIdByHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetMerchantIdByHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantIdByHost(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchantMajorHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantMajorHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetMerchantMajorHost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantMajorHost(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveSaleConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMerchantSaleConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveSaleConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/SaveSaleConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveSaleConf(ctx, req.(*SaveMerchantSaleConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetSaleConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetSaleConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetSaleConf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetSaleConf(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetShopId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetShopId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetShopId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetShopId(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ModifyPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyMerchantPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ModifyPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/ModifyPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ModifyPassword(ctx, req.(*ModifyMerchantPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetApiInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetApiInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetApiInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetApiInfo(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ToggleApiPerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantApiPermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ToggleApiPerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/ToggleApiPerm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ToggleApiPerm(ctx, req.(*MerchantApiPermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMerchantIdByApiId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMerchantIdByApiId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetMerchantIdByApiId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMerchantIdByApiId(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_PagedNormalOrderOfVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).PagedNormalOrderOfVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/PagedNormalOrderOfVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).PagedNormalOrderOfVendor(ctx, req.(*MerchantOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_PagedWholesaleOrderOfVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).PagedWholesaleOrderOfVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/PagedWholesaleOrderOfVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).PagedWholesaleOrderOfVendor(ctx, req.(*MerchantOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_PagedTradeOrderOfVendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).PagedTradeOrderOfVendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/PagedTradeOrderOfVendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).PagedTradeOrderOfVendor(ctx, req.(*MerchantOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_WithdrawToMemberAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawToMemberAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).WithdrawToMemberAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/WithdrawToMemberAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).WithdrawToMemberAccount(ctx, req.(*WithdrawToMemberAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_ChargeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantChargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).ChargeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/ChargeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).ChargeAccount(ctx, req.(*MerchantChargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetMchBuyerGroup__Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantBuyerGroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetMchBuyerGroup_(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetMchBuyerGroup_",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetMchBuyerGroup_(ctx, req.(*MerchantBuyerGroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveMchBuyerGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveMerchantBuyerGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveMchBuyerGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/SaveMchBuyerGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveMchBuyerGroup(ctx, req.(*SaveMerchantBuyerGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetBuyerGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetBuyerGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetBuyerGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetBuyerGroups(ctx, req.(*MerchantId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_GetRebateRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MerchantBuyerGroupId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).GetRebateRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/GetRebateRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).GetRebateRate(ctx, req.(*MerchantBuyerGroupId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MerchantService_SaveGroupRebateRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveWholesaleRebateRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MerchantServiceServer).SaveGroupRebateRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MerchantService/SaveGroupRebateRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MerchantServiceServer).SaveGroupRebateRate(ctx, req.(*SaveWholesaleRebateRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MerchantService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MerchantService",
	HandlerType: (*MerchantServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMerchant",
			Handler:    _MerchantService_GetMerchant_Handler,
		},
		{
			MethodName: "CreateMerchant",
			Handler:    _MerchantService_CreateMerchant_Handler,
		},
		{
			MethodName: "CheckLogin",
			Handler:    _MerchantService_CheckLogin_Handler,
		},
		{
			MethodName: "Stat",
			Handler:    _MerchantService_Stat_Handler,
		},
		{
			MethodName: "SyncWholesaleItem",
			Handler:    _MerchantService_SyncWholesaleItem_Handler,
		},
		{
			MethodName: "GetAllTradeConf_",
			Handler:    _MerchantService_GetAllTradeConf__Handler,
		},
		{
			MethodName: "GetTradeConf",
			Handler:    _MerchantService_GetTradeConf_Handler,
		},
		{
			MethodName: "SaveTradeConf",
			Handler:    _MerchantService_SaveTradeConf_Handler,
		},
		{
			MethodName: "CreateSignUpToken",
			Handler:    _MerchantService_CreateSignUpToken_Handler,
		},
		{
			MethodName: "GetMemberFromSignUpToken",
			Handler:    _MerchantService_GetMemberFromSignUpToken_Handler,
		},
		{
			MethodName: "SignUp",
			Handler:    _MerchantService_SignUp_Handler,
		},
		{
			MethodName: "GetMchSignUpId",
			Handler:    _MerchantService_GetMchSignUpId_Handler,
		},
		{
			MethodName: "GetSignUp",
			Handler:    _MerchantService_GetSignUp_Handler,
		},
		{
			MethodName: "ReviewSignUp",
			Handler:    _MerchantService_ReviewSignUp_Handler,
		},
		{
			MethodName: "RemoveMerchantSignUp",
			Handler:    _MerchantService_RemoveMerchantSignUp_Handler,
		},
		{
			MethodName: "GetMerchantIdByMember",
			Handler:    _MerchantService_GetMerchantIdByMember_Handler,
		},
		{
			MethodName: "GetEnterpriseInfo",
			Handler:    _MerchantService_GetEnterpriseInfo_Handler,
		},
		{
			MethodName: "SaveEnterpriseInfo",
			Handler:    _MerchantService_SaveEnterpriseInfo_Handler,
		},
		{
			MethodName: "ReviewEnterpriseInfo",
			Handler:    _MerchantService_ReviewEnterpriseInfo_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _MerchantService_GetAccount_Handler,
		},
		{
			MethodName: "SetEnabled",
			Handler:    _MerchantService_SetEnabled_Handler,
		},
		{
			MethodName: "GetMerchantIdByHost",
			Handler:    _MerchantService_GetMerchantIdByHost_Handler,
		},
		{
			MethodName: "GetMerchantMajorHost",
			Handler:    _MerchantService_GetMerchantMajorHost_Handler,
		},
		{
			MethodName: "SaveSaleConf",
			Handler:    _MerchantService_SaveSaleConf_Handler,
		},
		{
			MethodName: "GetSaleConf",
			Handler:    _MerchantService_GetSaleConf_Handler,
		},
		{
			MethodName: "GetShopId",
			Handler:    _MerchantService_GetShopId_Handler,
		},
		{
			MethodName: "ModifyPassword",
			Handler:    _MerchantService_ModifyPassword_Handler,
		},
		{
			MethodName: "GetApiInfo",
			Handler:    _MerchantService_GetApiInfo_Handler,
		},
		{
			MethodName: "ToggleApiPerm",
			Handler:    _MerchantService_ToggleApiPerm_Handler,
		},
		{
			MethodName: "GetMerchantIdByApiId",
			Handler:    _MerchantService_GetMerchantIdByApiId_Handler,
		},
		{
			MethodName: "PagedNormalOrderOfVendor",
			Handler:    _MerchantService_PagedNormalOrderOfVendor_Handler,
		},
		{
			MethodName: "PagedWholesaleOrderOfVendor",
			Handler:    _MerchantService_PagedWholesaleOrderOfVendor_Handler,
		},
		{
			MethodName: "PagedTradeOrderOfVendor",
			Handler:    _MerchantService_PagedTradeOrderOfVendor_Handler,
		},
		{
			MethodName: "WithdrawToMemberAccount",
			Handler:    _MerchantService_WithdrawToMemberAccount_Handler,
		},
		{
			MethodName: "ChargeAccount",
			Handler:    _MerchantService_ChargeAccount_Handler,
		},
		{
			MethodName: "GetMchBuyerGroup_",
			Handler:    _MerchantService_GetMchBuyerGroup__Handler,
		},
		{
			MethodName: "SaveMchBuyerGroup",
			Handler:    _MerchantService_SaveMchBuyerGroup_Handler,
		},
		{
			MethodName: "GetBuyerGroups",
			Handler:    _MerchantService_GetBuyerGroups_Handler,
		},
		{
			MethodName: "GetRebateRate",
			Handler:    _MerchantService_GetRebateRate_Handler,
		},
		{
			MethodName: "SaveGroupRebateRate",
			Handler:    _MerchantService_SaveGroupRebateRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "merchant_service.proto",
}
