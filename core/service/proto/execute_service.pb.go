// Code generated by protoc-gen-go. DO NOT EDIT.
// source: execution_service.proto

package proto // import "./"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetJobRequest struct {
	// * 任务名称
	JobName string `protobuf:"bytes,1,opt,name=JobName,proto3" json:"JobName"`
	// * 任务不存在时是否创建
	Create               bool     `protobuf:"varint,2,opt,name=Create,proto3" json:"Create"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetJobRequest) Reset()         { *m = GetJobRequest{} }
func (m *GetJobRequest) String() string { return proto.CompactTextString(m) }
func (*GetJobRequest) ProtoMessage()    {}
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_execute_service_e4d50f39f0dd753a, []int{0}
}
func (m *GetJobRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetJobRequest.Unmarshal(m, b)
}
func (m *GetJobRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetJobRequest.Marshal(b, m, deterministic)
}
func (dst *GetJobRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetJobRequest.Merge(dst, src)
}
func (m *GetJobRequest) XXX_Size() int {
	return xxx_messageInfo_GetJobRequest.Size(m)
}
func (m *GetJobRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetJobRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetJobRequest proto.InternalMessageInfo

func (m *GetJobRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *GetJobRequest) GetCreate() bool {
	if m != nil {
		return m.Create
	}
	return false
}

// * UpdateCursorRequest
type UpdateCursorRequest struct {
	// * 任务名称
	JobName string `protobuf:"bytes,1,opt,name=JobName,proto3" json:"JobName"`
	// * 记录编号
	CursorId             int64    `protobuf:"varint,2,opt,name=CursorId,proto3" json:"CursorId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateCursorRequest) Reset()         { *m = UpdateCursorRequest{} }
func (m *UpdateCursorRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateCursorRequest) ProtoMessage()    {}
func (*UpdateCursorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_execute_service_e4d50f39f0dd753a, []int{1}
}
func (m *UpdateCursorRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateCursorRequest.Unmarshal(m, b)
}
func (m *UpdateCursorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateCursorRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateCursorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCursorRequest.Merge(dst, src)
}
func (m *UpdateCursorRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateCursorRequest.Size(m)
}
func (m *UpdateCursorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCursorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCursorRequest proto.InternalMessageInfo

func (m *UpdateCursorRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *UpdateCursorRequest) GetCursorId() int64 {
	if m != nil {
		return m.CursorId
	}
	return 0
}

type AddFailRequest struct {
	// * 任务名称
	JobName string `protobuf:"bytes,1,opt,name=JobName,proto3" json:"JobName"`
	// * 记录编号
	CursorId             int64    `protobuf:"varint,2,opt,name=CursorId,proto3" json:"CursorId"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddFailRequest) Reset()         { *m = AddFailRequest{} }
func (m *AddFailRequest) String() string { return proto.CompactTextString(m) }
func (*AddFailRequest) ProtoMessage()    {}
func (*AddFailRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_execute_service_e4d50f39f0dd753a, []int{2}
}
func (m *AddFailRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddFailRequest.Unmarshal(m, b)
}
func (m *AddFailRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddFailRequest.Marshal(b, m, deterministic)
}
func (dst *AddFailRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddFailRequest.Merge(dst, src)
}
func (m *AddFailRequest) XXX_Size() int {
	return xxx_messageInfo_AddFailRequest.Size(m)
}
func (m *AddFailRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddFailRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddFailRequest proto.InternalMessageInfo

func (m *AddFailRequest) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *AddFailRequest) GetCursorId() int64 {
	if m != nil {
		return m.CursorId
	}
	return 0
}

// * JobExecData
type SExecutionData struct {
	// * 编号
	Id int64 `protobuf:"varint,1,opt,name=Id,proto3" json:"Id"`
	// * 任务名称
	JobName string `protobuf:"bytes,2,opt,name=JobName,proto3" json:"JobName"`
	// * 上次执行位置索引
	LastExecuteCursorId int64 `protobuf:"varint,3,opt,name=LastExecuteCursorId,proto3" json:"LastExecuteCursorId"`
	// * 最后执行时间
	LastExecteTime       int64    `protobuf:"varint,4,opt,name=LastExecteTime,proto3" json:"LastExecteTime"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SExecutionData) Reset()         { *m = SExecutionData{} }
func (m *SExecutionData) String() string { return proto.CompactTextString(m) }
func (*SExecutionData) ProtoMessage()    {}
func (*SExecutionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_execute_service_e4d50f39f0dd753a, []int{3}
}
func (m *SExecutionData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SExecutionData.Unmarshal(m, b)
}
func (m *SExecutionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SExecutionData.Marshal(b, m, deterministic)
}
func (dst *SExecutionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SExecutionData.Merge(dst, src)
}
func (m *SExecutionData) XXX_Size() int {
	return xxx_messageInfo_SExecutionData.Size(m)
}
func (m *SExecutionData) XXX_DiscardUnknown() {
	xxx_messageInfo_SExecutionData.DiscardUnknown(m)
}

var xxx_messageInfo_SExecutionData proto.InternalMessageInfo

func (m *SExecutionData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SExecutionData) GetJobName() string {
	if m != nil {
		return m.JobName
	}
	return ""
}

func (m *SExecutionData) GetLastExecuteCursorId() int64 {
	if m != nil {
		return m.LastExecuteCursorId
	}
	return 0
}

func (m *SExecutionData) GetLastExecteTime() int64 {
	if m != nil {
		return m.LastExecteTime
	}
	return 0
}

func init() {
	proto.RegisterType((*GetJobRequest)(nil), "GetJobRequest")
	proto.RegisterType((*UpdateCursorRequest)(nil), "UpdateCursorRequest")
	proto.RegisterType((*AddFailRequest)(nil), "AddFailRequest")
	proto.RegisterType((*SExecutionData)(nil), "SExecutionData")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExecutionServiceClient is the client API for ExecutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExecutionServiceClient interface {
	// * 获取JobExecData
	GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*SExecutionData, error)
	// * 更新任务执行游标
	UpdateExecuteCursor(ctx context.Context, in *UpdateCursorRequest, opts ...grpc.CallOption) (*Result, error)
	// * 记录失败
	AddFail(ctx context.Context, in *AddFailRequest, opts ...grpc.CallOption) (*Result, error)
}

type executionServiceClient struct {
	cc *grpc.ClientConn
}

func NewExecutionServiceClient(cc *grpc.ClientConn) ExecutionServiceClient {
	return &executionServiceClient{cc}
}

func (c *executionServiceClient) GetJob(ctx context.Context, in *GetJobRequest, opts ...grpc.CallOption) (*SExecutionData, error) {
	out := new(SExecutionData)
	err := c.cc.Invoke(ctx, "/ExecutionService/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionServiceClient) UpdateExecuteCursor(ctx context.Context, in *UpdateCursorRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ExecutionService/UpdateExecuteCursor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionServiceClient) AddFail(ctx context.Context, in *AddFailRequest, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/ExecutionService/AddFail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutionServiceServer is the server API for ExecutionService service.
type ExecutionServiceServer interface {
	// * 获取JobExecData
	GetJob(context.Context, *GetJobRequest) (*SExecutionData, error)
	// * 更新任务执行游标
	UpdateExecuteCursor(context.Context, *UpdateCursorRequest) (*Result, error)
	// * 记录失败
	AddFail(context.Context, *AddFailRequest) (*Result, error)
}

func RegisterExecutionServiceServer(s *grpc.Server, srv ExecutionServiceServer) {
	s.RegisterService(&_ExecutionService_serviceDesc, srv)
}

func _ExecutionService_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionServiceServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExecutionService/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionServiceServer).GetJob(ctx, req.(*GetJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionService_UpdateExecuteCursor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCursorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionServiceServer).UpdateExecuteCursor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExecutionService/UpdateExecuteCursor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionServiceServer).UpdateExecuteCursor(ctx, req.(*UpdateCursorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionService_AddFail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionServiceServer).AddFail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExecutionService/AddFail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionServiceServer).AddFail(ctx, req.(*AddFailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExecutionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ExecutionService",
	HandlerType: (*ExecutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetJob",
			Handler:    _ExecutionService_GetJob_Handler,
		},
		{
			MethodName: "UpdateExecuteCursor",
			Handler:    _ExecutionService_UpdateExecuteCursor_Handler,
		},
		{
			MethodName: "AddFail",
			Handler:    _ExecutionService_AddFail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "execution_service.proto",
}

func init() {
	proto.RegisterFile("execution_service.proto", fileDescriptor_execute_service_e4d50f39f0dd753a)
}

var fileDescriptor_execute_service_e4d50f39f0dd753a = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0x9b, 0xf4, 0x4f, 0xdb, 0xff, 0xa0, 0xa9, 0x6c, 0x55, 0x42, 0x2e, 0x96, 0x80, 0x52,
	0x10, 0x56, 0xa9, 0xe0, 0xc5, 0x53, 0xad, 0x56, 0x5a, 0xc5, 0xc3, 0x56, 0x2f, 0x5e, 0x64, 0x93,
	0x1d, 0x62, 0x20, 0x71, 0xe3, 0x66, 0x23, 0x7e, 0x10, 0xcf, 0x7e, 0x56, 0x61, 0xd3, 0x84, 0x46,
	0x0a, 0x1e, 0x3c, 0x85, 0x37, 0x99, 0xf9, 0xed, 0xec, 0x7b, 0x0b, 0x7b, 0xf8, 0x81, 0x61, 0xa1,
	0xf1, 0x39, 0x47, 0xf5, 0x1e, 0x87, 0x48, 0x33, 0x25, 0xb5, 0xf4, 0xb6, 0xa2, 0x44, 0x06, 0x3c,
	0x29, 0x95, 0x3f, 0x81, 0xed, 0x1b, 0xd4, 0x0b, 0x19, 0x30, 0x7c, 0x2b, 0x30, 0xd7, 0xc4, 0x85,
	0xee, 0x42, 0x06, 0xf7, 0x3c, 0x45, 0xd7, 0x1a, 0x5a, 0xa3, 0xff, 0xac, 0x92, 0x64, 0x1f, 0x3a,
	0x53, 0x85, 0x5c, 0xa3, 0x6b, 0x0f, 0xad, 0x51, 0x8f, 0xad, 0x94, 0x7f, 0x0b, 0x83, 0xc7, 0x4c,
	0x70, 0x8d, 0xd3, 0x42, 0xe5, 0x52, 0xfd, 0x0e, 0xf2, 0xa0, 0x57, 0xb6, 0xce, 0x85, 0x41, 0xb5,
	0x59, 0xad, 0xfd, 0x19, 0x38, 0x13, 0x21, 0x66, 0x3c, 0x4e, 0xfe, 0xc6, 0xf9, 0xb4, 0xc0, 0x59,
	0x5e, 0x1b, 0x03, 0x62, 0xf9, 0x7a, 0xc5, 0x35, 0x27, 0x0e, 0xd8, 0x73, 0x61, 0x18, 0x6d, 0x66,
	0xcf, 0xc5, 0x3a, 0xd8, 0x6e, 0x82, 0x4f, 0x61, 0x70, 0xc7, 0x73, 0x5d, 0x8e, 0x63, 0x7d, 0x46,
	0xdb, 0x8c, 0x6e, 0xfa, 0x45, 0x8e, 0xc0, 0xa9, 0xca, 0x1a, 0x1f, 0xe2, 0x14, 0xdd, 0x7f, 0xa6,
	0xf9, 0x47, 0x75, 0xfc, 0x65, 0xc1, 0x4e, 0xbd, 0xd5, 0xb2, 0xcc, 0x85, 0x1c, 0x43, 0xa7, 0xcc,
	0x80, 0x38, 0xb4, 0x11, 0x86, 0xd7, 0xa7, 0xcd, 0x3b, 0xf8, 0x2d, 0x72, 0x5e, 0xb9, 0xdd, 0x58,
	0x81, 0xec, 0xd2, 0x0d, 0x19, 0x78, 0x5d, 0xca, 0x30, 0x2f, 0x12, 0xed, 0xb7, 0xc8, 0x21, 0x74,
	0x57, 0xc6, 0x92, 0x3e, 0x6d, 0x5a, 0xbc, 0xd6, 0x76, 0x79, 0x00, 0x83, 0x50, 0xa6, 0x34, 0x8a,
	0xf5, 0x4b, 0x11, 0xd0, 0x48, 0x8e, 0x25, 0x55, 0x59, 0xf8, 0xd4, 0xa3, 0x27, 0x17, 0xe6, 0xc1,
	0x04, 0x1d, 0xf3, 0x39, 0xfb, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xcc, 0x7f, 0xc5, 0x19, 0x5e, 0x02,
	0x00, 0x00,
}
