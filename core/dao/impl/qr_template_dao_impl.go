/**
 * This file is auto generated by tto v0.4.5 !
 * If you want to modify this code, please read the guide 
 * to modify code template.
 *
 * Get started: https://github.com/ixre/tto
 *
 * Copyright (C) 2021 <no value>, All rights reserved.
 *
 * name : comm_qr_template_dao_impl.go
 * author : jarrysix
 * date : 2021/12/02 10:37:45
 * description :
 * history :
 */
package impl

import (
	"database/sql"
	"fmt"
	"github.com/ixre/gof/db"
	"github.com/ixre/gof/db/orm"
	"go2o/core/dao"
	"go2o/core/dao/model"
	"log"
)

var _ dao.ICommQrTemplateDao = new(commQrTemplateDaoImpl)
type commQrTemplateDaoImpl struct{
    _orm orm.Orm
}

var commQrTemplateDaoImplMapped = false

// Create new CommQrTemplateDao
func NewCommQrTemplateDao(o orm.Orm) dao.ICommQrTemplateDao{
    if !commQrTemplateDaoImplMapped{
        _ = o.Mapping(model.CommQrTemplate{},"comm_qr_template")
        commQrTemplateDaoImplMapped = true
    }
    return &commQrTemplateDaoImpl{
        _orm:o,
    }
}
// Get CommQrTemplate
func (c *commQrTemplateDaoImpl) GetQrTemplate(primary interface{})*model.CommQrTemplate{
    e := model.CommQrTemplate{}
    err := c._orm.Get(primary,&e)
    if err == nil{
        return &e
    }
    if err != sql.ErrNoRows{
      log.Println("[ Orm][ Error]:",err.Error(),"; Entity:CommQrTemplate")
    }
    return nil
}

// GetBy CommQrTemplate
func (c *commQrTemplateDaoImpl) GetQrTemplateBy(where string,v ...interface{})*model.CommQrTemplate{
    e := model.CommQrTemplate{}
    err := c._orm.GetBy(&e,where,v...)
    if err == nil{
        return &e
    }
    if err != sql.ErrNoRows{
      log.Println("[ Orm][ Error]:",err.Error(),"; Entity:CommQrTemplate")
    }
    return nil
}

// Count CommQrTemplate by condition
func (c *commQrTemplateDaoImpl) CountQrTemplate(where string,v ...interface{})(int,error){
   return c._orm.Count(model.CommQrTemplate{},where,v...)
}

// Select CommQrTemplate
func (c *commQrTemplateDaoImpl) SelectQrTemplate(where string,v ...interface{})[]*model.CommQrTemplate {
    list := make([]*model.CommQrTemplate,0)
    err := c._orm.Select(&list,where,v...)
    if err != nil && err != sql.ErrNoRows{
      log.Println("[ Orm][ Error]:",err.Error(),"; Entity:CommQrTemplate")
    }
    return list
}

// Save CommQrTemplate
func (c *commQrTemplateDaoImpl) SaveQrTemplate(v *model.CommQrTemplate)(int,error){
    id,err := orm.Save(c._orm,v,int(v.Id))
    if err != nil && err != sql.ErrNoRows{
      log.Println("[ Orm][ Error]:",err.Error(),"; Entity:CommQrTemplate")
    }
    return id,err
}

// Delete CommQrTemplate
func (c *commQrTemplateDaoImpl) DeleteQrTemplate(primary interface{}) error {
    err := c._orm.DeleteByPk(model.CommQrTemplate{}, primary)
    if err != nil && err != sql.ErrNoRows{
      log.Println("[ Orm][ Error]:",err.Error(),"; Entity:CommQrTemplate")
    }
    return err
}

// Batch Delete CommQrTemplate
func (c *commQrTemplateDaoImpl) BatchDeleteQrTemplate(where string,v ...interface{})(int64,error) {
    r,err := c._orm.Delete(model.CommQrTemplate{},where,v...)
    if err != nil && err != sql.ErrNoRows{
      log.Println("[ Orm][ Error]:",err.Error(),"; Entity:CommQrTemplate")
    }
    return r,err
}

// Query paging data
func (c *commQrTemplateDaoImpl) PagingQueryQrTemplate(begin, end int,where, orderBy string) (total int, rows []map[string]interface{}) {
	if orderBy != "" {
		orderBy = "ORDER BY " + orderBy
	}
	if where == "" {
	    where = "1=1"
	}
	s := fmt.Sprintf(`SELECT COUNT(0) FROM comm_qr_template WHERE %s`, where)
	_ = c._orm.Connector().ExecScalar(s,&total)
	if total > 0{
	    s = fmt.Sprintf(`SELECT * FROM comm_qr_template WHERE %s %s
	        LIMIT $2 OFFSET $1`,
            where, orderBy)
        err := c._orm.Connector().Query(s, func(_rows *sql.Rows) {
            rows = db.RowsToMarshalMap(_rows)
        }, begin, end-begin)
        if err != nil{
            log.Println(fmt.Sprintf("[ Orm][ Error]: %s (table:comm_qr_template)", err.Error()))
        }
	}else{
	    rows = make([]map[string]interface{},0)
	}
	return total, rows
}